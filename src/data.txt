insert into Questao (id, enunciado, disciplina_id) values(20, 'Escreva uma classe de nome Circulo com os seguintes métodos (considere o valor de PI igual a 3,14159):<BR>
double calculaArea(double raio) <BR>
double calculaPerimetro(double raio) <BR>
double calculaDiametro(double raio) 
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(20,' Circulo circulo = new Circulo();
assertEquals(circulo.calculaArea(0.0),0.0);
assertEquals(circulo.calculaArea(1.0),1.0*1*3.14159);
assertEquals(circulo.calculaArea(1.5),1.5*1.5*3.14159);
assertEquals(circulo.calculaArea(10.0),10*10*3.14159);
assertEquals(circulo.calculaArea(3.0),3*3*3.14159);
assertEquals(circulo.calculaPerimetro(1.5),2*3.14159*1.5);
assertEquals(circulo.calculaPerimetro(2.5),2*3.14159*2.5);
assertEquals(circulo.calculaPerimetro(4.0),2*3.14159*4);
assertEquals(circulo.calculaPerimetro(0.0),2*3.14159*0);
assertEquals(circulo.calculaDiametro(2.0),2.0*2);
assertEquals(circulo.calculaDiametro(0.0),0*2.0);
assertEquals(circulo.calculaDiametro(10.0),10.0*2);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(21, 'Escreva uma classe de nome Quadrado com os seguintes métodos: <BR>
double calculaArea(double lado) <BR>
double calculaPerimetro(double lado) <BR>
double calculaDiagonal(double lado) 
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(21,' Quadrado quadrado = new Quadrado();
assertEquals(quadrado.calculaArea(0.0),0);
assertEquals(quadrado.calculaArea(1.0),1);
assertEquals(quadrado.calculaArea(1.5),1.5*1.5);
assertEquals(quadrado.calculaArea(10.0),10*10);
assertEquals(quadrado.calculaArea(3.0),3*3);
assertEquals(quadrado.calculaPerimetro(1.5),4*1.5);
assertEquals(quadrado.calculaPerimetro(2.5),4*2.5);
assertEquals(quadrado.calculaPerimetro(4.0),4*4);
assertEquals(quadrado.calculaPerimetro(0.0),4*0);
assertEquals(quadrado.calculaDiagonal(2.0),2*Math.sqrt(2.0));
assertEquals(quadrado.calculaDiagonal(0.0),0*Math.sqrt(2.0));
assertEquals(quadrado.calculaDiagonal(10.0),10*Math.sqrt(2.0));', 'java');
insert into Questao (id, enunciado, disciplina_id) values(22, 'Escreva uma classe de nome Retangulo com os seguintes métodos: <BR>
double calculaArea(double largura, double altura) <BR>
double calculaPerimetro(double largura, double altura) <BR>
double calculaDiagonal(double largura, double altura) 
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(22,' Retangulo retangulo = new Retangulo();
assertEquals(retangulo.calculaArea(1.0,2.0),1*2.0);
assertEquals(retangulo.calculaArea(2.0,5.0),10.0);
assertEquals(retangulo.calculaArea(3.0,4.5),3.0*4.5);
assertEquals(retangulo.calculaPerimetro(1.0,2.0),1.0*2.0+2.0*2.0);    
assertEquals(retangulo.calculaPerimetro(2.0,5.0),2.0*2.0+5.0*2.0);     
assertEquals(retangulo.calculaPerimetro(3.0,4.5),3.0*2.0+4.5*2.0);
assertEquals(retangulo.calculaDiagonal(1.0,2.0),Math.sqrt(1.0*1.0+2.0*2.0));
assertEquals(retangulo.calculaDiagonal(2.0,4.0),Math.sqrt(2.0*2.0+4.0*4.0));
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(23, 'Faça uma classe Calculo (sem acento) com um método chamado raizDaEquacao1Grau que receba dois parâmetros double: a, b e retorne a raiz da equação y = ax + b.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(23,' 	Calculo calculo = new Calculo();

         assertEquals(calculo.raizDaEquacao1Grau(1.0, 0.0), 0.0);		
         assertEquals(calculo.raizDaEquacao1Grau(1.0, -2.0), 2.0);	
         assertEquals(calculo.raizDaEquacao1Grau(5.0, 45.0), -9.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-0.5, 12.0), 24.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-3.5, -14.0), -4.0);	
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(24, 'Acrescente na classe anterior um método de nome calculaVolumeLata que receba os valores do raio e da altura em milímetros (mm) e retorne o volume de uma lata de óleo em centímetros cúbicos.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(24,' 	Calculo calculo = new Calculo();

         assertEquals(calculo.raizDaEquacao1Grau(1.0, 0.0), 0.0);		
         assertEquals(calculo.raizDaEquacao1Grau(1.0, -2.0), 2.0);	
         assertEquals(calculo.raizDaEquacao1Grau(5.0, 45.0), -9.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-0.5, 12.0), 24.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-3.5, -14.0), -4.0);	


        assertEquals(calculo.calculaVolumeLata(0.0, 1.0), 0.0);	
        assertEquals(calculo.calculaVolumeLata(5.0, 0.0), 0.0);
        assertEquals(calculo.calculaVolumeLata(0.0, 0.0), 0.0);
        assertEquals(calculo.calculaVolumeLata(50.0, 120.0), Math.PI * 300.0);
        assertEquals(calculo.calculaVolumeLata(100.0, 40.0), Math.PI * 400.0);
        assertEquals(calculo.calculaVolumeLata(60.0, 200.0), Math.PI * 720.0);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(25, 'Acrescente na classe anterior um método arredonda(double valor, int casasDecimais) que retorna o número com o número de casas decimais informado no segundo parâmetro. Ao arredondar números maior ou igual a 5 arredonda para cima, e menor ou igual a 5 para baixo.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(25,' 	Calculo calculo = new Calculo();

         assertEquals(calculo.raizDaEquacao1Grau(1.0, 0.0), 0.0);		
         assertEquals(calculo.raizDaEquacao1Grau(1.0, -2.0), 2.0);	
         assertEquals(calculo.raizDaEquacao1Grau(5.0, 45.0), -9.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-0.5, 12.0), 24.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-3.5, -14.0), -4.0);	


        assertEquals(calculo.calculaVolumeLata(0.0, 1.0), 0.0);	
        assertEquals(calculo.calculaVolumeLata(5.0, 0.0), 0.0);
        assertEquals(calculo.calculaVolumeLata(0.0, 0.0), 0.0);
        assertEquals(calculo.calculaVolumeLata(50.0, 120.0), Math.PI * 300.0);
        assertEquals(calculo.calculaVolumeLata(100.0, 40.0), Math.PI * 400.0);
        assertEquals(calculo.calculaVolumeLata(60.0, 200.0), Math.PI * 720.0);

        assertEquals(calculo.arredonda(1.123456, 0), 1.0);	
        assertEquals(calculo.arredonda(1.123456, 1), 1.1);	
        assertEquals(calculo.arredonda(1.123456, 2), 1.12);	
        assertEquals(calculo.arredonda(1.123456, 3), 1.123);	
        assertEquals(calculo.arredonda(1.123456, 4), 1.1235);	
        assertEquals(calculo.arredonda(1.123456, 5), 1.12346);	
        assertEquals(calculo.arredonda(1.123456, 6), 1.123456);	
        assertEquals(calculo.arredonda(1.123456, 7), 1.123456);	
        assertEquals(calculo.arredonda(1.123456, 8), 1.123456);	
        assertEquals(calculo.arredonda(1.123456, 9), 1.123456);	
        assertEquals(calculo.arredonda(1.123456, 10), 1.123456);	
        assertEquals(calculo.arredonda(Math.PI, 3), 3.142);	
        assertEquals(calculo.arredonda(Math.PI, 3), 3.1416);	
        assertEquals(calculo.arredonda(Math.PI, 4), 3.14159);	
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(26, 'Faça um programa de nome Dado e método de nome sorteia que retorna um número aleatório de 1 a 6. O método deve retornar um valor do tipo int.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(26,' Dado dado = new Dado();
for (int i = 0; i < 100; i++) {
	int numeroSorteado = dado.sorteia();
	assertEquals(numeroSorteado>=1,true);
	assertEquals(numeroSorteado<=6,true);
}

// Testa se está viciado
int[] valores = new int[7];
for (int i = 0; i < 6000; i++) {
	valores[dado.sorteia()]++;
}

for (int i = 1; i <= 6; i++) {
	if ((valores[i] < 750) || (valores[i] > 1250)) {
		String erro = &quot;Dado viciado. A distribuição de valores sorteados não está uniforme (tolerância de 25%). Valor 1 está saindo &quot;+Math.round(valores[1]/6000.00*100)+&quot;% das vezes.&quot; + 
			&quot;Valor 2 está saindo &quot;+Math.round(valores[2]/6000.00*100)+&quot;% das vezes.&quot; +
			&quot;Valor 3 está saindo &quot;+Math.round(valores[3]/6000.00*100)+&quot;% das vezes.&quot; +
			&quot;Valor 4 está saindo &quot;+Math.round(valores[4]/6000.00*100)+&quot;% das vezes.&quot; +
			&quot;Valor 5 está saindo &quot;+Math.round(valores[5]/6000.00*100)+&quot;% das vezes.&quot; +
			&quot;Valor 6 está saindo &quot;+Math.round(valores[6]/6000.00*100)+&quot;% das vezes.&quot;;

		 throw new TestException(erro);		
	}
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(27, 'Faça um programa de nome Video com um método com o nome inicializa que recebe, nesta ordem, a largura, a altura, a quantidade de bits por pixel para representar a cor, o valor do fps, a quantidade de canais de áudio, a freqüência de amostragem do áudio (em Hz), a quantidade de bits por amostra (todos os valores anteriores são números inteiros) e o tempo total de duração (double). Faça os seguintes métodos: calculaBps(), calculaTamanhoSomEmBytes(), calculaTamanhoImagemEmBytes(), calculaTamanhoTotalEmBytes() e calculaTamanhoTotalEmBits(). Todos estes métodos retornam números inteiros. Para evitar repetição das fórmulas, um método deve chamar o outro quando for pertinente.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(27,'    Video video = new Video();
   video.inicializa(320, 200, 16, 15, 2, 22050, 16, 11.0);
   assertEquals(video.calculaBps(), 16065600);
   assertEquals(video.calculaTamanhoSomEmBytes(), 970200);
   assertEquals(video.calculaTamanhoImagemEmBytes(), 21120000);
   assertEquals(video.calculaTamanhoTotalEmBytes(), 22090200);
   assertEquals(video.calculaTamanhoTotalEmBits(), 176721600);

   video.inicializa(720, 480, 24, 30, 5, 44100, 24, 3.5);
   assertEquals(video.calculaBps(), 254124000);
   assertEquals(video.calculaTamanhoSomEmBytes(), 2315250);
   assertEquals(video.calculaTamanhoImagemEmBytes(), 108864000);
   assertEquals(video.calculaTamanhoTotalEmBytes(), 111179250);
   assertEquals(video.calculaTamanhoTotalEmBits(), 889434000);

   video.inicializa(640, 480, 24, 25, 2, 32000, 16, 5.0);
   assertEquals(video.calculaBps(), 185344000);
   assertEquals(video.calculaTamanhoSomEmBytes(), 640000);
   assertEquals(video.calculaTamanhoImagemEmBytes(), 115200000);
   assertEquals(video.calculaTamanhoTotalEmBytes(), 115840000);
   assertEquals(video.calculaTamanhoTotalEmBits(), 926720000);

   video.inicializa(576, 324, 16, 24, 1, 32000, 16, 18.0);
   assertEquals(video.calculaBps(), 72175616);
   assertEquals(video.calculaTamanhoSomEmBytes(), 1152000);
   assertEquals(video.calculaTamanhoImagemEmBytes(), 161243136);
   assertEquals(video.calculaTamanhoTotalEmBytes(), 162395136);
   assertEquals(video.calculaTamanhoTotalEmBits(), 1299161088);

   video.inicializa(0, 0, 16, 24, 1, 32000, 16, 18.0);
   assertEquals(video.calculaBps(), 512000);
   assertEquals(video.calculaTamanhoSomEmBytes(), 1152000);
   assertEquals(video.calculaTamanhoImagemEmBytes(), 0);
   assertEquals(video.calculaTamanhoTotalEmBytes(), 1152000);
   assertEquals(video.calculaTamanhoTotalEmBits(), 9216000);

   video.inicializa(0, 0, 16, 24, 1, 32000, 16, 0.0);
   assertEquals(video.calculaBps(), 512000);
   assertEquals(video.calculaTamanhoSomEmBytes(), 0);
   assertEquals(video.calculaTamanhoImagemEmBytes(), 0);
   assertEquals(video.calculaTamanhoTotalEmBytes(), 0);
   assertEquals(video.calculaTamanhoTotalEmBits(), 0);

   video.inicializa(0, 0, 16, 24, 1, 0, 16, 50.0);
   assertEquals(video.calculaBps(), 0);
   assertEquals(video.calculaTamanhoSomEmBytes(), 0);
   assertEquals(video.calculaTamanhoImagemEmBytes(), 0);
   assertEquals(video.calculaTamanhoTotalEmBytes(), 0);
   assertEquals(video.calculaTamanhoTotalEmBits(), 0);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(28, 'Faça um programa de nome Base com os seguintes métodos:<BR>
void setBase(int b) // atribui o valor da base ao objeto, que pode ser de 2 a 9<BR>
int converteParaDecimal(int valor) // converte o número (que terá no no máximo 6 algarismos) para a base 10
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(28,'    Base conv = new Base();

   conv.setBase(2);
   for (int i = 0; i < 64; i++)
   {
      int bin = 0, pot = 1, n = i;
      while (n > 0) {
         bin += n % 2 * pot;
         pot *= 10;
         n /= 2;
      }
      assertEquals(conv.converteParaDecimal(bin), i);
   }

   conv.setBase(3);
   for (int i = 0; i < 729; i++)
   {
      int tern = 0, pot = 1, n = i;
      while (n > 0) {
         tern += n % 3 * pot;
         pot *= 10;
         n /= 3;
      }
      assertEquals(conv.converteParaDecimal(tern), i);
   }

   conv.setBase(5);
   /* Escolhe alguns valores aleatórios para testar */
   for (int i = 0; i < 15625; i += (int)(Math.random() * 5 + 2))
   {
      int base5 = 0, pot = 1, n = i;
      while (n > 0) {
         base5 += n % 5 * pot;
         pot *= 10;
         n /= 5;
      }
      assertEquals(conv.converteParaDecimal(base5), i);
   }


   conv.setBase(9);
   /* Escolhe alguns valores aleatórios para testar */
   for (int i = 0; i < 531441; i += (int)(Math.random() * 27 + 2))
   {
      int base9 = 0, pot = 1, n = i;
      while (n > 0) {
         base9 += n % 9 * pot;
         pot *= 10;
         n /= 9;
      }
      assertEquals(conv.converteParaDecimal(base9), i);
   }
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(29, 'Faça a classe ContaRestaurante com os seguintes métodos:<BR>
void acrescentaPedido(double valor) // acrescenta um novo pedido à mesma conta<BR>
double calculaValorTotal() // retorna o valor a pagar, já embutindo o valor dos 10% do garçom<BR>
double calculaValorPorPessoa(int numPessoas) // retorna o valor que cada pessoa deve pagar<BR>

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(29,'    ContaRestaurante conta = new ContaRestaurante();

   assertEquals(conta.calculaValorTotal(), 0.0);
   assertEquals(conta.calculaValorPorPessoa(3), 0.0);

   conta.acrescentaPedido(15.00);
   assertEquals(conta.calculaValorTotal(), 16.50);
   assertEquals(conta.calculaValorPorPessoa(2), 8.25);

   conta.acrescentaPedido(28.00);
   assertEquals(conta.calculaValorTotal(), 47.30);
   assertEquals(conta.calculaValorPorPessoa(5), 9.46);

   conta.acrescentaPedido(32.00);
   assertEquals(conta.calculaValorTotal(), 82.50);
   assertEquals(conta.calculaValorPorPessoa(6), 13.75);

   conta.acrescentaPedido(44.00);
   assertEquals(conta.calculaValorTotal(), 130.90);
   assertEquals(conta.calculaValorPorPessoa(11), 11.90);

   conta.acrescentaPedido(35.00);
   assertEquals(conta.calculaValorTotal(), 169.40);
   assertEquals(conta.calculaValorPorPessoa(4), 42.35);


', 'java');
insert into Questao (id, enunciado, disciplina_id) values(30, 'Faça uma classe Numero com o seguinte método:<BR>
int compara (int valor1, int valor2) - que retorna -1 se o valor1 for menor do que o valor2, zero se for igual e 1 se for maior.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(30,' // Teste
Numero num = new Numero();
assertEquals(num.compara(10,20), -1);
assertEquals(num.compara(0,0), 0);
assertEquals(num.compara(10,10), 0);
assertEquals(num.compara(20,10), 1);
assertEquals(num.compara(10000,20), 1);
assertEquals(num.compara(10,0), 1);
assertEquals(num.compara(0,1), -1);
assertEquals(num.compara(0,-1), 1);
assertEquals(num.compara(-1,-2), 1);
assertEquals(num.compara(-2,-1), -1);
assertEquals(num.compara(-2,-2), 0);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(31, 'Acrescente na classe Numero o método:<BR>
boolean ehPar(int valor) - que retorna true se o valor é par', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(31,' // Teste
Numero num = new Numero();
assertEquals(num.ehPar(0), true);
assertEquals(num.ehPar(1), false);
assertEquals(num.ehPar(2), true);
assertEquals(num.ehPar(7), false);
assertEquals(num.ehPar(8), true);
assertEquals(num.ehPar(1005), false);
assertEquals(num.ehPar(1006), true);
assertEquals(num.ehPar(1016), true);
assertEquals(num.ehPar(1025), false);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(32, 'Acrescente na classe Numero os métodos:<BR>
int max (int a, int b)<BR>
int min (int a, int b)<BR>
que devolvem, respectivamente, o máximo e o mínimo entre a e b.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(32,' // Teste
Numero num = new Numero();
assertEquals(num.max(4, 5), 5);
assertEquals(num.max(5, 4), 5);
assertEquals(num.min(4, 5), 4);
assertEquals(num.min(5, 4), 4);
assertEquals(num.min(5, 0), 0);
assertEquals(num.max(-1, -2), -1);
assertEquals(num.min(-2, -1), -2);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(33, 'Acrescente na classe Numero o método:<BR>
boolean ehDivisivel (int a, int b)<BR>
Que retorne true caso a seja divisível por b e false caso contrário.
Você pode assumir que a e b são positivos (não negativos e não nulos).
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(33,' // Teste
Numero num = new Numero();
assertEquals(num.ehDivisivel (45, 4), false);
assertEquals(num.ehDivisivel (45, 5), true);
assertEquals(num.ehDivisivel (4, 2), true);
assertEquals(num.ehDivisivel (2, 2), true);
assertEquals(num.ehDivisivel (131, 1), true);
assertEquals(num.ehDivisivel (131, 17), false);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(34, 'Faça uma classe Funcionario com o seguinte método:<BR>
double calculaSalario(double valorPorHora, int qtdeHorasTrabalhadas, int diasUteisDoMes) - que calcula o salário do empregado. O valor que o empregado receber por hora trabalhada, a quantidade de horas trabalhadas e a quantidade de dias úteis do mês são passadas como parâmetros. O empregado deve trabalhar em média 8 horas por dia. Caso o número de horas trabalhadas seja maior do que o esperado, o empregado deve receber um adicional de 50% por cada hora extra. Caso trabalhe menos, não deve receber por estas horas não-trabalhadas.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(34,' // Teste
Funcionario f = new Funcionario();
assertEquals(f.calculaSalario(10.0, 200, 22), 2120);
assertEquals(f.calculaSalario(15.0, 100, 20), 1500);
assertEquals(f.calculaSalario(10.0, 176, 22), 1760);
assertEquals(f.calculaSalario(10.0, 176, 20), 1840);
assertEquals(f.calculaSalario(10.0, 0, 20), 0);
assertEquals(f.calculaSalario(10.0, 1, 20), 10);
assertEquals(f.calculaSalario(10.0, 300, 20), 3700);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(35, 'Escreva uma classe Data com os atributos dia, mes e ano, e os métodos getDia(), getMes() e getAno() que retornam o dia, o mês e o ano. Faça também os seguintes métodos:<BR>
void init(int d, int m, int a) - que carrega os valores do dia, mês e ano no objeto<BR>
boolean ehBissexto() - determina se o ano da data é bissexto<BR>
int quantidadeDeDias( ) - retorna a quantidade de dias que o ano possui, levando em conta se ele é bissexto. <BR>
int comparaDatas(Data data2) - compara a data com outra, retornando -1 se a data for menor do que a data2 passada como parâmetro, 0 se for igual e 1 se for maior.<BR>
boolean ehValida() - testa se a data é válida.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(35,' // Teste
class TestaData {
Data nova (int d, int m, int a) {
	Data data = new Data();
	data.init(d,m,a);
	return data;	
}
}
TestaData testaData = new TestaData();

assertEquals(testaData.nova(1,1,1600).ehBissexto(), true);
assertEquals(testaData.nova(1,1,2000).ehBissexto(), true);
assertEquals(testaData.nova(1,1,2400).ehBissexto(), true);
assertEquals(testaData.nova(1,1,1996).ehBissexto(), true);
assertEquals(testaData.nova(1,1,2004).ehBissexto(), true);
assertEquals(testaData.nova(1,1,2008).ehBissexto(), true);
assertEquals(testaData.nova(1,1,2012).ehBissexto(), true);
assertEquals(testaData.nova(1,1,1800).ehBissexto(), false);
assertEquals(testaData.nova(1,1,1900).ehBissexto(), false);
assertEquals(testaData.nova(1,1,2100).ehBissexto(), false);
assertEquals(testaData.nova(1,1,2200).ehBissexto(), false);
assertEquals(testaData.nova(1,1,2300).ehBissexto(), false);
assertEquals(testaData.nova(1,1,1997).ehBissexto(), false);
assertEquals(testaData.nova(1,1,1998).ehBissexto(), false);
assertEquals(testaData.nova(1,1,1999).ehBissexto(), false);
assertEquals(testaData.nova(1,1,2001).ehBissexto(), false);
assertEquals(testaData.nova(1,1,1900).ehBissexto(), false);
assertEquals(testaData.nova(1,1,1900).ehBissexto(), false);

assertEquals(testaData.nova(1,1,1600).quantidadeDeDias(), 366);
assertEquals(testaData.nova(1,1,2000).quantidadeDeDias(), 366);
assertEquals(testaData.nova(1,1,2400).quantidadeDeDias(), 366);
assertEquals(testaData.nova(1,1,1996).quantidadeDeDias(), 366);
assertEquals(testaData.nova(1,1,2004).quantidadeDeDias(), 366);
assertEquals(testaData.nova(1,1,2008).quantidadeDeDias(), 366);
assertEquals(testaData.nova(1,1,2012).quantidadeDeDias(), 366);
assertEquals(testaData.nova(1,1,1800).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,1900).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,2100).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,2200).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,2300).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,1997).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,1998).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,1999).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,2001).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,1900).quantidadeDeDias(), 365);
assertEquals(testaData.nova(1,1,1900).quantidadeDeDias(), 365);

assertEquals(testaData.nova(1,1,1900).comparaDatas(testaData.nova(1,1,2000)), -1);
assertEquals(testaData.nova(10,10,1900).comparaDatas(testaData.nova(1,1,2000)), -1);
assertEquals(testaData.nova(1,1,2010).comparaDatas(testaData.nova(10,10,2000)), 1);
assertEquals(testaData.nova(1,1,2005).comparaDatas(testaData.nova(1,1,2005)), 0);
assertEquals(testaData.nova(10,10,2005).comparaDatas(testaData.nova(11,9,2005)), 1);
assertEquals(testaData.nova(11,10,1900).comparaDatas(testaData.nova(10,10,1900)), 1);
assertEquals(testaData.nova(11,10,1900).comparaDatas(testaData.nova(15,1,1900)), 1);
assertEquals(testaData.nova(11,11,1900).comparaDatas(testaData.nova(11,11,1900)), 0);
assertEquals(testaData.nova(10,10,1900).comparaDatas(testaData.nova(11,10,1900)), -1);
assertEquals(testaData.nova(15,5,1900).comparaDatas(testaData.nova(11,10,1900)), -1);

assertEquals(testaData.nova(29,2,1600).ehValida(), true);
assertEquals(testaData.nova(29,2,2000).ehValida(), true);
assertEquals(testaData.nova(29,2,2400).ehValida(), true);
assertEquals(testaData.nova(29,2,1996).ehValida(), true);
assertEquals(testaData.nova(29,2,2004).ehValida(), true);
assertEquals(testaData.nova(29,2,2008).ehValida(), true);
assertEquals(testaData.nova(29,2,2012).ehValida(), true);
assertEquals(testaData.nova(29,2,1800).ehValida(), false);
assertEquals(testaData.nova(29,2,1900).ehValida(), false);
assertEquals(testaData.nova(29,2,2100).ehValida(), false);
assertEquals(testaData.nova(29,2,2200).ehValida(), false);
assertEquals(testaData.nova(29,2,2300).ehValida(), false);
assertEquals(testaData.nova(29,2,1997).ehValida(), false);
assertEquals(testaData.nova(29,2,1998).ehValida(), false);
assertEquals(testaData.nova(29,2,1999).ehValida(), false);
assertEquals(testaData.nova(29,2,2001).ehValida(), false);
assertEquals(testaData.nova(29,2,1900).ehValida(), false);
assertEquals(testaData.nova(29,2,1900).ehValida(), false);
assertEquals(testaData.nova(30,2,1600).ehValida(), false);
assertEquals(testaData.nova(31,2,1600).ehValida(), false);
assertEquals(testaData.nova(31,1,1600).ehValida(), true);
assertEquals(testaData.nova(31,3,1600).ehValida(), true);
assertEquals(testaData.nova(31,4,1600).ehValida(), false);
assertEquals(testaData.nova(31,5,1600).ehValida(), true);
assertEquals(testaData.nova(31,6,1600).ehValida(), false);
assertEquals(testaData.nova(31,7,1600).ehValida(), true);
assertEquals(testaData.nova(31,8,1600).ehValida(), true);
assertEquals(testaData.nova(31,9,1600).ehValida(), false);
assertEquals(testaData.nova(31,10,1600).ehValida(), true);
assertEquals(testaData.nova(31,11,1600).ehValida(), false);
assertEquals(testaData.nova(31,12,1600).ehValida(), true);
assertEquals(testaData.nova(25,13,1600).ehValida(), false);
assertEquals(testaData.nova(0,12,1600).ehValida(), false);
assertEquals(testaData.nova(-1,12,1600).ehValida(), false);
assertEquals(testaData.nova(1,0,1600).ehValida(), false);
assertEquals(testaData.nova(1,-1,1600).ehValida(), false);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(36, 'Faça uma classe em Java de nome Jogo com os seguintes métodos:
<LI>void comeca() - sorteia um número inteiro de 1 a 100 (o zero não está incluso) e guarda em um atributo. 
<LI>String adivinha(int num) - compara o número passado como parâmetro com o número sorteado. Se for igual, retorne &quot;Você ganhou&quot;. Se for menor, &quot;Seu número é menor&quot; e se for maior &quot;Seu número é maior&quot;. Caso seja a quinta tentativa e o usuário não ganhou, retorne a mensagem &quot;Você perdeu! O número era xxx&quot;, onde xxx é o valor do número sorteado.
<LI>int numeroSorteado() - retorna o numero que foi sorteado<BR>', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(36,' Jogo jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;);
// Estora as tentativas
assertEquals(jogo.adivinha(jogo.numeroSorteado()-2), &quot;Seu número é menor&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()+2), &quot;Seu número é maior&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()-3), &quot;Você perdeu! O número era &quot; + jogo.numeroSorteado());

// -- Novamente ---
jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;);
// Ganha
assertEquals(jogo.adivinha(jogo.numeroSorteado()), &quot;Você ganhou&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(37, 'Faça uma classe Calculo com o método a seguir, que a partir das características do vídeo, calcula seu tamanho em Mega Bytes. <BR>
int calculaTam (int largura, int altura, int bitsPorPixel, int fps, int qtdeCanais, int freqAmostragem, int bitsPorAmostra, int tempo)', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(37,' Calculo calculo = new Calculo();
assertEquals(calculo.calculaTam(800,600,16,10,2,10000,20,60), (800*600*16*10*60 + 2*10000*20*60)/8/1024/1024);
assertEquals(calculo.calculaTam(300,200,8,15,1,20000,96,160), (300*200*8*15*160 + 1*20000*96*160)/8/1024/1024);
assertEquals(calculo.calculaTam(300,200,8,15,2,20000,96,160), (300*200*8*15*160 + 2*20000*96*160)/8/1024/1024);
assertEquals(calculo.calculaTam(300,200,32,15,2,20000,96,160), (300*200*32*15*160 + 2*20000*96*160)/8/1024/1024);
assertEquals(calculo.calculaTam(300,200,32,15,5,20000,128,20), (300*200*32*15*20 + 5*20000*128*20)/8/1024/1024);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(38, 'Dada a classe Movimentacao:
<PRE>
class Movimentacao {
	double valor;
	int tipo; // 0 para retiradas e 1 para depósito
	void init (int v, int t) {
		valor = v; tipo = t;
	}
	double getValor() { 
		return valor;
	}
	double getTipo() {
		return tipo;
	}
}
</PRE>
Faça uma classe ContaCorrente, como as seguintes operações:
<LI>void aplicaJuros(double taxa) - caso o saldo esteja negativo, debita o valor do juros. A taxa é dada em porcentagem. Por exemplo, se o juros for de 1%, a taxa é 0.01
<LI>void movimenta(Movimentacao m) - recebe uma movimentação e atualiza o saldo
<LI>double getSaldo() - retorna o valor do saldo da conta<BR>
OBS: Para a sua resposta compilar no programa de teste, coloque também o código da classe dada como parte da resposta.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(38,' 			class Conta {
				ContaCorrente cc = new ContaCorrente();
				Conta movimenta (int x, int y) {
					Movimentacao mov = new Movimentacao();
					mov.init(x,y);
					cc.movimenta(mov);
					return this;
				}
				Conta aplicaJuros(double taxa) {
					cc.aplicaJuros(taxa);
					return this;
				}
				double getSaldo() {
					return cc.getSaldo();
				}
			}
			
			assertEquals((new Conta()).movimenta(200,0).getSaldo(),-200);
			assertEquals((new Conta()).movimenta(200,0).movimenta(300,1).getSaldo(),100);
			assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.01).getSaldo(),-202);
			assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.1).getSaldo(),-220);
			assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.1).movimenta(200,1).getSaldo(),-20);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(39, 'Dada a classe Ponto abaixo (que representa um ponto no sistema cartesiano): 
<PRE>
class Ponto {
	double x, y;
	void init(double x, double y) {
		this.x = x;
		this.y = y;
	}
	double getX() {
		return x;
	}
	double getY() {
		return y;
	}
}
</PRE>
Faça a classe Retangulo, com as seguintes operações:
<LI>void init(Ponto a, Ponto b) &#63; onde a é o ponto superior esquerdo e b é o ponto inferior direito
<LI>Ponto centro() &#63; retorna o ponto correspondente ao centro do retângulo
<LI>double calculaArea() &#63; retorna a área do retângulo<BR>
OBS: Para a sua resposta compilar no programa de teste, coloque também o código da classe dada como parte da resposta.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(39,' class Retang {
	Retangulo ret;
	Retang(double x1, double y1, double x2, double y2) {
		ret = new Retangulo();
		Ponto a = new Ponto();
		a.init(x1,y1);
		Ponto b = new Ponto();
		b.init(x2,y2);
		ret.init(a,b);
	}
	Ponto centro() {
		return ret.centro();
	}
	double calculaArea() {
		return ret.calculaArea();
	}
}
assertEquals((new Retang(0,2,2,0)).centro().getX(),1); 
assertEquals((new Retang(0,2,2,0)).centro().getY(),1); 
assertEquals((new Retang(-1,2,1,-2)).centro().getX(),0); 
assertEquals((new Retang(-1,2,1,-2)).centro().getY(),0); 
assertEquals((new Retang(1,2,2,3)).centro().getX(),1.5); 
assertEquals((new Retang(1,3,2,0)).centro().getY(),1.5); 
assertEquals((new Retang(0,2,2,0)).calculaArea(),4); 
assertEquals((new Retang(1,10,3,1)).calculaArea(),18); 
assertEquals((new Retang(-1,10,3,1)).calculaArea(),36); ', 'java');
insert into Questao (id, enunciado, disciplina_id) values(40, '(5.1) Escreva uma classe Aluno com um método void carregaNotas(double p1, double p2, double p3, double p4), que carrega as notas de um aluno em quatro provas. Crie um método double media() que devolve a média aritmética das quatro provas, e um método String veredito() que devolve &quot;aprovado&quot;, &quot;recuperação&quot; ou &quot;reprovado&quot; dependendo da média do aluno.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(40,' Aluno aluno = new Aluno();
aluno.carregaNotas(9.5, 7, 7.5, 8.2);
assertEquals(aluno.media(), 8.05, &quot;Média das notas (9.5, 7, 7.5, 8.2)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (9.5, 7, 7.5, 8.2)&quot;);

aluno.carregaNotas(7.5, 8, 6.7, 8);
assertEquals(aluno.media(), 7.55, &quot;Média das notas (7.5, 8, 6.7, 8)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (7.5, 8, 6.7, 8)&quot;);

aluno.carregaNotas(4.5, 3.5, 2.7, 3.7);
assertEquals(aluno.media(), 3.60, &quot;Média das notas (4.5, 3.5, 2.7, 3.7)&quot;);
assertEquals(aluno.veredito(), &quot;recuperação&quot;, &quot;Veredito das notas (4.5, 3.5, 2.7, 3.7)&quot;);

aluno.carregaNotas(3.7, 2.7, 1.8, 3.6);
assertEquals(aluno.media(), 2.95, &quot;Média das notas (3.7, 2.7, 1.8, 3.6)&quot;);
assertEquals(aluno.veredito(), &quot;reprovado&quot;, &quot;Veredito das notas (3.7, 2.7, 1.8, 3.6)&quot;);

aluno.carregaNotas(10, 4.5, 3.7, 5.2);
assertEquals(aluno.media(), 5.85, &quot;Média das notas (10, 4.5, 3.7, 5.2)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (10, 4.5, 3.7, 5.2)&quot;);

aluno.carregaNotas(4.8, 5.9, 7.2, 8.5);
assertEquals(aluno.media(), 6.6, &quot;Média das notas (4.8, 5.9, 7.2, 8.5)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (4.8, 5.9, 7.2, 8.5)&quot;);

aluno.carregaNotas(8.5, 8.5, 3, 9);
assertEquals(aluno.media(), 7.25, &quot;Média das notas (8.5, 8.5, 3, 9)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (8.5, 8.5, 3, 9)&quot;);

aluno.carregaNotas(5.9, 10, 6.25, 7.25);
assertEquals(aluno.media(), 7.35, &quot;Média das notas (5.9, 10, 6.25, 7.25)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (5.9, 10, 6.25, 7.25)&quot;);

aluno.carregaNotas(1.25, 2.25, 1.5, 4);
assertEquals(aluno.media(), 2.25, &quot;Média das notas (1.25, 2.25, 1.5, 4)&quot;);
assertEquals(aluno.veredito(), &quot;reprovado&quot;, &quot;Veredito das notas (1.25, 2.25, 1.5, 4)&quot;);

aluno.carregaNotas(5, 1, 0, 4.5);
assertEquals(aluno.media(), 2.625, &quot;Média das notas (5, 1, 0, 4.5)&quot;);
assertEquals(aluno.veredito(), &quot;reprovado&quot;, &quot;Veredito das notas (5, 1, 0, 4.5)&quot;);

aluno.carregaNotas(9, 2.25, 3.5, 4.65);
assertEquals(aluno.media(), 4.85, &quot;Média das notas (9, 2.25, 3.5, 4.65)&quot;);
assertEquals(aluno.veredito(), &quot;recuperação&quot;, &quot;Veredito das notas (9, 2.25, 3.5, 4.65)&quot;);

aluno.carregaNotas(5.6, 7.6, 6.6, 6);
assertEquals(aluno.media(), 6.45, &quot;Média das notas (5.6, 7.6, 6.6, 6)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (5.6, 7.6, 6.6, 6)&quot;);

aluno.carregaNotas(9.9, 8.6, 7.4, 0);
assertEquals(aluno.media(), 6.475, &quot;Média das notas (9.9, 8.6, 7.4, 0)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (9.9, 8.6, 7.4, 0)&quot;);

aluno.carregaNotas(0, 7.5, 8.75, 9.75);
assertEquals(aluno.media(), 6.5, &quot;Média das notas (0, 7.5, 8.75, 9.75)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (0, 7.5, 8.75, 9.75)&quot;);

aluno.carregaNotas(6.2, 1.5, 2.6, 1.6);
assertEquals(aluno.media(), 2.975, &quot;Média das notas (6.2, 1.5, 2.6, 1.6)&quot;);
assertEquals(aluno.veredito(), &quot;reprovado&quot;, &quot;Veredito das notas (6.2, 1.5, 2.6, 1.6)&quot;);

aluno.carregaNotas(3.1, 2.7, 4.9, 5.3);
assertEquals(aluno.media(), 4.0, &quot;Média das notas (3.1, 2.7, 4.9, 5.3)&quot;);
assertEquals(aluno.veredito(), &quot;recuperação&quot;, &quot;Veredito das notas (3.1, 2.7, 4.9, 5.3)&quot;);

aluno.carregaNotas(3.25, 7.95, 6.5, 8.1);
assertEquals(aluno.media(), 6.45, &quot;Média das notas (3.25, 7.95, 6.5, 8.1)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (3.25, 7.95, 6.5, 8.1)&quot;);

aluno.carregaNotas(8.8, 6.9, 7.8, 9.1);
assertEquals(aluno.media(), 8.15, &quot;Média das notas (8.8, 6.9, 7.8, 9.1)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (8.8, 6.9, 7.8, 9.1)&quot;);

aluno.carregaNotas(1.8, 9.2, 6.8, 4.8);
assertEquals(aluno.media(), 5.65, &quot;Média das notas (1.8, 9.2, 6.8, 4.8)&quot;);
assertEquals(aluno.veredito(), &quot;aprovado&quot;, &quot;Veredito das notas (1.8, 9.2, 6.8, 4.8)&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(41, '(5.3 + 5.4) Construa a classe Inteiro que representa um número inteiro (através de um atributo). Inclua os seguintes métodos:<BR>
 - void carregaValor(int v) - altera o valor representado pelo objeto<BR>
 - int devolveValor() - devolve o valor representado pelo objeto<BR>
 - int devolveValorAbsoluto() - devolve o valor absoluto representado pelo objeto<BR>
 - int soma(int v) - soma o valor v ao valor deste objeto, substituindo o valor atual e devolvendo o novo valor.<BR>
 - int subtrai(int v) - subtrai v do valor deste objeto, substituindo o valor atual e devolvendo o novo valor.<BR>
 - int multiplicaPor(int v) - multiplica por v o valor deste objeto, substituindo o valor atual e devolvendo o novo valor.<BR>
 - int dividePor(int v) - se v for zero, não faz nada e devolve o inteiro representado pelo objeto; senão, divide por v o valor deste objeto (divisão inteira!), substituindo o valor atual e devolvendo o novo valor.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(41,' Inteiro inteiro = new Inteiro();
String str = &quot;Sequência de passos: &quot;;
str += &quot;carregaValor(-50);&quot;;
inteiro.carregaValor(-50);
str += &quot;devolveValor();&quot;;
assertEquals(inteiro.devolveValor(), -50, str);
str += &quot;devolveValorAbsoluto();&quot;;
assertEquals(inteiro.devolveValorAbsoluto(), 50, str);
str += &quot;soma(20);&quot;;
assertEquals(inteiro.soma(20), -30, str);
str += &quot;subtrai(-16);&quot;;
assertEquals(inteiro.subtrai(-16), -14, str);
str += &quot;multiplicaPor(-12);&quot;;
assertEquals(inteiro.multiplicaPor(-12), 168, str);
str += &quot;soma(170);&quot;;
assertEquals(inteiro.soma(170), 338, str);
str += &quot;dividePor(13);&quot;;
assertEquals(inteiro.dividePor(13), 26, str);
str += &quot;subtrai(360);&quot;;
assertEquals(inteiro.subtrai(360), -334, str);
str += &quot;devolveValor();&quot;;
assertEquals(inteiro.devolveValor(), -334, str);
str += &quot;devolveValorAbsoluto();&quot;;
assertEquals(inteiro.devolveValorAbsoluto(), 334, str);

str = &quot;Sequência de passos: &quot;;
str += &quot;carregaValor(37);&quot;;
inteiro.carregaValor(37);
str += &quot;devolveValor();&quot;;
assertEquals(inteiro.devolveValor(), 37, str);
str += &quot;devolveValorAbsoluto();&quot;;
assertEquals(inteiro.devolveValorAbsoluto(), 37, str);
str += &quot;soma(-37);&quot;;
assertEquals(inteiro.soma(-37), 0, str);
str += &quot;multiplicaPor(-1);&quot;;
assertEquals(inteiro.multiplicaPor(-1), 0, str);
str += &quot;soma(35);&quot;;
assertEquals(inteiro.soma(35), 35, str);
str += &quot;dividePor(0);&quot;;
assertEquals(inteiro.dividePor(0), 35, str);
str += &quot;dividePor(8);&quot;;
assertEquals(inteiro.dividePor(8), 4, str);
str += &quot;multiplicaPor(-7);&quot;;
assertEquals(inteiro.multiplicaPor(-7), -28, str);
str += &quot;multiplicaPor(-4);&quot;;
assertEquals(inteiro.multiplicaPor(-4), 112, str);
str += &quot;devolveValor();&quot;;
assertEquals(inteiro.devolveValor(), 112, str);
str += &quot;devolveValorAbsoluto();&quot;;
assertEquals(inteiro.devolveValorAbsoluto(), 112, str);



', 'java');
insert into Questao (id, enunciado, disciplina_id) values(42, '(6.2) Escreva uma classe Bhaskara que possui 3 atributos double correspondentes aos coeficientes reais de uma equação do segundo grau (ax² + bx + c = 0).  Escreva um método void inicializa(double a, double b, double c) para carregar valores nesses atributos, e os quatro métodos seguintes:<BR>
 - double delta() - calcula o discriminante (Delta) da fórmula de Bhaskara;<BR>
 - int numeroDeRaizesReais() - devolve o número de raízes reais distintas que a equação possui;<BR>
 - String imprimeRaizesReais() - devolve uma String com as raízes reais em ordem crescente e separadas por um espaço. Se houver apenas uma raiz real (distinta), adicione apenas um espaço ao final;<BR>
 - String imprimeRaizesImaginarias - devolve uma String com as raízes imaginárias em ordem crescente da parte imaginária e separadas por espaço. Você deve imprimir os números imaginários na forma &quot;a,b&quot; (sendo &#39;a&#39; a parte real e &#39;b&#39; a parte imaginária).  Caso não houver raízes imaginárias, devolva uma String vazia.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(42,' class TestaEquacao {

	double a, b, c, delta;
	double[] raizesReaisVerdadeiras, raizesImaginariasVerdadeiras;
	double[] raizesReais, raizesImaginarias;
	int numRaizesReais;

	void raizesReais(String entrada)
	{
		if (entrada.length() == 0) {
			raizesReais = new double[0];
			return;
		}

		String[] s = entrada.split(&quot; &quot;);
		raizesReais = null;

		if (s.length == 2) {
			double[] raizes = {Double.parseDouble(s[0]), Double.parseDouble(s[1])};
			if (raizes[0] > raizes[1]) {
				double tmp = raizes[1];
				raizes[1] = raizes[0];
				raizes[0] = tmp;
			}
			raizesReais = raizes;
		} else if (s.length == 1) {
			raizesReais = new double[1];
			raizesReais[0] = Double.parseDouble(entrada);
		}

	}

	void raizesImaginarias(String entrada)
	{
		if (entrada.length() == 0) {
			raizesImaginarias = new double[0];
			return;
		}

		String[] s = entrada.split(&quot; &quot;);
		raizesImaginarias = null;

		if (s.length == 2) {
			double[] raizes = new double[4];
			String[] r1, r2;
			r1 = s[0].split(&quot;,&quot;);
			r2 = s[1].split(&quot;,&quot;);

			if (r1.length != 2 || r2.length != 2)
				return;

			raizes[0] = Double.parseDouble(r1[0]);
			raizes[1] = Double.parseDouble(r1[1]);
			raizes[2] = Double.parseDouble(r2[0]);
			raizes[3] = Double.parseDouble(r2[1]);

			if (raizes[1] > raizes[3]) {
				double tmp = raizes[3];
				raizes[3] = raizes[1];
				raizes[1] = tmp;
			}

			raizesImaginarias = raizes;
		}
	}

	TestaEquacao novaEquacao(double a, double b, double c)
	{
		this.a = a;
		this.b = b;
		this.c = c;

		delta = b*b - 4*a*c;
		if (delta > 0) {
			numRaizesReais = 2;
			raizesReaisVerdadeiras = new double[2];
			raizesImaginariasVerdadeiras = new double[0];
			if (a > 0) {
				raizesReaisVerdadeiras[0] = (-b - Math.sqrt(delta)) / (2*a);
				raizesReaisVerdadeiras[1] = (-b + Math.sqrt(delta)) / (2*a);
			} else {
				raizesReaisVerdadeiras[0] = (-b + Math.sqrt(delta)) / (2*a);
				raizesReaisVerdadeiras[1] = (-b - Math.sqrt(delta)) / (2*a);
			}

		} else if (delta < 0) {
			numRaizesReais = 0;
			raizesReaisVerdadeiras = new double[0];
			raizesImaginariasVerdadeiras = new double[4];

			raizesImaginariasVerdadeiras[0] = raizesImaginariasVerdadeiras[2] = -b / (2*a);
			if (a > 0) raizesImaginariasVerdadeiras[1] = -Math.sqrt(-delta) / (2*a);
			else raizesImaginariasVerdadeiras[1] = Math.sqrt(-delta) / (2*a);
			raizesImaginariasVerdadeiras[3] = -raizesImaginariasVerdadeiras[1];

		} else {
			numRaizesReais = 1;
			raizesReaisVerdadeiras = new double[1];
			raizesImaginariasVerdadeiras = new double[0];
			raizesReaisVerdadeiras[0] = -b / (2*a);
		}

		return this;
	}

	void confereRaizes() throws Exception
	{
		String descr = &quot;equacao.inicializa(&quot; + a + &quot;, &quot; + b + &quot;, &quot; + c + &quot;)&quot;;

		if (numRaizesReais == 0) {
			assertEquals(raizesImaginarias[0], raizesImaginariasVerdadeiras[0],
					descr + &quot; - parte real&quot;);
			assertEquals(raizesImaginarias[2], raizesImaginariasVerdadeiras[2],
					descr + &quot; - parte real&quot;);
			assertEquals(raizesImaginarias[1], raizesImaginariasVerdadeiras[1],
					descr + &quot; - parte imaginária menor&quot;);
			assertEquals(raizesImaginarias[3], raizesImaginariasVerdadeiras[3],
					descr + &quot; - parte imaginária maior&quot;);
		} else if (numRaizesReais == 1) {
			assertEquals(raizesReais[0], raizesReaisVerdadeiras[0], descr + &quot; - raiz real única&quot;);
		} else if (numRaizesReais == 2) {
			assertEquals(raizesReais[0], raizesReaisVerdadeiras[0], descr + &quot; - raiz real menor&quot;);
			assertEquals(raizesReais[1], raizesReaisVerdadeiras[1], descr + &quot; - raiz real maior&quot;);
		}
	}

	void testa() throws Exception
	{
		Bhaskara equacao = new Bhaskara();
		equacao.inicializa(a, b, c);

		String descr = &quot;equacao.inicializa(&quot; + a + &quot;, &quot; + b + &quot;, &quot; + c + &quot;)&quot;;

		assertEquals(equacao.delta(), delta, descr + &quot;.delta()&quot;);
		assertEquals(equacao.numeroDeRaizesReais(), numRaizesReais, descr + &quot;.numeroDeRaizesReais()&quot;);

		raizesReais(equacao.imprimeRaizesReais().trim());
		raizesImaginarias(equacao.imprimeRaizesImaginarias().trim());

	}

}

TestaEquacao t = new TestaEquacao();
t.novaEquacao(1, 4, 4).testa();
t.novaEquacao(1, 0, -4).testa();
t.novaEquacao(1, 0, 4).testa();
t.novaEquacao(1, -5, 6).testa();
t.novaEquacao(1, 5, 6).testa();
t.novaEquacao(2, 10, 12).testa();
t.novaEquacao(-100, -600, -900).testa();
t.novaEquacao(-10, 20, 350).testa();
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(43, '(6.3) Crie uma classe Ponto com um método void inicializa(double x, double y) que carrega as coordenadas de um ponto no plano, e um método int quadrante() que devolve em qual quadrante o ponto está localizado.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(43,' class TestaPonto {
  Ponto novo(double x, double y) {
    Ponto p = new Ponto();
    p.inicializa(x, y);
    return p;
  }
}

TestaPonto testaPonto = new TestaPonto();
double xt, yt;
int quadrante;
for (int i = 0; i < 100; i++) {
  xt = Math.random() * 100.0 - 50.0;
  yt = Math.random() * 100.0 - 50.0;
  quadrante = (xt >= 0) &#63; ((yt >= 0) &#63; 1 : 4) : ((yt >= 0) &#63; 2 : 3);
  assertEquals(testaPonto.novo(xt, yt).quadrante(), quadrante, &quot;quadrante do ponto (&quot;+xt+&quot;,&quot;+yt+&quot;)&quot;);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(44, '(8.1) Crie uma classe Fatorial com um método int calculaFatorial(int x) que calcula o fatorial de x se este for um número inteiro não-negativo, ou -1 se x for negativo.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(44,' Fatorial f = new Fatorial();
assertEquals(f.calculaFatorial(-2), -1);
assertEquals(f.calculaFatorial(-1), -1);
assertEquals(f.calculaFatorial(0), 1);
assertEquals(f.calculaFatorial(1), 1);
assertEquals(f.calculaFatorial(2), 2);
assertEquals(f.calculaFatorial(3), 6);
assertEquals(f.calculaFatorial(4), 24);
assertEquals(f.calculaFatorial(5), 120);
assertEquals(f.calculaFatorial(6), 720);
assertEquals(f.calculaFatorial(7), 5040);
assertEquals(f.calculaFatorial(8), 40320);
assertEquals(f.calculaFatorial(9), 362880);
assertEquals(f.calculaFatorial(10), 3628800);
assertEquals(f.calculaFatorial(11), 39916800);
assertEquals(f.calculaFatorial(12), 479001600);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(45, '(8.4) Escreva uma classe Fibonacci, com um método int imprimeNumeroDeFibonacci(int n), que imprime o n-ésimo número da seqüência de Fibonacci, que é definida da seguinte forma:<BR>
F<sub>1</sub> = 1, F<sub>2</sub> = 1, F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub> (se n > 2)
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(45,' class Fi {
  int imprimeNumeroDeFibonacci (int n) {
	if (n == 1 || n == 2)
		return 1;
	return imprimeNumeroDeFibonacci (n - 1) + imprimeNumeroDeFibonacci (n - 2);
  }
}


Fibonacci f = new Fibonacci();
Fi fib = new Fi(); 

for (int i = 1; i < 20; i++) {
  assertEquals(f.imprimeNumeroDeFibonacci(i), fib.imprimeNumeroDeFibonacci(i), &quot;f.imprimeNumeroDeFibonacci(&quot;+i+&quot;)&quot;);
}', 'java');
insert into Questao (id, enunciado, disciplina_id) values(46, '(8.7) Escreva uma classe Euclides, com um método int mdc(int a1, int a2), que recebe dois inteiros estritamente positivos, com a1 >= a2, e devolve o máximo divisor comum entre eles, usando o algoritmo de Euclides.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(46,' Euclides euc = new Euclides();
assertEquals(euc.mdc(6, 2), 2);
assertEquals(euc.mdc(6, 3), 3);
assertEquals(euc.mdc(15, 12), 3);
assertEquals(euc.mdc(24, 12), 12);
assertEquals(euc.mdc(27, 18), 9);
assertEquals(euc.mdc(47, 13), 1);
assertEquals(euc.mdc(47, 46), 1);
assertEquals(euc.mdc(456, 57), 57);
assertEquals(euc.mdc(1029, 357), 21);
assertEquals(euc.mdc(4712, 1767), 589);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(47, '(9.1) Escreva uma classe Triangulo com um método void defineLados(double x1, double x2, double x3) que carrega os comprimentos dos lados de um triângulo, e um método boolean ehRetangulo() que verifica se os comprimentos dados correspondem aos lados de um triângulo retângulo.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(47,' class TestaTriangulo {
  Triangulo novo(double x1, double x2, double x3) {
    Triangulo t = new Triangulo();
    t.defineLados(x1, x2, x3);
    return t;
  }
}
TestaTriangulo t = new TestaTriangulo();
assertEquals(t.novo(3, 4, 5).ehRetangulo(), true);
assertEquals(t.novo(4, 5, 3).ehRetangulo(), true);
assertEquals(t.novo(5, 3, 4).ehRetangulo(), true);
assertEquals(t.novo(4, 5, 6).ehRetangulo(), false);
assertEquals(t.novo(5, 12, 13).ehRetangulo(), true);
assertEquals(t.novo(12, 5, 13).ehRetangulo(), true);
assertEquals(t.novo(13, 5, 12).ehRetangulo(), true);
assertEquals(t.novo(13, 6, 12).ehRetangulo(), false);
assertEquals(t.novo(9, 40, 41).ehRetangulo(), true);
assertEquals(t.novo(41, 9, 40).ehRetangulo(), true);
assertEquals(t.novo(41, 9, 42).ehRetangulo(), false);
assertEquals(t.novo(8, 15, 17).ehRetangulo(), true);
assertEquals(t.novo(15, 8, 17).ehRetangulo(), true);
assertEquals(t.novo(15, 8, 7).ehRetangulo(), false);
assertEquals(t.novo(11, 60, 61).ehRetangulo(), true);
assertEquals(t.novo(7, 24, 25).ehRetangulo(), true);
assertEquals(t.novo(8, 24, 25).ehRetangulo(), false);
assertEquals(t.novo(6, 8, 10).ehRetangulo(), true);
assertEquals(t.novo(15, 20, 25).ehRetangulo(), true);
assertEquals(t.novo(28, 96, 100).ehRetangulo(), true);
assertEquals(t.novo(119, 120, 169).ehRetangulo(), true);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(48, '(10.1+2+3) Crie a classe Matematica com os métodos double sen(double x), double cos(double x) e double ln(double x) que calculam aproximações para essas funções usando séries de Taylor (para a função logaritmo você pode usar a fórmula de Taylor para ln(1+x)). Para isso, você deverá também implementar os métodos double potencia(double x, int y), que calcula a potência x<sup>y</sup>, e double fatorial(double x), que calcula o fatorial de x. Use como critério de parada a própria precisão do computador, ou seja, pare de somar termos quando perceber que a soma não está mais se alterando.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(48,' Matematica m = new Matematica();
double x;
for (int i = 0; i < 10; i++) {
  x = Math.random();
  assertEquals(m.potencia(x, 0), 1, &quot;m.potencia(&quot;+x+&quot;, 0)&quot;);
  assertEquals(m.potencia(x, 1), x, &quot;m.potencia(&quot;+x+&quot;, 1)&quot;);
  assertEquals(m.potencia(x, 2), Math.pow(x, 2), &quot;m.potencia(&quot;+x+&quot;, 2)&quot;);
  assertEquals(m.potencia(x, 5), Math.pow(x, 5), &quot;m.potencia(&quot;+x+&quot;, 5)&quot;);
  assertEquals(m.potencia(x, 10), Math.pow(x, 10), &quot;m.potencia(&quot;+x+&quot;, 10)&quot;);
  assertEquals(m.sen(x), Math.sin(x), &quot;m.sen(&quot;+x+&quot;)&quot;);
  assertEquals(m.cos(x), Math.cos(x), &quot;m.cos(&quot;+x+&quot;)&quot;);
  assertEquals(m.ln(1+x), Math.log1p(x), &quot;m.ln(1+&quot;+x+&quot;)&quot;);
}

int fat = 1;
assertEquals(m.fatorial(0), 1);
for (int i = 1; i <= 8; i++) {
  fat *= i;
  assertEquals(m.fatorial(i), fat, &quot;m.fatorial(&quot;+i+&quot;)&quot;);
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(49, '(10.5) Imagine no plano um quadrado inicialmente paralelo ao eixo x. A projeção do quadrado sobre o eixo x tem então o mesmo comprimento que o lado do quadrado. Se o quadrado é rodado, o comprimento da projeção é alterado. Você deve fazer um programa que calcula o comprimento dessa projeção. Para isso, faça uma classe Projetor com um método void inicializa(double lado) que recebe o comprimento do lado do quadrado, um método void rotaciona(double graus), que gira o quadrado da quantidade especificada de graus (no sentido anti-horário), e um método double tamanhoProjecao(), que devolve o comprimento da projeção no ângulo em que o quadrado está. Note que as rotações são cumulativas.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(49,' Projetor p = new Projetor();
double t = 0.0;
double dt = 0.0;
p.inicializa(10);
String str = &quot;tamanhoProjeção após inicializa(10)&quot;;
assertEquals(p.tamanhoProjecao(), 10.0, str);
for (int i = 0; i < 30; i++) {
  dt = 1.0*Math.floor(Math.random() * 50.0);
  t += dt;
  p.rotaciona(dt);
  str = str + &quot;;rotaciona(&quot;+dt+&quot;)&quot;;
  assertEquals(p.tamanhoProjecao(), 10.0 * (Math.abs(Math.sin(t*Math.PI/180)) + Math.abs(Math.cos(t*Math.PI/180))), str);
}
p = new Projetor();
p.inicializa(49);
str = &quot;tamanhoProjeção após inicializa(49)&quot;;
assertEquals(p.tamanhoProjecao(), 49.0, str);
t = 0.0;
for (int i = 0; i < 30; i++) {
  dt = Math.random() * 50.0;
  t += dt;
  p.rotaciona(dt);
  str = str + &quot;;rotaciona(&quot;+dt+&quot;)&quot;;
  assertEquals(p.tamanhoProjecao(), 49.0 * (Math.abs(Math.sin(t*Math.PI/180)) + Math.abs(Math.cos(t*Math.PI/180))), str);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(50, 'Faça uma classe Calculo com o método a seguir, que a partir das características do vídeo, calcula seu tamanho em Mega Bytes. <BR>
int calculaTam (int largura, int altura, int bitsPorPixel, int fps, int qtdeCanais, int freqAmostragem, int bitsPorAmostra, int tempo)

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(50,' Calculo calculo = new Calculo();
assertEquals(calculo.calculaTam(800,600,16,10,2,10000,20,60), (800*600*16*10*60 + 2*10000*20*60)/8/1024/1024, &quot;Largura: 800, Altura: 600, Bits por pixel: 16, Quadros por segundo: 10, Canais de áudio: 2, Freqüência de amostragem: 10000 Hz, Bits por amostra: 20, Tempo: 60 s&quot;);
assertEquals(calculo.calculaTam(300,200,8,15,1,20000,96,160), (300*200*8*15*160 + 1*20000*96*160)/8/1024/1024, &quot;Largura: 300, Altura: 200, Bits por pixel: 8, Quadros por segundo: 15, Canais de áudio: 1, Freqüência de amostragem: 20000 Hz, Bits por amostra: 96, Tempo: 160 s&quot;);
assertEquals(calculo.calculaTam(300,200,8,15,2,20000,96,160), (300*200*8*15*160 + 2*20000*96*160)/8/1024/1024, &quot;Largura: 300, Altura: 200, Bits por pixel: 8, Quadros por segundo: 15, Canais de áudio: 2, Freqüência de amostragem: 20000 Hz, Bits por amostra: 96, Tempo: 160 s&quot;);
assertEquals(calculo.calculaTam(300,200,32,15,2,20000,96,160), (300*200*32*15*160 + 2*20000*96*160)/8/1024/1024, &quot;Largura: 300, Altura: 200, Bits por pixel: 32, Quadros por segundo: 15, Canais de áudio: 2, Freqüência de amostragem: 20000 Hz, Bits por amostra: 96, Tempo: 160 s&quot;);
assertEquals(calculo.calculaTam(300,200,32,15,5,20000,128,20), (300*200*32*15*20 + 5*20000*128*20)/8/1024/1024, &quot;Largura: 300, Altura: 200, Bits por pixel: 32, Quadros por segundo: 15, Canais de áudio: 5, Freqüência de amostragem: 20000 Hz, Bits por amostra: 128, Tempo: 20 s&quot;);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(51, 'Faça uma classe em Java de nome Jogo com os seguintes métodos:
<LI>void comeca() - sorteia um número inteiro de 1 a 100 (o zero não está incluso) e guarda em um atributo. 
<LI>String adivinha(int num) - compara o número passado como parâmetro com o número sorteado. Se for igual, retorne &quot;Você ganhou&quot;. Se for menor, &quot;Seu número é menor&quot; e se for maior &quot;Seu número é maior&quot;. Caso seja a quinta tentativa e o usuário não ganhou, retorne a mensagem &quot;Você perdeu! O número era xxx&quot;, onde xxx é o valor do número sorteado.
<LI>int numeroSorteado() - retorna o numero que foi sorteado<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(51,' Jogo jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 1&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 1)&quot;);
// Estora as tentativas
assertEquals(jogo.adivinha(jogo.numeroSorteado()-2), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 2)&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()+2), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 2)&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()-3), &quot;Você perdeu! O número era &quot; + jogo.numeroSorteado(), &quot;Após 5 tentativas era para informar \&quot;Você perdeu! O número era xxx\&quot;, onde xxx é o valor do número sorteado&quot;);

// -- Novamente ---
jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 1&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 1&quot;);
// Ganha
assertEquals(jogo.adivinha(jogo.numeroSorteado()), &quot;Você ganhou&quot;, &quot;Testa o número sorteado&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(52, 'Dada a classe Movimentacao:
<PRE>
class Movimentacao {
	double valor;
	int tipo; // 0 para retiradas e 1 para depósito
	void init (int v, int t) {
		valor = v; tipo = t;
	}
	double getValor() { 
		return valor;
	}
	int getTipo() {
		return tipo;
	}
}
</PRE>
Faça uma classe ContaCorrente, como as seguintes operações:
<LI>void aplicaJuros(double taxa) - caso o saldo esteja negativo, debita o valor do juros. A taxa é dada em porcentagem. Por exemplo, se o juros for de 1%, a taxa é 0.01
<LI>void movimenta(Movimentacao m) - recebe uma movimentação e atualiza o saldo
<LI>double getSaldo() - retorna o valor do saldo da conta<BR>
OBS: Para a sua resposta compilar no programa de teste, coloque também o código da classe dada como parte da resposta.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(52,' class Conta {
	ContaCorrente cc = new ContaCorrente();
	Conta movimenta (int x, int y) {
		Movimentacao mov = new Movimentacao();
		mov.init(x,y);
		cc.movimenta(mov);
		return this;
	}
	Conta aplicaJuros(double taxa) {
		cc.aplicaJuros(taxa);
		return this;
	}
	double getSaldo() {
		return cc.getSaldo();
	}
}
			
assertEquals((new Conta()).movimenta(200,0).getSaldo(),-200, &quot;Saque de 200 reais&quot;);
assertEquals((new Conta()).movimenta(200,0).movimenta(300,1).getSaldo(),100, &quot;Saque de 200 reais; Depósito de 300 reais&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.01).getSaldo(),-202, &quot;Saque de 200 reais; Aplicação de 1% de juros&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.1).getSaldo(),-220, &quot;Saque de 200 reais; Aplicação de 10% de juros&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.1).movimenta(200,1).getSaldo(),-20, &quot;Saque de 200 reais; Aplicação de 10% de juros; Depósito de 200 reais&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(53, 'Dada a classe Ponto abaixo (que representa um ponto no sistema cartesiano): 
<PRE>
class Ponto {
	double x, y;
	void init(double x, double y) {
		this.x = x;
		this.y = y;
	}
	double getX() {
		return x;
	}
	double getY() {
		return y;
	}
}
</PRE>
Faça a classe Retangulo, com as seguintes operações:
<LI>void init(Ponto a, Ponto b) - onde a é o ponto superior esquerdo e b é o ponto inferior direito
<LI>Ponto centro() - retorna o ponto correspondente ao centro do retângulo
<LI>double calculaArea() - retorna a área do retângulo<BR>
OBS: Para a sua resposta compilar no programa de teste, coloque também o código da classe dada como parte da resposta.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(53,' class Retang {
	Retangulo ret;
	Retang(double x1, double y1, double x2, double y2) {
		ret = new Retangulo();
		Ponto a = new Ponto();
		a.init(x1,y1);
		Ponto b = new Ponto();
		b.init(x2,y2);
		ret.init(a,b);
	}
	Ponto centro() {
		return ret.centro();
	}
	double calculaArea() {
		return ret.calculaArea();
	}
}

assertEquals((new Retang(0,2,2,0)).centro().getX(),1,   &quot;Coordenada X do centro do retângulo (0,2),(2,0)&quot;); 
assertEquals((new Retang(0,2,2,0)).centro().getY(),1,   &quot;Coordenada Y do centro do retângulo (0,2),(2,0)&quot;); 
assertEquals((new Retang(-1,2,1,-2)).centro().getX(),0, &quot;Coordenada X do centro do retângulo (-1,2),(1,-2)&quot;); 
assertEquals((new Retang(-1,2,1,-2)).centro().getY(),0, &quot;Coordenada Y do centro do retângulo (-1,2),(1,-2)&quot;); 
assertEquals((new Retang(1,3,2,2)).centro().getX(),1.5, &quot;Coordenada X do centro do retângulo (1,3),(2,2)&quot;); 
assertEquals((new Retang(1,3,2,2)).centro().getY(),2.5, &quot;Coordenada Y do centro do retângulo (1,3),(2,2)&quot;); 

assertEquals((new Retang(0,2,2,0)).calculaArea(),4,    &quot;Área do retângulo (0,2),(2,0)&quot;); 
assertEquals((new Retang(1,10,3,1)).calculaArea(),18,  &quot;Área do retângulo (1,10),(3,1)&quot;); 
assertEquals((new Retang(-1,10,3,1)).calculaArea(),36, &quot;Área do retângulo (-1,10),(3,1)&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(54, 'Faça uma classe em Java de nome Tabuada com os seguintes métodos:<BR>
- String comeca() &#63; sorteia dois números, x e y, entre 0 a 10 e retorna uma string com a pergunta &quot;Quanto é x * y&#63;&#39;&quot;. Por exemplo, se forem sorteados 3 e 5, deve retornar &quot;Quanto é 3 * 5&#63;&quot;<BR>
- int getX() &#63; retorna o valor de x<BR>
- int getY() &#63; retorna o valor de y<BR>
- String adivinha(int num) &#63; compara o número passado como parâmetro com a resposta. Se for igual, retorne &quot;Você acertou&quot;. Se for menor, &quot;Seu número é menor&quot; e se for maior &quot;Seu número é maior&quot;.<BR>', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(54,' Tabuada tabuada = new Tabuada();
boolean[] valoresX = new boolean[11];
boolean[] valoresY = new boolean[11];

for (int i = 0; i < 11; i++) valoresX[i] = false;
for (int i = 0; i < 11; i++) valoresY[i] = false;

for (int i = 0; i < 100; i++) {
	String pergunta = tabuada.comeca();
	assertEquals(tabuada.getX() >=0 && tabuada.getX() <= 10, true, &quot;O número sorteado (X) deve estar entre 0 e 10&quot;);
	assertEquals(tabuada.getY() >=0 && tabuada.getY() <= 10, true, &quot;O número sorteado (Y) deve estar entre 0 e 10&quot;);
	valoresX[tabuada.getX()] = true;
	valoresY[tabuada.getY()] = true;
	assertEquals(pergunta, &quot;Quanto é &quot;+tabuada.getX()+&quot; * &quot;+tabuada.getY()+&quot;&#63;&quot;, &quot;Pergunta no formato incorreto&quot;);
	assertEquals(tabuada.adivinha(tabuada.getX()*tabuada.getY()), &quot;Você acertou&quot;, pergunta + &quot; com adivinha &quot;+(tabuada.getX()*tabuada.getY()));
	assertEquals(tabuada.adivinha(tabuada.getX()*tabuada.getY()-1), &quot;Seu número é menor&quot;, pergunta + &quot; com adivinha &quot;+(tabuada.getX()*tabuada.getY()-1));
	assertEquals(tabuada.adivinha(tabuada.getX()*tabuada.getY()+1), &quot;Seu número é maior&quot;, pergunta + &quot; com adivinha &quot;+(tabuada.getX()*tabuada.getY()+1));
}

for (int i = 0; i <= 10; i++) {
	assertEquals(valoresX[i], true, &quot;O valor &quot;+i+&quot; nunca saiu para x.&quot;);
	assertEquals(valoresY[i], true, &quot;O valor &quot;+i+&quot; nunca saiu para y.&quot;);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(55, 'Dada a classe Pessoa:<BR>
<PRE>
class Pessoa {
	String nome;
	String sexo;
	double idade;
	boolean vegetariana;

	String getNome() {return nome;}
	void setNome(String nome) {this.nome = nome;}
	String getSexo() {return sexo;}
	void setSexo(String sexo) {this.sexo = sexo;}
	double getIdade() {return idade;}
	void setIdade(double idade) {this.idade = idade;}
	boolean isVegetariana() {return vegetariana;}
	void setVegetariana(boolean vegetariana) { this.vegetariana = vegetariana;}
}
</PRE>
Faça uma classe Churrasco, com as seguintes operações:<BR>
void defineConsumo(String sexo, double qtdeCarne) - define o consumo médio de pessoas do sexo &quot;masculino&quot; ou &quot;feminino&quot;.<BR>
void adiciona(Pessoa p) - adiciona uma pessoa e atualiza a quantidade carne a comprar. Este método deve ser chamado após definir o consumo de pessoas de ambos sexos. Para o cálculo, considere que pessoas de 0 a 3 anos não consomem carne. Pessoas vegetarianas também não. Pessoas de 4 a 12 anos consumem 50% do valor normal de consumo. Pessoas de 13 em diante, consumo normal.<BR>
double qtdeCarne() - retorna a quantidade de carne a ser consumida no churrasco.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(55,' class TestaChurrasco
{
	Churrasco c = new Churrasco();
	TestaChurrasco defineConsumo(String sexo, double qtdeCarne) {
		c.defineConsumo(sexo, qtdeCarne);
		return this;
	}
	TestaChurrasco adiciona(Pessoa p) {
		c.adiciona(p);
		return this;
	}
	double qtdeCarne() {
		return c.qtdeCarne();
	}
}

class CriaPessoa {
	Pessoa init(String nome, String sexo, double idade, boolean vegetariana) {
		Pessoa p = new Pessoa();
		p.setNome(nome);
		p.setSexo(sexo);
		p.setIdade(idade);
		p.setVegetariana(vegetariana);
		return p;
	}
}

CriaPessoa pessoa = new CriaPessoa();

assertEquals((new TestaChurrasco()).defineConsumo(&quot;masculino&quot;, 300).defineConsumo(&quot;feminino&quot;, 200).adiciona(pessoa.init(&quot;Jose&quot;,&quot;masculino&quot;,23,false)).qtdeCarne(),300,&quot;masculino = 300; feminino = 200; Pessoas: José, masculino, 23 anos&quot;);
assertEquals((new TestaChurrasco()).defineConsumo(&quot;masculino&quot;, 300).defineConsumo(&quot;feminino&quot;, 200).adiciona(pessoa.init(&quot;Jose&quot;,&quot;masculino&quot;,23,false)).adiciona(pessoa.init(&quot;Maria&quot;, &quot;feminino&quot;,13,false)).adiciona(pessoa.init(&quot;Pedro&quot;, &quot;masculino&quot;,15,false)).adiciona(pessoa.init(&quot;Rafael&quot;, &quot;masculino&quot;,50,false)).qtdeCarne(), 1100, &quot;masculino = 300; feminino = 200; Pessoas:<br>Jose, masculino, 23 anos;<br>Maria, feminino, 13 anos;<br>Pedro, masculino, 15 anos;<br>Rafael, masculino, 50 anos&quot;);
assertEquals((new TestaChurrasco()).defineConsumo(&quot;masculino&quot;, 300).defineConsumo(&quot;feminino&quot;, 200).adiciona(pessoa.init(&quot;Jose&quot;,&quot;masculino&quot;,23,false)).adiciona(pessoa.init(&quot;Maria&quot;, &quot;feminino&quot;,13,true)).adiciona(pessoa.init(&quot;Pedro&quot;, &quot;masculino&quot;,15,false)).adiciona(pessoa.init(&quot;Rafael&quot;, &quot;masculino&quot;,50,false)).qtdeCarne(),900,&quot;masculino = 300; feminino = 200; Pessoas:<br>Jose, masculino, 23 anos;<br>Maria, feminino, 13 anos, vegetariana;<br>Pedro, masculino, 15 anos;<br>Rafael, masculino, 50 anos&quot;);
assertEquals((new TestaChurrasco()).defineConsumo(&quot;masculino&quot;, 300).defineConsumo(&quot;feminino&quot;, 200).adiciona(pessoa.init(&quot;Jose&quot;,&quot;masculino&quot;,12,false)).adiciona(pessoa.init(&quot;Maria&quot;, &quot;feminino&quot;,10,false)).adiciona(pessoa.init(&quot;Pedro&quot;, &quot;masculino&quot;,15,false)).adiciona(pessoa.init(&quot;Rafael&quot;, &quot;masculino&quot;,50,false)).qtdeCarne(),850,&quot;masculino = 300; feminino = 200; Pessoas:<br>Jose, masculino, 12 anos;<br>Maria, feminino, 10 anos;<br>Pedro, masculino, 15 anos;<br>Rafael, masculino, 50 anos&quot;);
assertEquals((new TestaChurrasco()).defineConsumo(&quot;masculino&quot;, 300).defineConsumo(&quot;feminino&quot;, 200).adiciona(pessoa.init(&quot;Jose&quot;, &quot;masculino&quot;,2,false)).adiciona(pessoa.init(&quot;Maria&quot;, &quot;feminino&quot;,10,true)).adiciona(pessoa.init(&quot;Pedro&quot;, &quot;masculino&quot;,1,false)).adiciona(pessoa.init(&quot;Rafael&quot;, &quot;masculino&quot;,50,true)).qtdeCarne(),0,&quot;masculino = 300; feminino = 200; Pessoas:<br>Jose, masculino, 12 anos;<br>Maria, feminino, 10 anos, vegetariana;<br>Pedro, masculino, 15 anos;<br>Rafael, masculino, 50 anos, vegetariano&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(56, 'Fazer um jogo da forca. Faça uma classe Forca com os métodos:<BR>
- void comeca(String palavra) - começa o jogo com a palavra fornecida como parâmetro<BR>
- void configuraNumeroMaximoDeErros(int n) - define quantos erros o usuário pode ter antes de acertar a palavra<BR>
- String fazTentativa(char letra) - recebe uma letra como parâmetro. Caso a letra não pertença à palavra e esgotou a quantidade de erros máxima, retorne &quot;Você perdeu. A palavra era xxxx.&quot;, onde xxxx é a palavra secreta. Caso ainda tenha chances, retorne &quot;Letra não faz parte, tente novamente.&quot;. Caso tenho acertado todas as letras, retorne &quot;Você ganhou&quot;. Caso ainda faltem letras a serem adivinhadas, retorne a palavra substituindo as letras não adivinhadas por *. Por exemplo:<BR>
Forca forca = new Forca();<BR>
forca.comeca(&quot;Macaco&quot;);<BR>
forca.configuraNumeroMaximoDeErros(2);<BR>
forca.fazTentativa(&#39;a&#39;); // retorna &quot;*a*a**&quot;<BR>
forca.fazTentativa(&#39;e&#39;); // retorna &quot;Letra não faz parte, tente novamente.&quot;<BR>
forca.fazTentativa(&#39;c&#39;); // retorna &quot;*acac*&quot;<BR>
forca.fazTentativa(&#39;d&#39;); // retorna &quot;Letra não faz parte, tente novamente.&quot;<BR>
forca.fazTentativa(&#39;i&#39;); // retorna &quot;Você perdeu. A palavra era macaco.&quot;<BR>
<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(56,' Forca forca = new Forca();
String str = &quot;sequência &quot;;
str += &quot;comeca(\&quot;macaco\&quot;)&quot;;
forca.comeca(&quot;macaco&quot;);

str += &quot;;configuraNumeroMaximoDeErros(2)&quot;;
forca.configuraNumeroMaximoDeErros(2);

str += &quot;;fazTentativa(&#39;a&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;a&#39;), &quot;*a*a**&quot;, str); 
str += &quot;;fazTentativa(&#39;e&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;e&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;c&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;c&#39;), &quot;*acac*&quot;, str); 
str += &quot;;fazTentativa(&#39;d&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;d&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;i&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;i&#39;), &quot;Você perdeu. A palavra era macaco.&quot;, str); 

forca = new Forca();
str = &quot;sequência &quot;;
str += &quot;comeca(\&quot;paralelo\&quot;)&quot;;
forca.comeca(&quot;paralelo&quot;);

str += &quot;;configuraNumeroMaximoDeErros(3)&quot;;
forca.configuraNumeroMaximoDeErros(3);

str += &quot;;fazTentativa(&#39;x&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;x&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;l&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;l&#39;), &quot;****l*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;d&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;d&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;r&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;r&#39;), &quot;**r*l*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;a&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;a&#39;), &quot;*aral*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;e&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;e&#39;), &quot;*aralel*&quot;, str); 
str += &quot;;fazTentativa(&#39;o&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;o&#39;), &quot;*aralelo&quot;, str); 
str += &quot;;fazTentativa(&#39;p&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;p&#39;), &quot;Você ganhou&quot;, str); 

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(57, 'Faça uma classe Estatistica com os seguintes métodos:<BR>
- void carregaValor(double n) - armazena um valor<BR>
- double media() - retorna a media aritmética dos valores armazenados<BR>
- double max() - retorna o maior valor entre os armazenados<BR>
- double min() - retorna o menor valor entre os armazenados<BR>
- double amplitude() - retorna a distância entre o menor e o maior valor<BR>
- double mediaGeometrica() - retorna a média geométrica (raiz do produtório dos itens)<BR>
- double mediaHarmonica() - retorna a média harmônica dos valores (inverso da média aritmética dos inversos dos valores)<BR>
- double desvioMedio() - retorna o desvio médio dos valores<BR>
- double desvioPadrao() - retorna o desvio padrão dos valores', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(57,' // Testa
Estatistica e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(3);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.media(), 6.833333333, &quot;media() para (10,5,3,1,10,12)&quot;);
assertEquals(e.max(), 12, &quot;max() para (10,5,3,1,10,12)&quot;);
assertEquals(e.min(), 1, &quot;min() para (10,5,3,1,10,12)&quot;);
assertEquals(e.amplitude(), 11, &quot;amplitude() para (10,5,3,1,10,12)&quot;);
assertEquals(e.mediaGeometrica(), 5.119317722, &quot;mediaGeometrica() para (10,5,3,1,10,12)&quot;);
assertEquals(e.mediaHarmonica(), 3.302752294, &quot;mediaHarmonica() para (10,5,3,1,10,12)&quot;);
assertEquals(e.desvioMedio(), 3.833333333, &quot;desvioMedio() para (10,5,3,1,10,12)&quot;);
assertEquals(e.desvioPadrao(), 4.44597196, &quot;desvioPadrao() para (10,5,3,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.media(), 10.83333333, &quot;media() para (14,14,14,1,10,12)&quot;);
assertEquals(e.max(), 14, &quot;max() para (14,14,14,1,10,12)&quot;);
assertEquals(e.min(), 1, &quot;min() para (14,14,14,1,10,12)&quot;);
assertEquals(e.amplitude(), 13, &quot;amplitude() para (14,14,14,1,10,12)&quot;);
assertEquals(e.mediaGeometrica(), 8.30986992, &quot;mediaGeometrica() para (14,14,14,1,10,12)&quot;);
assertEquals(e.mediaHarmonica(), 4.293015332, &quot;mediaHarmonica() para (14,14,14,1,10,12)&quot;);
assertEquals(e.desvioMedio(), 3.555555556, &quot;desvioMedio() para (14,14,14,1,10,12)&quot;);
assertEquals(e.desvioPadrao(), 5.076087732, &quot;desvioPadrao() para (14,14,14,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
assertEquals(e.media(), 14, &quot;media() para (14,14,14)&quot;);
assertEquals(e.max(), 14, &quot;max() para (14,14,14)&quot;);
assertEquals(e.min(), 14, &quot;min() para (14,14,14)&quot;);
assertEquals(e.amplitude(), 0, &quot;amplitude() para (14,14,14)&quot;);
assertEquals(e.mediaGeometrica(), 14, &quot;mediaGeometrica() para (14,14,14)&quot;);
assertEquals(e.mediaHarmonica(), 14, &quot;mediaHarmonica() para (14,14,14)&quot;);
assertEquals(e.desvioMedio(), 0, &quot;desvioMedio() para (14,14,14)&quot;);
assertEquals(e.desvioPadrao(), 0, &quot;desvioPadrao() para (14,14,14)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(50);
assertEquals(e.media(), 23, &quot;media() para (14,14,14,50)&quot;);
assertEquals(e.max(), 50, &quot;max() para (14,14,14,50)&quot;);
assertEquals(e.min(), 14, &quot;min() para (14,14,14,50)&quot;);
assertEquals(e.amplitude(), 36, &quot;amplitude() para (14,14,14,50)&quot;);
assertEquals(e.mediaGeometrica(), 19.24591342, &quot;mediaGeometrica() para (14,14,14,50)&quot;);
assertEquals(e.mediaHarmonica(), 17.07317073, &quot;mediaHarmonica() para (14,14,14,50)&quot;);
assertEquals(e.desvioMedio(), 13.5, &quot;desvioMedio() para (14,14,14,50)&quot;);
assertEquals(e.desvioPadrao(), 18, &quot;desvioPadrao() para (14,14,14,50)&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(58, 'Acrescente na classe Estatistica os métodos abaixo.<BR>
- double moda() - retorna a moda (o valor que mais apareceu). Se dois ou mais números apareceram a mesma quantidade de vezes, informe o menor deles.<BR>
- double valoresDistintos() - retorna quantos valores diferentes foram armazenados<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(58,' Estatistica e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(3);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.moda(), 10, &quot;moda() para (10,5,3,1,10,12)&quot;);
assertEquals(e.valoresDistintos(), 5, &quot;valoresDistintos() para (10,5,3,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.moda(), 10, &quot;moda() para (10,5,10,1,10,12)&quot;);
assertEquals(e.valoresDistintos(), 4, &quot;valoresDistintos() para (10,5,10,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(5);
assertEquals(e.moda(), 5, &quot;moda() para (10,5,10,5,10,5)&quot;);
assertEquals(e.valoresDistintos(), 2, &quot;valoresDistintos() para (10,5,10,5,10,5)&quot;);

e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
assertEquals(e.moda(), 10, &quot;moda() para (10,5,10,5,10,5,10)&quot;);
assertEquals(e.valoresDistintos(), 2, &quot;valoresDistintos() para (10,5,10,5,10,5,10)&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(59, 'Faça uma classe Desenho com um método String quadrado(int n, char c) que retorne uma string contendo n linhas com n caracteres c. Por exemplo,<BR>
desenho.quadrado(4, &#39;*&#39;); retorna uma String contendo:<BR>
****<BR>
****<BR>
****<BR>
****<BR>
OBS: Para saltar linha dentro de uma String, basta concatenar com &quot;\n&quot;. Por exemplo, &quot;Teste 1&quot;+&quot;\n&quot;+&quot;Teste 2&quot; vai ser uma String desta forma:<BR>
Teste 1<BR>
Teste 2<BR>', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(59,' Desenho d = new Desenho();
assertEquals(d.quadrado(4, &#39;*&#39;), &quot;****\n****\n****\n****\n&quot;);
assertEquals(d.quadrado(2, &#39;*&#39;), &quot;**\n**\n&quot;);
assertEquals(d.quadrado(5, &#39;*&#39;), &quot;*****\n*****\n*****\n*****\n*****\n&quot;);
assertEquals(d.quadrado(2, &#39;$&#39;), &quot;$$\n$$\n&quot;);
assertEquals(d.quadrado(3, &#39;1&#39;), &quot;111\n111\n111\n&quot;);
assertEquals(d.quadrado(0, &#39;%&#39;), &quot;&quot;);


', 'java');
insert into Questao (id, enunciado, disciplina_id) values(60, 'Escreva a classe Palavra com os seguintes métodos:<BR>
- int contaVogais(String palavra) - retorna a quantidade de vogais da palavra<BR>
- String inverte(String palavra) - retorna a palavra digitada de trás para frente
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(60,' Palavra palavra = new Palavra();
assertEquals(palavra.contaVogais(&quot;macaco&quot;), 3);
assertEquals(palavra.contaVogais(&quot;chove&quot;), 2);
assertEquals(palavra.contaVogais(&quot;remar&quot;), 2);
assertEquals(palavra.contaVogais(&quot;rosbife&quot;), 3);
assertEquals(palavra.inverte(&quot;remar&quot;), &quot;ramer&quot;);
assertEquals(palavra.inverte(&quot;jose&quot;), &quot;esoj&quot;);
assertEquals(palavra.inverte(&quot;ovo&quot;), &quot;ovo&quot;);
assertEquals(palavra.inverte(&quot;pedro&quot;), &quot;ordep&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(61, 'Faça um programa Verificacao com o método boolean verificaCPF(String cpf) que recebe um CPF e diz se ele é válido. A string passada como parâmetro segue o seguinte formato xxx.xxx.xxx-xx onde x são os algarismos do CPF.<BR>
Para validar um número de CPF é preciso fazer uma série de operações matemáticas com os algarismos que compõe o número e comparar com os dígitos verificadores (aqueles que vêm após o traço). Para exemplificar o processo, tomemos o CPF 123.456.789-09. Para fazer a verificação pegamos cada algarismo do número principal e os colocamos numa tabela:<BR>
1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9<BR>
Depois pegamos o primeiro elemento da tabela e multiplicamos por 10, o segundo por 9, o terceiro por 8 e assim por diante, até multiplicar o nono elemento por 2. No nosso exemplo dá:<BR>
10 || 18 || 24 || 28 || 30 || 30 || 28 || 24 || 18<BR>
O próximo passo é somar todas as respostas: 10+18+24+28+30+30+24+18=210<BR>
Em seguida, pega-se o resultado da soma e divide-se por 11, pegando o resto da divisão. No caso, 1. Depois pega-se 11 e subtrai deste número. No exemplo, dá 10. Se o resultado desta subtração for 10 ou 11, o primeiro dígito verificador é 0, caso contrário é o resultado. No exemplo, o dígito é zero. Agora temos que calcular o segundo dígito verificador. Fazemos uma nova tabela, agora incluindo o primeiro digito verificador encontrado:<BR>
1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 0<BR>
Em seguida, multiplicamos a primeira coluna por 11, a segunda por 10, a terceira por 9, e assim por diante, até a décima coluna por 2. No nosso exemplo daria: <BR>
11 || 20 || 27 || 32 || 35 || 36 || 35 || 32 || 27 || 0<BR>
Depois soma-se todos os valores: 11+20+27+32+35+36+35+32+27+0=255. Divide-se esta soma por 11 e pega-se o resto. Neste caso, o resto dá 2. Novamente, subtrai-se 11 deste valor e pega-se o resultado, neste caso 9. Se o resultado for 10 ou 11, o dígito é 0, caso contrário é o próprio resultado, ou seja, 9. Então os dígitos verificadores são 0 e 9, que coincidem com os fornecidos. Então o CPF é válido. O CPF é inválido se os dígitos calculados forem diferentes dos fornecidos. Outros exemplos de CPFs válidos que você pode usar para testar seu programa são 111.222.333-96 e 234.123.678-26, além do seu próprio CPF. Invente uns inválidos para ver se o programa acusa.<BR>
<BR>
<BR>

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(61,' Verificacao verificacao = new Verificacao();
assertEquals(verificacao.verificaCPF(&quot;123.456.789-09&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;111.222.333-96&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;234.123.678-26&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;705.939.732-91&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;755.974.032-49&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;553.482.700-91&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;358.494.873-87&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;282.209.271-00&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;600.317.263-05&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;657.442.920-04&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;811.755.404-63&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;554.908.671-91&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;057.923.187-94&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;089.619.107-95&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;719.266.582-72&quot;), true);

assertEquals(verificacao.verificaCPF(&quot;600.317.263-15&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;657.442.920-02&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;811.755.404-33&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;554.908.671-94&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;057.923.187-44&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;089.619.107-55&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;719.266.582-82&quot;), false);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(62, 'a) Ponto pontoMedio(Ponto p) - retorna o ponto médio entre o ponto e o ponto p passado como parâmetro', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(62,' // Teste
class TestaPonto {
   Ponto novo (double x, double y) {
      Ponto n = new Ponto();
      n.init(x,y);
      return n;
   }
}
TestaPonto tp = new TestaPonto();


assertEquals((tp.novo(0,0)).pontoMedio(tp.novo(4,4)).getX(), 2);
assertEquals((tp.novo(0,0)).pontoMedio(tp.novo(4,4)).getY(), 2);

assertEquals((tp.novo(-1,-3)).pontoMedio(tp.novo(1,3)).getX(), 0);
assertEquals((tp.novo(-1,-3)).pontoMedio(tp.novo(1,3)).getY(), 0);

assertEquals((tp.novo(4,7)).pontoMedio(tp.novo(4,3)).getX(), 4);
assertEquals((tp.novo(4,7)).pontoMedio(tp.novo(4,3)).getY(), 5);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(63, 'b) int quadrante() - retorna em qual quadrante o ponto se localiza', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(63,' // Teste
class TestaPonto {
   Ponto novo (double x, double y) {
      Ponto n = new Ponto();
      n.init(x,y);
      return n;
   }
}
TestaPonto tp = new TestaPonto();



assertEquals((tp.novo(-2,3)).quadrante(), 2);
assertEquals((tp.novo(2,3)).quadrante(), 1);
assertEquals((tp.novo(-2,3)).quadrante(), 2);
assertEquals((tp.novo(-2,-3)).quadrante(), 3);
assertEquals((tp.novo(2,-3)).quadrante(), 4);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(64, 'c) boolean ehProximo(Ponto p, double limiar) - retorna true caso a distância entre o ponto e o ponto p passado como parâmetro for menor do que o limiar especificado', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(64,' // Teste
class TestaPonto {
   Ponto novo (double x, double y) {
      Ponto n = new Ponto();
      n.init(x,y);
      return n;
   }
}
TestaPonto tp = new TestaPonto();
assertEquals(tp.novo(3,3).ehProximo(tp.novo(4,1), 3), true);
assertEquals(tp.novo(3,3).ehProximo(tp.novo(4,1), 2), false);
assertEquals(tp.novo(-3,-3).ehProximo(tp.novo(-4,-1), 3), true);
assertEquals(tp.novo(-3,-3).ehProximo(tp.novo(-4,-1), 2), false);
assertEquals(tp.novo(0,0).ehProximo(tp.novo(0,1), 1), false);
assertEquals(tp.novo(0,0).ehProximo(tp.novo(0,0.9999), 1), true);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(65, 'Para a classe MetodosDeArray faça o método int[] primos() - retorna um array contendo os 30 primeiros números primos.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(65,' class FazTeste {
	String leArray(int[] a) {
		String s = &quot;{&quot;;
		for (int i = 0; i < a.length; i++) {
			s = s + i + &quot;,&quot;;
		}
		s = s + &quot;}&quot;;
		return s;
	}
}
FazTeste teste = new FazTeste();

MetodosDeArray metodoDeArray = new MetodosDeArray();

int[] a = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113};
assertEquals(teste.leArray(metodoDeArray.primos()), teste.leArray(a), &quot;para primos()&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(66, 'Para a classe MetodosDeArray faça o método int[] soma(int[] a, int[] b) - retorna um array onde cada elemento é a soma dos elementos correspondentes nos arrays a e b.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(66,' class FazTeste {
	String leArray(int[] a) {
		String s = &quot;{&quot;;
		for (int i = 0; i < a.length; i++) {
			s = s + i + &quot;,&quot;;
		}
		s = s + &quot;}&quot;;
		return s;
	}
}
FazTeste teste = new FazTeste();

MetodosDeArray metodoDeArray = new MetodosDeArray();

int[]  a1 = {2,4,5,6,7,8};
int[]  b1 = {2,4,5,2,1,4};
int[]  c1 = {4,8,10,8,8,12};
assertEquals(teste.leArray(metodoDeArray.soma(a1,b1)), teste.leArray(c1), &quot;{2,4,5,6,7,8} + {2,4,5,2,1,4}&quot;);

int[]  a2 = {2};
int[]  b2 = {3};
int[]  c2 = {5};
assertEquals(teste.leArray(metodoDeArray.soma(a2,b2)), teste.leArray(c2), &quot;{2} + {3}&quot;);

int[]  a3 = {0,1};
int[]  b3 = {0,1};
int[]  c3 = {0,2};
assertEquals(teste.leArray(metodoDeArray.soma(a3,b3)), teste.leArray(c3), &quot;{0,1} + {0,1}&quot;);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(67, 'Para a classe MetodosDeArray faça o método int menor(int[] a) - retorna o menor valor contido no array a.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(67,' MetodosDeArray metodoDeArray = new MetodosDeArray();

int[] a = {2,4,5,6,7,8};
assertEquals(metodoDeArray.menor(a), 2, &quot;{2,4,5,6,7,8}&quot;);

int[] b = {2,4,5,1,7,8};
assertEquals(metodoDeArray.menor(b), 1, &quot;{2,4,5,1,7,8}&quot;);

int[] c = {2,4,5,1,7,-8};
assertEquals(metodoDeArray.menor(c), -8, &quot;{2,4,5,1,7,-8}&quot;);

int[] d = {2,4,5,1,7,-80};
assertEquals(metodoDeArray.menor(d), -80, &quot;{2,4,5,1,7,-80}&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(68, 'Para a classe MetodosDeArray faça o método boolean temInterseção (int[] a, int[] b) - retorna true caso algum elemento do array a também faça parte do array b. ', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(68,' MetodosDeArray metodoDeArray = new MetodosDeArray();

int[] a = {2,4,5,6,7,8};
int[] b = {3,9};
assertEquals(metodoDeArray.temInterseção(a,b), false, &quot;{2,4,5,6,7,8}, {3,9}&quot;);

int[] c = {2,4,5,6,7,8};
int[] d = {3,9,9,9,9,9,9,9,9,9,9,9,9,9};
assertEquals(metodoDeArray.temInterseção(c,d), false, &quot;{2,4,5,6,7,8}, {3,9,9,9,9,9,9,9,9,9,9,9,9,9}&quot;);

int[] e = {2,4,5,6,7,8};
int[] f = {3,9,9,9,9,9,9,9,9,9,9,9,9,9,2};
assertEquals(metodoDeArray.temInterseção(e,f), true, &quot;{2,4,5,6,7,8}, {3,9,9,9,9,9,9,9,9,9,9,9,9,9,2}&quot;);

int[] g = {2,4,5,6,7,8};
int[] h = {3,9,4,9,9,9,9,9,9,9,9,9,9,9};
assertEquals(metodoDeArray.temInterseção(g,h), true, &quot;{2,4,5,6,7,8}, {3,9,4,9,9,9,9,9,9,9,9,9,9,9}&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(69, 'Considere um bilhete de loteria instantânea (raspadinha), que contenha seis valores. Se três desses valores forem iguais, o jogador receberá o valor que apareceu repetido, caso contrário receberá zero. Há no máximo um único prêmio por bilhete.  Escreva uma classe Raspadinha em Java que simule os valores da raspadinha com um array de inteiros, e calcule o prêmio para o vencedor. Por exemplo, se o array for (1,5,10,500,5,5), o vencedor deverá receber cinco reais, e se o array for (10,5,10,100,1,5) o vencedor não deverá receber nada. Faça a classe Raspadinha com o método determinaPremio (int[] valores)', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(69,' Raspadinha raspadinha = new Raspadinha();
int[] a = {1,5,10,500,5,5};
assertEquals(raspadinha.determinaPremio(a), 5, &quot;{1,5,10,500,5,5}&quot;);

int[] b = {10,5,10,100,1,5};
raspadinha = new Raspadinha();
assertEquals(raspadinha.determinaPremio(b), 0, &quot;{10,5,10,100,1,5}&quot;);

int[] c = {100,5,10,100,100,5};
raspadinha = new Raspadinha();
assertEquals(raspadinha.determinaPremio(c), 100, &quot;{100,5,10,100,100,5}&quot;);

int[] d = {10,5000,10,5000,100,5000};
raspadinha = new Raspadinha();
assertEquals(raspadinha.determinaPremio(d), 5000, &quot;{10,5000,10,5000,100,5000}&quot;);

int[] e = {10,500,10,5000,100,5000};
raspadinha = new Raspadinha();
assertEquals(raspadinha.determinaPremio(e), 0, &quot;{10,500,10,5000,100,5000}&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(70, 'receba uma lista de pontos e retorne um Retangulo que contenha todos os pontos (os pontos devem estar contidos na área definida pelo retângulo):<BR>
Retangulo retanguloEnvolvente(Ponto[] lista) 
 ', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(70,' // Teste
class TestaPonto {
   Ponto novo (double x, double y) {
      Ponto n = new Ponto();
      n.init(x,y);
      return n;
   }
}
TestaPonto tp = new TestaPonto();



Programa programa = new Programa();

Ponto[] a = {(tp.novo(0,0)),(tp.novo(1,1))};
assertEquals(programa.retanguloEnvolvente(a).p1.getX(), 0, &quot;X do canto superior esquerdo (p1) para o retângulo envolvente de {(tp.novo(0,0)),(tp.novo(1,1))}&quot;);
assertEquals(programa.retanguloEnvolvente(a).p1.getY(), 1, &quot;Y do canto superior esquerdo (p1) para o retângulo envolvente de {(tp.novo(0,0)),(tp.novo(1,1))}&quot;);
assertEquals(programa.retanguloEnvolvente(a).p2.getX(), 1, &quot;X do canto inferior direito (p2) para o retângulo envolvente de  {(tp.novo(0,0)),(tp.novo(1,1))}&quot;);
assertEquals(programa.retanguloEnvolvente(a).p2.getY(), 0, &quot;Y do canto inferior direito (p2) para o retângulo envolvente de  {(tp.novo(0,0)),(tp.novo(1,1))}&quot;);

Ponto[] b = {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(-1,-2))};
assertEquals(programa.retanguloEnvolvente(b).p1.getX(), -1, &quot;X do canto superior esquerdo (p1) para o retângulo envolvente de  {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(b).p1.getY(), 1, &quot;Y do canto superior esquerdo (p1) para o retângulo envolvente de  {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(b).p2.getX(), 1, &quot;X do canto inferior direito (p2) para o retângulo envolvente de {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(b).p2.getY(), -2, &quot;Y do canto inferior direito (p2) para o retângulo envolvente de  para {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);

Ponto[] c = {(tp.novo(0,5)),(tp.novo(1,1)),(tp.novo(-1,-2))};
assertEquals(programa.retanguloEnvolvente(c).p1.getX(), -1, &quot;X do canto superior esquerdo (p1) para o retângulo envolvente de  {(tp.novo(0,5)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(c).p1.getY(), 5, &quot;Y do canto superior esquerdo (p1) para o retângulo envolvente de  {(tp.novo(0,5)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(c).p2.getX(), 1, &quot;X do canto inferior direito (p2) para o retângulo envolvente de {(tp.novo(0,5)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(c).p2.getY(), -2, &quot;Y do canto inferior direito (p2) para o retângulo envolvente de  {(tp.novo(0,5)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);

Ponto[] d = {(tp.novo(0,5000)),(tp.novo(1,1)),(tp.novo(-1,-2))};
assertEquals(programa.retanguloEnvolvente(d).p1.getX(), -1, &quot;X do canto superior esquerdo (p1) para o retângulo envolvente de  {(tp.novo(0,5000)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(d).p1.getY(), 5000, &quot;Y do canto superior esquerdo (p1) para o retângulo envolvente de  {(tp.novo(0,5000)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(d).p2.getX(), 1, &quot;X do canto inferior direito (p2) para o retângulo envolvente de {(tp.novo(0,5000)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.retanguloEnvolvente(d).p2.getY(), -2, &quot;Y do canto inferior direito (p2) para o retângulo envolvente de  {(tp.novo(0,5000)),(tp.novo(1,1)),(tp.novo(-1,-2))}&quot;);


', 'java');
insert into Questao (id, enunciado, disciplina_id) values(71, 'receba uma lista de pontos e retorne a menor distância entre dois pontos quaisquer da lista:<BR>
double menorDistancia(Ponto[] lista)
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(71,' // Teste
class TestaPonto {
   Ponto novo (double x, double y) {
      Ponto n = new Ponto();
      n.init(x,y);
      return n;
   }
}
TestaPonto tp = new TestaPonto();



Programa programa = new Programa();

Ponto[] a = {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(2,3))};
assertEquals(programa.menorDistancia(a), Math.sqrt(2), &quot;{(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(2,3))}&quot;);

Ponto[] b = {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,34))};
assertEquals(programa.menorDistancia(b), 1, &quot;{(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,34))}&quot;);

Ponto[] c = {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,39)),(tp.novo(10,12))};
assertEquals(programa.menorDistancia(c), 0, &quot;{(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,39)),(tp.novo(10,12))}&quot;);

Ponto[] d = {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,39)),(tp.novo(11,14))};
assertEquals(programa.menorDistancia(d), Math.sqrt(5), &quot;{(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,39)),(tp.novo(11,14))}&quot;);


', 'java');
insert into Questao (id, enunciado, disciplina_id) values(72, 'receba uma lista de pontos e retorne o ponto mais próximo da origem:<BR>
Ponto maisProxOrigem(Ponto[] lista)
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(72,' // Teste
class TestaPonto {
   Ponto novo (double x, double y) {
      Ponto n = new Ponto();
      n.init(x,y);
      return n;
   }
}
TestaPonto tp = new TestaPonto();



Programa programa = new Programa();

Ponto[] a = {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(2,3))};
assertEquals(programa.maisProxOrigem(a).getX(), 0, &quot;getX() para {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(2,3))}&quot;);
assertEquals(programa.maisProxOrigem(a).getY(), 0 ,&quot;getY() para {(tp.novo(0,0)),(tp.novo(1,1)),(tp.novo(2,3))}&quot;);

Ponto[] b = {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,34))};
assertEquals(programa.maisProxOrigem(b).getX(), 10, &quot;getX() para {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,34))}&quot;);
assertEquals(programa.maisProxOrigem(b).getY(), 12, &quot;getY() para {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,34))}&quot;);

Ponto[] c = {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,39)),(tp.novo(-1,-2))};
assertEquals(programa.maisProxOrigem(c).getX(), -1, &quot;getX() para {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,39)),(tp.novo(-1,-2))}&quot;);
assertEquals(programa.maisProxOrigem(c).getY(), -2, &quot;getY() para {(tp.novo(10,12)),(tp.novo(33,33)),(tp.novo(33,39)),(tp.novo(-1,-2))}&quot;);


', 'java');
insert into Questao (id, enunciado, disciplina_id) values(73, '(11.2) Escreva uma classe <code>ContaLetras</code> contendo um método <code>int contaA(String frase)</code> que devolve o número de ocorrências da vogal <var>a</var> na frase dada. (Não é necessário considerar as letras acentuadas.)

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(73,' // Código:

ContaLetras c = new ContaLetras();
assertEquals(c.contaA(&quot;&quot;), 0, &quot;<string vazia>&quot;);

class Conta
{
   int meuContaA(String frase)
   {
      int cont = 0, i;
      for (i = 0; i < frase.length(); i++)      
         if (frase.charAt(i) == &#39;a&#39; || frase.charAt(i) == &#39;A&#39;)
         cont++;
      return cont;
   }
   
   String montaFrase(int tamanho)
   {
      int r, i;
      char[] frase = new char[tamanho];
      for (i = 0; i < tamanho; i++) {
         r = (int) (Math.random()*52);
         frase[i] = (char)(
            (r < 26)&#63; &#39;A&#39; + r
                    : &#39;a&#39; + (r - 26));
      }
      return new String(frase);
   }
}

Conta t = new Conta();

for (int i = 0; i < 100; i++) {
   String f = t.montaFrase(50 + (int)(Math.random()*30));
   assertEquals(c.contaA(f), t.meuContaA(f), f);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(74, '(11.3) Implemente na classe <code>ContaLetras</code> um método <code>double frequenciaDeVogais(String frase)</code> que determina a freqüência relativa de vogais em uma <tt>String</tt>. Considere que as letras maiúsculas e minúsculas não estão acentuadas.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(74,' // Código:

ContaLetras c = new ContaLetras();

class TestaFrequencia
{
   boolean ehVogal(char c)
   {
      return (c == &#39;a&#39; || c == &#39;e&#39; || c == &#39;i&#39; || c == &#39;o&#39; || c == &#39;u&#39; ||
              c == &#39;A&#39; || c == &#39;E&#39; || c == &#39;I&#39; || c == &#39;O&#39; || c == &#39;U&#39;);
   }

   int contaVogais(String frase)
   {
      int cont = 0;
      for (int i = 0; i < frase.length(); i++)
         if (ehVogal(frase.charAt(i))) cont++;
      return cont;
   }
   
   String montaFrase(int tamanho)
   {
      int r, i;
      char[] frase = new char[tamanho];
      for (i = 0; i < tamanho; i++) {
         r = (int) (Math.random()*52);
         frase[i] = (char)(
            (r < 26)&#63; &#39;A&#39; + r
                    : &#39;a&#39; + (r - 26));
      }
      return new String(frase);
   }
}

TestaFrequencia t = new TestaFrequencia();

for (int i = 0; i < 100; i++) {
   String f = t.montaFrase(50 + (int)(Math.random()*30));
   double freq = (double)t.contaVogais(f) / f.length();
   assertEquals(c.frequenciaDeVogais(f), freq, f);
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(75, '(13.1) Crie uma classe <code>Contador</code> com um método <code>int numeroDeDigitos(int n)</code> que recebe um número natural <var>n</var> e devolve seu número de dígitos.

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(75,' // Código:

class MeuContador
{
   int montaNumero(int digitos)
   {
      int i, num = 1 + (int)(Math.random() * 9);

      for (i = 1; i < digitos; i++)
         num = num*10 + (int)(Math.random() * 10);

      return num;
   }
}

Contador c = new Contador();
assertEquals(c.numeroDeDigitos(1), 1, &quot;1&quot;);
assertEquals(c.numeroDeDigitos(10), 2, &quot;10&quot;);
assertEquals(c.numeroDeDigitos(100), 3, &quot;100&quot;);
assertEquals(c.numeroDeDigitos(1000), 4, &quot;1000&quot;);
assertEquals(c.numeroDeDigitos(10000), 5, &quot;10000&quot;);
assertEquals(c.numeroDeDigitos(100000), 6, &quot;100000&quot;);
assertEquals(c.numeroDeDigitos(1000000), 7, &quot;1000000&quot;);
assertEquals(c.numeroDeDigitos(10000000), 8, &quot;10000000&quot;);
assertEquals(c.numeroDeDigitos(100000000), 9, &quot;100000000&quot;);
assertEquals(c.numeroDeDigitos(1000000000), 10, &quot;1000000000&quot;);

MeuContador t = new MeuContador();

for (int i = 0; i < 50; i++) {
   int d = 1 + (int)(Math.random() * 9);
   int r = t.montaNumero(d);
   assertEquals(c.numeroDeDigitos(r), d, r + &quot;&quot;);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(76, '(13.2) Adicione à classe <code>Contador</code> o método <code>boolean temDigitosIguaisConsecutivos(int n)</code> que verifica se o número natural <var>n</var> possui dois dígitos consecutivos iguais.

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(76,' // Código:

class TestaDigitos
{
   int montaNumero(int digitos)
   {
      int i, num = 1 + (int)(Math.random() * 9);

      for (i = 1; i < digitos; i++)
         num = num*10 + (int)(Math.random() * 10);

      return num;
   }

   boolean temDigitosIguaisConsecutivos(int n)
   {
      int d_ant = -1;
      while (n > 0) {
         if (n % 10 == d_ant)
            return true;
         d_ant = n % 10;
         n /= 10;
      }
      return false;
   }
}

Contador c = new Contador();
assertEquals(c.temDigitosIguaisConsecutivos(11), true, &quot;11&quot;);
assertEquals(c.temDigitosIguaisConsecutivos(1107), true, &quot;1107&quot;);
assertEquals(c.temDigitosIguaisConsecutivos(74566), true, &quot;74566&quot;);
assertEquals(c.temDigitosIguaisConsecutivos(1000), true, &quot;1000&quot;);

assertEquals(c.temDigitosIguaisConsecutivos(1), false, &quot;1&quot;);
assertEquals(c.temDigitosIguaisConsecutivos(123456), false, &quot;123456&quot;);
assertEquals(c.temDigitosIguaisConsecutivos(3124), false, &quot;3124&quot;);

TestaDigitos t = new TestaDigitos();
for (int i = 0; i < 50; i++) {
   int n = t.montaNumero(6 + (int)(Math.random()*3));
   assertEquals(c.temDigitosIguaisConsecutivos(n),
         t.temDigitosIguaisConsecutivos(n), n + &quot;&quot;);
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(77, '(13.3) Dado um número natural <var>n</var>, crie uma classe <code>Palindromo</code> com um método <code>boolean verifica(int n)</code> que verifica se <var>n</var> é palíndromo. Um número palíndromo é um número que lido de trás para frente é o mesmo quando lido normalmente (por exemplo, 78087, 1221, 11111, 3224223).
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(77,' // Código:

class Testa
{
   boolean palindromo(int n)
   {
      int inv = 0, orig = n;
      while (n > 0) {
         inv = inv*10 + (n % 10);
         n /= 10;
      }
      return (inv == orig);
   }

   int montaPalindromo(int digitos)
   {
      int[] num = new int[digitos];
      int i, n = 0;

      num[0] = 1 + (int)(Math.random() * 9);
      for (i = 1; i < (digitos+1)/2; i++)
         num[i] = (int)(Math.random() * 10);
      for (i = (digitos+1)/2; i < digitos; i++)
         num[i] = num[digitos - i - 1];
      for (i = digitos-1; i >= 0; i--)
         n = n*10 + num[i];

      return n;
   }

   int montaNumero(int digitos)
   {
      int i, num = 1 + (int)(Math.random() * 9);

      for (i = 1; i < digitos; i++)
         num = num*10 + (int)(Math.random() * 10);

      return num;
   }


}

Testa t = new Testa();
Palindromo p = new Palindromo();

assertEquals(p.verifica(78087), true, &quot;78087&quot;);
assertEquals(p.verifica(1221), true, &quot;1221&quot;);
assertEquals(p.verifica(11111), true, &quot;11111&quot;);
assertEquals(p.verifica(3224223), true, &quot;3224223&quot;);
assertEquals(p.verifica(12345), false, &quot;12345&quot;);

for (int i = 0; i < 50; i++) {
   int n = t.montaNumero(6 + (int)(Math.random()*4));
   assertEquals(p.verifica(n), t.palindromo(n), n + &quot;&quot;);
}

for (int i = 0; i < 50; i++) {
   int n = t.montaPalindromo(6 + (int)(Math.random()*4));
   assertEquals(p.verifica(n), true, n + &quot;&quot;);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(78, '(13.5) Crie uma classe <code>NumerosRomanos</code> com os dois métodos a seguir:
<ul><li><code>String decimalParaRomanos(int n)</code> &mdash; dado um número natural, devolve uma <tt>String</tt> com a representação do número no sistema romano.</li>
<li><code>int romanosParaDecimal(String romano)</code> &mdash; dada a representação de um número no sistema romano, devolve seu valor numérico como um inteiro.</li></ul>
Assuma que os números são sempre menores que 4000, e também que as representações usam apenas letras maiúsculas.

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(78,' // Código:

class MeusRomanos
{
   String decimalParaRomanos(int n)
   {
      StringBuilder buf = new StringBuilder(20);

      while (n >= 1000) { buf.append(&#39;M&#39;);  n -= 1000; }
      if (n >= 900) { buf.append(&quot;CM&quot;); n -= 900; }
      if (n >= 500) { buf.append(&#39;D&#39;);  n -= 500; }
      if (n >= 400) { buf.append(&quot;CD&quot;); n -= 400; }

      while (n >= 100) { buf.append(&#39;C&#39;);  n -= 100; }
      if (n >= 90) { buf.append(&quot;XC&quot;); n -= 90; }
      if (n >= 50) { buf.append(&#39;L&#39;);  n -= 50; }
      if (n >= 40) { buf.append(&quot;XL&quot;); n -= 40; }
      
      while (n >= 10) { buf.append(&#39;X&#39;);  n -= 10; }
      if (n == 9) { buf.append(&quot;IX&quot;); n -= 9; }

      if (n >= 5) { buf.append(&#39;V&#39;);  n -= 5; }
      if (n == 4) { buf.append(&quot;IV&quot;); n -= 4; }
      while (n >= 1) { buf.append(&#39;I&#39;);  n--; }

      return buf.toString();
   }

   int romanosParaDecimal(String romano)
   {
      int num = 0, i, max = romano.length();

      for (i = 0; i < max; i++) {
         switch (romano.charAt(i)) {
            case &#39;M&#39;: num += 1000; break;
            case &#39;D&#39;: num += 500; break;
            case &#39;C&#39;:
               if (i < max-1) {
                  if (romano.charAt(i+1) == &#39;M&#39;) { num += 900; i++; }
                  else if (romano.charAt(i+1) == &#39;D&#39;) { num += 400; i++; }
                  else num += 100;
               }
               else num += 100;
               break;
            case &#39;L&#39;: num += 50; break;
            case &#39;X&#39;:
               if (i < max-1) {
                  if (romano.charAt(i+1) == &#39;C&#39;) { num += 90; i++; }
                  else if (romano.charAt(i+1) == &#39;L&#39;) { num += 40; i++; }
                  else num += 10;
               }
               else num += 10;
               break;
            case &#39;V&#39;: num += 5; break;
            case &#39;I&#39;:
               if (i < max-1) {
                  if (romano.charAt(i+1) == &#39;X&#39;) { num += 9; i++; }
                  else if (romano.charAt(i+1) == &#39;V&#39;) { num += 4; i++; }
                  else num++;
               }
               else num++;
               break;
         }
      }
      return num;
   }
}

MeusRomanos t = new MeusRomanos();
NumerosRomanos c = new NumerosRomanos();

for (int i = 0; i < 75; i++) {
   int n = 1 + (int)(Math.random() * 3999);
   String rom = t.decimalParaRomanos(n);
   assertEquals(c.decimalParaRomanos(n), rom, n + &quot;&quot;);
   assertEquals(c.romanosParaDecimal(rom), n, rom);
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(79, '(14.3) Crie uma classe <code>Sequencias</code> com um método <code>boolean ehSubsequencia(int[] a, int[] b)</code> que, dados os dois vetores <var>a</var> e <var>b</var>, verifica se o vetor de menor tamanho é uma subsequência do vetor de tamanho maior. Ex: O vetor [9, 5] é uma subsequência de [3, 9, 5, 4, &minus;1].

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(79,' // Código:

class TestaSubsequencias
{
   int[] aleatoria(int[] a)
   {
      double r;
      int i = 0;
      int[] v = new int[a.length], w;

      while (i == 0) { // evita seqüências vazias
         int ini = (int) (Math.random() * (a.length-1));
         for (int j = ini; j < a.length; j++) {
            v[i++] = a[j];
            if (Math.random() > 0.8) {
               break;
	    }
         }
      }
      w = new int[i];
      for (int j = 0; j < i; j++)
         w[j] = v[j];
      return w;
   }

   String imprimeArray(int[] a)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         if (j > 0)
            buf.append(&quot;, &quot; + a[j]);
         else
            buf.append(&quot;&quot; + a[j]);
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   int[] criaSequencia(int n, int a, int b)
   {
      int[] v = new int[n];
      for (int j = 0; j < n; j++)
         v[j] = a + (int)((b-a + 1) * Math.random());
      return v;
   }

}

TestaSubsequencias t = new TestaSubsequencias();
Sequencias c = new Sequencias();

int[] a1 = {2};
int[] a2 = {3,2,7,8};
assertEquals(c.ehSubsequencia(a1, a2), true, &quot;sequências &quot; +
            t.imprimeArray(a2) + &quot; e &quot; + t.imprimeArray(a1));


for (int i = 0; i < 15; i++) {
   int[] seq = t.criaSequencia(7 + (int)(6 * Math.random()), -15, 15);

   for (int j = 0; j < 5; j++) {
      // verifica subsequências
      int[] subseq = t.aleatoria(seq);
      assertEquals(c.ehSubsequencia(subseq, seq), true, &quot;sequências &quot; +
            t.imprimeArray(seq) + &quot; e &quot; + t.imprimeArray(subseq));

      assertEquals(c.ehSubsequencia(seq, subseq), true, &quot;sequências &quot; +
            t.imprimeArray(subseq) + &quot; e &quot; + t.imprimeArray(seq));

      // altera elementos aleatórios das subsequências de modo que eles
      // não estejam na sequência original
      for (int k = 0; k < 3; k++) {
         int r = (int)(subseq.length * Math.random());
         subseq[r] = 16 + (int)(10 * Math.random());
         assertEquals(c.ehSubsequencia(seq, subseq), false, &quot;sequências &quot; +
               t.imprimeArray(subseq) + &quot; e &quot; + t.imprimeArray(seq));
      }
   }
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(80, '(14.4)  Adicione à classe <code>Sequencias</code> o método <code>String segmentoDeSomaMaxima(int[] v)</code> que, dado um vetor <var>v</var> de inteiros, devolve o segmento de soma máxima como uma <tt>String</tt>, separando os elementos por uma vírgula. Por exemplo: no vetor [&minus;1, 5, &minus;4, 7, 2, &minus;3] o segmento de soma máxima é [5, &minus;4, 7, 2], e portanto você deverá devolver a string &quot;5,-4,7,2&quot;.

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(80,' // Código:


class TestaSoma
{
   String imprimeArray(int[] a)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         if (j > 0)
            buf.append(&quot;, &quot; + a[j]);
         else
            buf.append(&quot;&quot; + a[j]);
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   int[] criaSequencia(int n, int a, int b)
   {
      int[] v = new int[n];
      for (int j = 0; j < n; j++)
         v[j] = a + (int)((b-a + 1) * Math.random());
      return v;
   }

   String extraiSegmento(int[] v, int a, int b)
   {
      StringBuilder buf = new StringBuilder();
      int i;

      buf.append(v[a]);
      for (i = a + 1; i < b; i++)
         buf.append(&quot;,&quot; + v[i]);
      return buf.toString();
   }

   String segmentosDeSomaMaxima(int[] v)
   {
      String s = new String();
      int soma = v[0], somamax = v[0], max_a = 0, max_b = 1, i, j;

      for (i = 0; i < v.length; i++) {
         soma = v[i];
         if (soma > somamax) {
            somamax = soma;
            max_a = i;
            max_b = i+1;
         }
         for (j = i+1; j < v.length; j++) {
            soma += v[j];
            if (soma > somamax) {
               somamax = soma;
               max_a = i;
               max_b = j+1;
            }
         }
      }

      s = &quot;&quot;;
      for (i = 0; i < v.length; i++) {
         soma = v[i];
         if (soma == somamax)
            s += extraiSegmento(v, i, i+1);
         for (j = i+1; j < v.length; j++) {
            soma += v[j];
            if (soma == somamax)
               s += extraiSegmento(v, i, j+1);
         }
      }
      
      return s;
   }

}

TestaSoma t = new TestaSoma();
Sequencias c = new Sequencias();

for (int i = 0; i < 15; i++) {
   int[] seq = t.criaSequencia(9 + (int)(6 * Math.random()), -15, 15);
   String resultado = c.segmentoDeSomaMaxima(seq);
   String esperado = t.segmentosDeSomaMaxima(seq);
   boolean ok = false;
   
   assertEquals(resultado,esperado);

   /*for (String s : esperado) {
      if (resultado.equals(s)) {
         ok = true;
         break;
      }
   }

   if (!ok)
      //assertEquals(resultado, esperado.firstElement(), t.imprimeArray(seq));
      System.out.println(&quot;Errado&quot;);*/
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(81, '(15.2+5) Escreva uma classe <code>Vetor</code> que, usando a estrutura <strong><tt>for</tt></strong>, implementa os seguintes métodos:
<ul><li><code>void somaVetores(double[] v1, double[] v2, double[] v3)</code> &mdash; calcula a soma (índice a índice) dos vetores <var>v1</var> e <var>v2</var>, de mesmo comprimento, e guarda o resultado no vetor <var>v3</var>. Os três vetores deverão ter o mesmo comprimento.</li>
<li><code>double produtoEscalar(double[] v1, double[] v2)</code> &mdash; calcula o produto escalar dos vetores <var>v1</var> e <var>v2</var> (de mesmo comprimento) e devolve o resultado.</li></ul>

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(81,' // Código:

class TestaVetores
{
   String imprimeArray(double[] a)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         if (j > 0)
            buf.append(&quot;, &quot; + a[j]);
         else
            buf.append(&quot;&quot; + a[j]);
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   double[] criaSequencia(int n, int a, int b)
   {
      double[] v = new double[n];
      for (int j = 0; j < n; j++)
         v[j] = a + ((b-a) * Math.random());
      return v;
   }

   double[] somaVetores(double[] v1, double[] v2)
   {
      double[] v = new double[v1.length];
      for (int i = 0; i < v1.length; i++)
         v[i] = v1[i] + v2[i];
      return v;
   }

   double produtoEscalar(double[] v1, double[] v2)
   {
      double s = 0;
      for (int i = 0; i < v1.length; i++)
         s += v1[i] * v2[i];
      return s;
   }
}

class EscondeVetor
{
   double[] v;
   private static final double epsilon = 1e-7;

   public EscondeVetor(double[] ve) {
      this.v = ve;
   }

   public String toString() {
      TestaVetores t = new TestaVetores();
      return t.imprimeArray(v);
   }

   public boolean equals(Object outro) {
      if (!(outro instanceof EscondeVetor)) return false;
      EscondeVetor x = (EscondeVetor)outro;

      if (v.length != x.v.length) return false;
      for (int i = 0; i < v.length; i++)
         if (Math.abs(v[i] - x.v[i]) > epsilon) return false;
      return true;
   }
}

TestaVetores t = new TestaVetores();
Vetor cli = new Vetor();

for (int i = 0; i < 15; i++) {
   int tam = 5 + (int)(4 * Math.random());
   double[] a = t.criaSequencia(tam, -15, 15);
   double[] b = t.criaSequencia(tam, -15, 15);
   double[] c = new double[tam];

   double produto = t.produtoEscalar(a, b);
   assertEquals(cli.produtoEscalar(a, b), produto, &quot;produto escalar entre &quot; +
         t.imprimeArray(a) + &quot; e &quot; + t.imprimeArray(b));

   cli.somaVetores(a, b, c);
   assertEquals(new EscondeVetor(c), new EscondeVetor(t.somaVetores(a, b)),
         &quot;soma dos vetores &quot; + t.imprimeArray(a) + &quot; e &quot; + t.imprimeArray(b));
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(82, '(16.4) Dizemos que uma matriz <var>A</var>(<var>n</var> × <var>n</var>) é um quadrado latino de ordem <var>n</var> se em cada linha e em cada coluna aparecem todos os inteiros 1, 2, 3, &#63;, <var>n</var> (ou seja, cada linha e coluna é permutação dos inteiros 1, 2, &#63;, <var>n</var>). Escreva uma classe <code>Quadrado</code> com os seguintes métodos:
<ul><li><code>boolean estaNoArray(int j, int[] a)</code>, que verifica se <var>j</var> está no vetor de inteiros <var>a</var>;</li>
<li><code>boolean temTodos(int[] a)</code>, que verifica se o vetor <var>a</var>, de <var>n</var> posições, tem todos os inteiros de 1 a <var>n</var>;</li>
<li><code>boolean ehLatino(int[][] A)</code>, que verifica se a matriz <var>A</var> (<var>n</var> × <var>n</var>) é um quadrado latino de ordem <var>n</var>.</li></ul>

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(82,' // Código:

class TestaQuadrado
{
   int[] criaIntervalo(int n)
   {
      int[] v = new int[n];
      for (int i = 0; i < n; i++)
         v[i] = i+1;
      return v;
   }

   void trocaAleatorio(int[] v, int k)
   {
      int pos = k + 1 + (int)((v.length - k - 1) * Math.random());
      int temp = v[k];
      v[k] = v[pos];
      v[pos] = temp;
   }

   String imprimeArray(int[] a)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         if (j > 0)
            buf.append(&quot;, &quot; + a[j]);
         else
            buf.append(&quot;&quot; + a[j]);
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   String imprimeMatriz(int[][] A)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[ &quot;);
      for (int j = 0; j < A.length; j++) {
         if (j > 0)
            buf.append(&quot;, &quot;);
         buf.append(imprimeArray(A[j]));
      }
      buf.append(&quot; ]&quot;);
      return buf.toString();
   }

   int[][] criaMatriz(int n, int... M)
   {
      int i, j;
      int[][] A = new int[n][n];
      for (i = 0; i < n; i++)
         for (j = 0; j < n; j++)
            A[i][j] = M[i*n + j];
      return A;
   }
}

TestaQuadrado t = new TestaQuadrado();
Quadrado q = new Quadrado();

for (int n = 4; n <= 6; n++) {
   int[] seq = t.criaIntervalo(n);
   for (int k = 0; k < n-1; k++) {
      t.trocaAleatorio(seq, k);
      assertEquals(q.temTodos(seq), true, &quot;temTodos(&quot; + t.imprimeArray(seq) + &quot;)&quot;);
   }
   for (int x = 1; x <= n; x++)
      assertEquals(q.estaNoArray(x, seq), true, &quot;estaNoArray(&quot; + x + &quot;, &quot; +
            t.imprimeArray(seq) + &quot;)&quot;);
}

int[][] A;
A = t.criaMatriz(3,   1, 1, 1,   2, 2, 2,   3, 3, 3);
assertEquals(q.ehLatino(A), false, &quot;ehLatino(&quot; + t.imprimeMatriz(A) + &quot;)&quot;);

A = t.criaMatriz(3,   0, 1, 2,   1, 2, 0,   2, 0, 1);
assertEquals(q.ehLatino(A), false, &quot;ehLatino(&quot; + t.imprimeMatriz(A) + &quot;)&quot;);

A = t.criaMatriz(3,   1, 2, 3,   2, 3, 1,   3, 1, 2);
assertEquals(q.ehLatino(A), true, &quot;ehLatino(&quot; + t.imprimeMatriz(A) + &quot;)&quot;);

A = t.criaMatriz(4,   1, 2, 3, 4,   2, 1, 4, 3,   3, 4, 1, 2,   4, 3, 2, 1);
assertEquals(q.ehLatino(A), true, &quot;ehLatino(&quot; + t.imprimeMatriz(A) + &quot;)&quot;);

A = t.criaMatriz(4,   1, 2, 3, 4,   2, 1, 4, 3,   3, 2, 1, 4,   4, 3, 2, 1);
assertEquals(q.ehLatino(A), false, &quot;ehLatino(&quot; + t.imprimeMatriz(A) + &quot;)&quot;);

A = t.criaMatriz(5,   1, 2, 3, 4, 5,   2, 3, 5, 1, 4,   3, 5, 4, 2, 1,
      4, 1, 2, 5, 3,   5, 4, 1, 3, 2);
assertEquals(q.ehLatino(A), true, &quot;ehLatino(&quot; + t.imprimeMatriz(A) + &quot;)&quot;);

A = t.criaMatriz(5,   2, 4, 1, 5, 3,   1, 2, 3, 4, 5,   5, 3, 2, 1, 4,
      3, 5, 4, 2, 1,   4, 1, 5, 3, 2);
assertEquals(q.ehLatino(A), true, &quot;ehLatino(&quot; + t.imprimeMatriz(A) + &quot;)&quot;);

A = t.criaMatriz(5,   2, 4, 1, 5, 3,   1, 2, 3, 4, 5,   5, 3, 1, 2, 4,
      3, 5, 4, 2, 1,   4, 1, 2, 3, 5);
assertEquals(q.ehLatino(A), false, &quot;ehLatino(&quot; + t.imprimeMatriz(A) + &quot;)&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(83, '(16.7) Um jogo de palavras cruzadas pode ser representado por uma matriz <var>A</var>(<var>m</var> × <var>n</var>), na qual cada posição corresponde a um quadrado do jogo, sendo que 0 indica um quadrado branco e &minus;1 indica um quadrado preto. Crie uma classe <code>PalavrasCruzadas</code> com um método <code>void marcaInicioDasPalavras(int[][] A)</code> que, dada uma matriz <var>A</var> com tal representação, procura as posições que são início de palavras horizontais e/ou verticais e numera tais posições (começando da esquerda para a direita, de cima para baixo), substituindo os valores na matriz original. Considere que uma palavra deve ter pelo menos duas letras.<BR>
As duas imagens a seguir mostram um exemplo de entrada e saída correspondente.<BR><IMG src=http://www.ime.usp.br/~macmulti/figuras/Image69a.gif border=0>
<IMG src=http://www.ime.usp.br/~macmulti/figuras/Image69b.gif border=0>

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(83,' // Código:

class TestaCruzadas
{
   int[][] criaMatriz(int m, int n, int... M)
   {
      int i, j;
      int[][] A = new int[m][n];
      for (i = 0; i < m; i++)
         for (j = 0; j < n; j++)
            A[i][j] = M[i*n + j];
      return A;
   }

   int[][] copiaMatriz(int[][] M)
   {
      int i, j, m = M.length, n = M[0].length;
      int[][] A = new int[m][n];
      for (i = 0; i < m; i++)
         for (j = 0; j < n; j++)
            A[i][j] = M[i][j];
      return A;
   }

   int[][] marcaPalavras(int[][] A)
   {
      int m = A.length, n = A[0].length;
      int k = 0, i, j;
      int[][] M = new int[m][n];

      for (i = 0; i < m; i++) {
         for (j = 0; j < n; j++) {
            M[i][j] = A[i][j];
            if (A[i][j] == -1) continue;

            // across
            if ((j == 0 && j < n-1 && A[i][1] != -1) || (j != 0 &&j < n-1 && (A[i][j-1] == -1 && A[i][j+1] != -1)))
               M[i][j] = ++k;
            // down
            else if ((i == 0 && i < m-1 && A[1][j] != -1) || (i != 0 && i < m-1 && (A[i-1][j] == -1 && A[i+1][j] != -1)))
               M[i][j] = ++k;
         }
      }

      return M;
   }

}

class Matriz
{
   int[][] M;

   public Matriz(int[][] b)
   {
      M = b;
   }

   String imprimeArray(int[] a)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         buf.append(String.format(&quot;%4d&quot;, a[j]));
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   String imprimeMatriz(int[][] A)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < A.length; j++) {
         if (j > 0)
            buf.append(&quot;,\n &quot;);
         buf.append(imprimeArray(A[j]));
      }
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   public String toString() {
      return imprimeMatriz(M);
   }

   public boolean equals(Object other) {
      if (!(other instanceof Matriz))
         return false;
      int[][] N = ((Matriz)other).M;
      if (N.length != M.length || N[0].length != M[0].length)
         return false;

      for (int i = 0; i < N.length; i++)
         for (int j = 0; j < N[0].length; j++)
            if (M[i][j] != N[i][j])
               return false;
      return true;
   }
}

PalavrasCruzadas p = new PalavrasCruzadas();
TestaCruzadas t = new TestaCruzadas();
Matriz M1;

int[][] A, B, C;
A = t.criaMatriz(5, 8,
       0, -1,  0, -1, -1,  0, -1,  0,
       0,  0,  0,  0, -1,  0,  0,  0,
       0,  0, -1, -1,  0,  0, -1,  0,
      -1,  0,  0,  0,  0, -1,  0,  0,
       0,  0, -1,  0,  0,  0, -1, -1);
B = t.marcaPalavras(A);
C = t.copiaMatriz(A);
p.marcaInicioDasPalavras(C);
M1 = new Matriz(B);
assertEquals(new Matriz(C), M1, &quot;<pre>&quot; + M1.imprimeMatriz(A) + &quot;</pre>&quot;);

A = t.criaMatriz(5, 8,
       0,  0,  0, -1, -1,  0, -1,  0,
       0,  0,  0, -1, -1,  0,  0,  0,
       0,  0, -1,  0,  0,  0, -1,  0,
      -1,  0,  0,  0,  0, -1,  0, -1,
       0,  0,  0, -1, -1,  0, -1, -1);
B = t.marcaPalavras(A);
C = t.copiaMatriz(A);
p.marcaInicioDasPalavras(C);
M1 = new Matriz(B);
assertEquals(new Matriz(C), M1, &quot;<pre>&quot; + M1.imprimeMatriz(A) + &quot;</pre>&quot;);

A = t.criaMatriz(5, 8,
 0, -1,  0, -1, -1,  0, -1,  0,
 0,  0,  0,  0, -1,  0,  0,  0,
 0,  0, -1, -1,  0,  0, -1,  0,
-1,  0,  0,  0,  0, -1,  0,  0,
 0,  0, -1,  0,  0,  0, -1, -1);
B = t.marcaPalavras(A);
C = t.copiaMatriz(A);
p.marcaInicioDasPalavras(C);
M1 = new Matriz(B);
assertEquals(new Matriz(C), M1, &quot;<pre>&quot; + M1.imprimeMatriz(A) + &quot;</pre>&quot;);

A = t.criaMatriz(5, 8,
 0,  0,  0, -1, -1,  0, -1,  0,
 0,  0,  0, -1, -1,  0,  0,  0,
 0,  0, -1,  0,  0,  0, -1,  0,
-1,  0,  0,  0,  0, -1,  0, -1,
 0,  0,  0, -1, -1,  0, -1, -1);
B = t.marcaPalavras(A);
C = t.copiaMatriz(A);
p.marcaInicioDasPalavras(C);
M1 = new Matriz(B);
assertEquals(new Matriz(C), M1, &quot;<pre>&quot; + M1.imprimeMatriz(A) + &quot;</pre>&quot;);

A = t.criaMatriz(6, 8,
 0,  0,  0, -1, -1,  0,  0,  0,
-1, -1,  0, -1, -1,  0, -1,  0,
 0,  0,  0,  0,  0,  0,  0,  0,
 0,  0,  0,  0, -1, -1,  0, -1,
 0, -1,  0, -1, -1,  0,  0,  0,
-1,  0,  0,  0,  0, -1,  0, -1);
B = t.marcaPalavras(A);
C = t.copiaMatriz(A);
p.marcaInicioDasPalavras(C);
M1 = new Matriz(B);
assertEquals(new Matriz(C), M1, &quot;<pre>&quot; + M1.imprimeMatriz(A) + &quot;</pre>&quot;);

A = t.criaMatriz(6, 8,
 0, -1,  0, -1,  0, -1,  0, -1,
-1,  0,  0, -1, -1,  0, -1,  0,
-1,  0,  0,  0,  0,  0,  0,  0,
-1,  0,  0,  0, -1, -1,  0, -1,
-1, -1,  0, -1, -1,  0,  0,  0,
-1,  0,  0,  0,  0, -1,  0, -1);
B = t.marcaPalavras(A);
C = t.copiaMatriz(A);
p.marcaInicioDasPalavras(C);
M1 = new Matriz(B);
assertEquals(new Matriz(C), M1, &quot;<pre>&quot; + M1.imprimeMatriz(A) + &quot;</pre>&quot;);

A = t.criaMatriz(6, 8,
-1,  0,  0, -1, -1,  0, -1, -1,
-1,  0,  0, -1, -1,  0, -1,  0,
 0,  0,  0,  0,  0,  0,  0,  0,
-1,  0,  0,  0,  0, -1,  0, -1,
-1, -1,  0, -1,  0, -1,  0, -1,
-1,  0,  0,  0,  0, -1,  0, -1);
B = t.marcaPalavras(A);
C = t.copiaMatriz(A);
p.marcaInicioDasPalavras(C);
M1 = new Matriz(B);
assertEquals(new Matriz(C), M1, &quot;<pre>&quot; + M1.imprimeMatriz(A) + &quot;</pre>&quot;);


', 'java');
insert into Questao (id, enunciado, disciplina_id) values(84, '(17.1) Escreva uma classe <code>Ordena</code> com um método <code>void ordenaStrings(String[] v)</code> que usa o método da bolha para ordenar um array <var>v</var> de <tt>String</tt>s em ordem alfabética.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(84,' // Código:

class TestaBolha
{
   String montaFrase(int tamanho)
   {
      int r, i;
      char[] frase = new char[tamanho];
      for (i = 0; i < tamanho; i++) {
         r = (int) (Math.random()*26);
         frase[i] = (char)(&#39;a&#39; + r);
      }
      return new String(frase);
   }

   boolean estáOrdenado(String[] args)
   {
      for (int i = 0; i < args.length - 1; i++)
         if (args[i].compareTo(args[i+1]) > 0)
            return false;
      return true;
   }

   String[] criaArray(int n)
   {
      String[] a = new String[n];
      for (int i = 0; i < n; i++)
         a[i] = montaFrase(20 + (int)(10 * Math.random()));
      return a;
   }

   String imprimeArray(String[] a)
   {
      StringBuilder buf = new StringBuilder();

      buf.append(&quot;[&quot;);
      for (int i = 0; i < a.length; i++) {
         if (i > 0)
            buf.append(&quot;, &quot;);
         buf.append(&quot;\&quot;&quot; + a[i] + &quot;\&quot;&quot;);
      }
      buf.append(&quot;]&quot;);
      return buf.toString();
   }
}

TestaBolha t = new TestaBolha();
Ordena o = new Ordena();
for (int i = 0; i < 10; i++) {
   String[] a = t.criaArray(10);
   o.ordenaStrings(a);
   assertEquals(t.estáOrdenado(a), true, &quot;estáOrdenado(&quot; + t.imprimeArray(a) + &quot;)&quot;);
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(85, '(18.1)  Crie uma classe <code>Busca</code> implementando num método <code>int buscaTernaria(int valor, int[] vetor)</code> o algoritmo de busca ternária, que funciona de forma similar ao de busca binária mas que divide o vetor em três partes iguais a cada iteração. Você deve devolver o índice do elemento no vetor caso ele seja encontrado ou &minus;1 caso contrário.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(85,' // Código:

class TestaBusca
{
   String imprimeArray(int[] a)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         if (j > 0)
            buf.append(&quot;, &quot; + a[j]);
         else
            buf.append(&quot;&quot; + a[j]);
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   int[] criaSequencia(int n, int a, int b)
   {
      int[] v = new int[n];
      for (int j = 0; j < n; j++)
         v[j] = a + (int)((b-a + 1) * Math.random());
      return v;
   }

   int[] ordena(int[] v)
   {
      int aux, i, j, n = v.length, r = 0;
      for (i = 0; i < n-1; i++)
         for (j = i+1; j < n; j++)
            if (v[j] < v[i]) {
               aux = v[i];
               v[i] = v[j];
               v[j] = aux;
            }

      int[] w = new int[n];
      w[0] = v[0]; r = 1;
      for (i = 1; i < n; i++)
         if (v[i-1] != v[i])
            w[r++] = v[i];

      int[] x = new int[r];
      for (i = 0; i < r; i++)
         x[i] = w[i];
      return x;
   }
}

TestaBusca t = new TestaBusca();
Busca b = new Busca();

int[] v;
for (int n = 0; n < 10; n++) {
   v = t.criaSequencia(40, -100, 100);
   v = t.ordena(v);
   for (int k = 0; k < v.length; k++) {
      assertEquals(b.buscaTernaria(v[k], v), k, &quot;busca(&quot; + t.imprimeArray(v) + &quot;, &quot; + v[k] + &quot;)&quot;);
      if (k+1 < v.length)
         for (int j = v[k]+1; j < v[k+1]; j++)
            assertEquals(b.buscaTernaria(j, v), -1, &quot;busca(&quot; + t.imprimeArray(v) + &quot;, &quot; + j + &quot;)&quot;);
   }
   assertEquals(b.buscaTernaria(200, v), -1, &quot;busca(&quot; + t.imprimeArray(v) + &quot;, &quot; + 200 + &quot;)&quot;);
   assertEquals(b.buscaTernaria(-200, v), -1, &quot;busca(&quot; + t.imprimeArray(v) + &quot;, &quot; + -200 + &quot;)&quot;);
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(86, '(18.3)  Escreva uma classe <code>Ordena</code> com um método <code>int[] fusao(int[] a, int[] b)</code> que recebe dois arrays ordenados e realiza uma versão do algoritmo de fusão que <strong>não</strong> preserva repetições de elementos &mdash; se um elemento aparece em ambos os arrays, ou mais de uma vez em algum dos arrays, ele deverá aparecer apenas uma vez na seqüência gerada.  Você deverá devolver a seqüência gerada.

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(86,' // Código:

class TestaFusao
{
   String imprimeArray(int[] a)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         if (j > 0)
            buf.append(&quot;, &quot; + a[j]);
         else
            buf.append(&quot;&quot; + a[j]);
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   int[] criaSequencia(int n, int a, int b)
   {
      int[] v = new int[n];
      for (int j = 0; j < n; j++)
         v[j] = a + (int)((b-a + 1) * Math.random());
      return v;
   }

   void ordena(int[] v)
   {
      int aux, i, j, n = v.length;
      for (i = 0; i < n-1; i++)
         for (j = i+1; j < n; j++)
            if (v[j] < v[i]) {
               aux = v[i];
               v[i] = v[j];
               v[j] = aux;
            }
   }

   int[] funde(int[] v1, int[] v2)
   {
      int[] res = new int[v1.length + v2.length];
      int i, j = 0, n = 0;
      
      for (i = 0; i < v1.length; i++) {
         
         while (j < v2.length && v2[j] < v1[i]) {
            // elimina repetições em v2
            if (n == 0 || v2[j] != res[n-1])
               res[n++] = v2[j];
            j++;
         }
         while (j < v2.length && v2[j] == v1[i])
            j++;

         res[n++] = v1[i];
         
         // elimina repetições em v1
         while (i+1 < v1.length && v1[i] == v1[i+1])
            i++;
      }
      
      while (j < v2.length) {
         if (n == 0 || v2[j] != res[n-1])
            res[n++] = v2[j];
         j++;
      }
      
      // devolve a sequência só com as entradas utilizadas
      int[] tmp = new int[n];
      for (i = 0; i < n; i++)
         tmp[i] = res[i];
      return tmp;
   }
}

class EscondeVetor
{
   int[] v;

   public EscondeVetor(int[] v) {
      this.v = v;
   }

   String imprimeArray(int[] a) {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         if (j > 0)
            buf.append(&quot;, &quot; + a[j]);
         else
            buf.append(&quot;&quot; + a[j]);
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   public String toString() {
      return imprimeArray(v);
   }

   public boolean equals(Object outro) {
      if (!(outro instanceof EscondeVetor)) return false;
      EscondeVetor x = (EscondeVetor)outro;

      if (v.length != x.v.length) return false;
      for (int i = 0; i < v.length; i++)
         if (v[i] != x.v[i]) return false;
      return true;
   }
}

TestaFusao t = new TestaFusao();
Ordena f = new Ordena();

for (int k = 0; k < 10; k++) {
   int[] v1, v2;
   EscondeVetor r, rt;
   v1 = t.criaSequencia(10, -15, 15); t.ordena(v1);
   v2 = t.criaSequencia(10, -15, 15); t.ordena(v2);
   r = new EscondeVetor(f.fusao(v1, v2));
   rt = new EscondeVetor(t.funde(v1, v2));
   assertEquals(r, rt, &quot;fusão das sequências &quot; + r.imprimeArray(v1) + &quot; e &quot; + r.imprimeArray(v2));
}

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(87, '(19.2+3) Crie uma classe <code>Quadrado</code> com um atributo inteiro <em>tamanho</em> e uma <tt>String</tt> <em>cor</em>.  Crie métodos <code>getCor</code>/<code>setCor</code> e <code>getTamanho</code>/<code>setTamanho</code> para acessar esses atributos; você deve garantir que o tamanho receba apenas valores positivos e permitir apenas as cores &quot;amarelo&quot;, &quot;azul&quot;, &quot;verde&quot; e &quot;vermelho&quot;.  Crie também um construtor que inicialize os atributos <em>tamanho</em> e <em>cor</em> (nessa ordem), garantindo as mesmas restrições aos valores.

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(87,' // Código:

Quadrado q;

q = new Quadrado(-5, &quot;amarelo&quot;);
assertEquals(q.getTamanho() == -5, false, &quot;aceitaParametros(-5, \&quot;amarelo\&quot;)&quot;);

q = new Quadrado(12, &quot;roxo&quot;);
assertEquals(q.getCor() != null && q.getCor().equals(&quot;roxo&quot;), false, &quot;aceitaParametros(12, \&quot;roxo\&quot;)&quot;);

q = new Quadrado(-5, &quot;roxo&quot;);
assertEquals(q.getTamanho() == -5, false, &quot;aceitaParametros(-5, \&quot;roxo\&quot;)&quot;);
assertEquals(q.getCor() != null && q.getCor().equals(&quot;roxo&quot;), false, &quot;aceitaParametros(-5, \&quot;roxo\&quot;)&quot;);

q = new Quadrado(10, &quot;azul&quot;);
assertEquals(q.getCor(), &quot;azul&quot;, &quot;Quadrado(10, \&quot;azul\&quot;).getCor()&quot;);
assertEquals(q.getTamanho(), 10, &quot;Quadrado(10, \&quot;azul\&quot;).getTamanho()&quot;);
q.setCor(&quot;verde&quot;);
assertEquals(q.getCor(), &quot;verde&quot;, &quot;Quadrado(10, \&quot;verde\&quot;).getCor()&quot;);
assertEquals(q.getTamanho(), 10, &quot;Quadrado(10, \&quot;verde\&quot;).getTamanho()&quot;);
q.setTamanho(17);
assertEquals(q.getCor(), &quot;verde&quot;, &quot;Quadrado(17, \&quot;verde\&quot;).getCor()&quot;);
assertEquals(q.getTamanho(), 17, &quot;Quadrado(17, \&quot;verde\&quot;).getTamanho()&quot;);
q.setCor(&quot;vermelho&quot;);
assertEquals(q.getCor(), &quot;vermelho&quot;, &quot;Quadrado(17, \&quot;vermelho\&quot;).getCor()&quot;);
assertEquals(q.getTamanho(), 17, &quot;Quadrado(17, \&quot;vermelho\&quot;).getTamanho()&quot;);
q.setCor(&quot;amarelo&quot;);
assertEquals(q.getCor(), &quot;amarelo&quot;, &quot;Quadrado(17, \&quot;amarelo\&quot;).getCor()&quot;);
assertEquals(q.getTamanho(), 17, &quot;Quadrado(17, \&quot;amarelo\&quot;).getTamanho()&quot;);

q.setCor(&quot;laranja&quot;);
assertEquals(q.getCor() != null && q.getCor().equals(&quot;laranja&quot;), false, &quot;aceitaParametros(17, \&quot;laranja\&quot;)&quot;);
q.setTamanho(-20);
assertEquals(q.getTamanho() == -5, false, &quot;aceitaParametros(-20, \&quot;vermelho\&quot;)&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(88, 'Acrescente à classe Calculo um método chamado calculaHipotenusa(double cateto1, double cateto2)', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(88,' Calculo calculo = new Calculo();

assertEquals(calculo.calculaHipotenusa (1.0,1.0), Math.sqrt(2));
assertEquals(calculo.calculaHipotenusa (3.0,4.0), 5.0);
assertEquals(calculo.calculaHipotenusa (6.0,8.0), 10.0);
assertEquals(calculo.calculaHipotenusa (6.0,7.0), 9.2195444572928873100022742817628);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(89, 'Acrescente na classe Calculo um método chamado raizCubica que receba um número double e retorne a raiz cúbica desse número.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(89,' Calculo calculo = new Calculo();

assertEquals(calculo.raizCubica (0.0), 0.0);
assertEquals(calculo.raizCubica (1.0), 1.0);
assertEquals(calculo.raizCubica (2.5), 1.3572088082974532857590);
assertEquals(calculo.raizCubica (1000.0), 10.0);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(90, 'Inclua na classe anterior, um método chamado digitoDezena que recebe um número inteiro de 3 dígitos e retorne o dígito das dezenas.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(90,' Calculo calculo = new Calculo();

assertEquals(calculo.digitoDezena  (454), 5);
assertEquals(calculo.digitoDezena  (123), 2);
assertEquals(calculo.digitoDezena  (445), 4);
assertEquals(calculo.digitoDezena  (764), 6);
assertEquals(calculo.digitoDezena  (783), 8);
assertEquals(calculo.digitoDezena  (125), 2);
assertEquals(calculo.digitoDezena  (985), 8);
assertEquals(calculo.digitoDezena  (345), 4);
assertEquals(calculo.digitoDezena  (234), 3);
assertEquals(calculo.digitoDezena  (638), 3);
assertEquals(calculo.digitoDezena  (937), 3);
assertEquals(calculo.digitoDezena  (133), 3);
assertEquals(calculo.digitoDezena  (872), 7);
assertEquals(calculo.digitoDezena  (383), 8);
assertEquals(calculo.digitoDezena  (719), 1);
assertEquals(calculo.digitoDezena  (901), 0);
assertEquals(calculo.digitoDezena  (290), 9);
assertEquals(calculo.digitoDezena  (184), 8);
assertEquals(calculo.digitoDezena  (973), 7);
assertEquals(calculo.digitoDezena  (263), 6);
assertEquals(calculo.digitoDezena  (200), 0);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(91, 'Um retângulo cujos lados sejam paralelos ao eixo X e ao eixo Y pode ser representado por dois vértices opostos. Assuma que (x1, y1) é o vértice superior esquerdo e (x2, y2) é o vértice inferior direito. Faça uma classe de nome Retangulo com os seguintes métodos:<BR>
void init(int x1, int y1, int x2, int y2) - que recebe os vértices e inicializa o objeto.<BR>
getX1(), getY1(), getX2(), getY2() - que retornam os valores de cada atributo<BR>
int calculaPerimetro() - retorna o perímetro do retângulo<BR>
int calculaArea() - retorna a área do retângulo<BR>
Retangulo intercessao(Retangulo r2) - retorna um novo objeto da classe Retangulo que é a intercessão entre o retângulo e o retângulo passado como parâmetro (r2). Retorne null caso não haja intercessão ou a área de intercessão seja igual a zero. <BR>
int calculaAreaIntecessao(Retangulo r2) - retorna a área da interseção entre os dois retângulos.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(91,' // Teste
class TestaRetangulo {
Retangulo novo (int x1, int y1, int x2, int y2) {
	Retangulo r = new Retangulo();	
	r.init(x1, y1, x2, y2);
	return r;
}
}
TestaRetangulo testaRetangulo = new TestaRetangulo ();
assertEquals(testaRetangulo.novo(2,7,6,1).calculaArea(), 24);
assertEquals(testaRetangulo.novo(2,5,6,-1).calculaArea(), 24);
assertEquals(testaRetangulo.novo(-3,5,1,-1).calculaArea(), 24);
assertEquals(testaRetangulo.novo(0,10,10,0).calculaArea(), 100);
assertEquals(testaRetangulo.novo(-3,4,0,3).calculaArea(), 3);
assertEquals(testaRetangulo.novo(2,7,6,1).calculaPerimetro(), 20);
assertEquals(testaRetangulo.novo(2,5,6,-1).calculaPerimetro(), 20);
assertEquals(testaRetangulo.novo(-3,5,1,-1).calculaPerimetro(), 20);
assertEquals(testaRetangulo.novo(0,10,10,0).calculaPerimetro(), 40);
assertEquals(testaRetangulo.novo(-3,4,0,3).calculaPerimetro(), 8);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,1,1,0)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(3,1,5,-1)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,17,6,10)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(6,5,8,1)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(6,1,9,-4)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,10,5,7)), null);
// Testa com ele mesmo
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,6,1)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,6,1)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,6,1)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,6,1)).getY2(), 1);
// Testa com 4,5,10,-1
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,5,10,-1)).getX1(), 4);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,5,10,-1)).getY1(), 5);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,5,10,-1)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,5,10,-1)).getY2(), 1);
// Testa com 0,7,10,5
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,10,5)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,10,5)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,10,5)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,10,5)).getY2(), 5);
// Testa com 4,6,5,3
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,6,5,3)).getX1(), 4);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,6,5,3)).getY1(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,6,5,3)).getX2(), 5);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,6,5,3)).getY2(), 3);
assertEquals(testaRetangulo.novo(2,7,6,1).calculaAreaIntecessao(testaRetangulo.novo(4,6,5,3)), 3);
// Testa com (2,7,3,6)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,3,6)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,3,6)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,3,6)).getX2(), 3);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,3,6)).getY2(), 6);
// Testa com (4,9,5,-1)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,9,5,-1)).getX1(), 4);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,9,5,-1)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,9,5,-1)).getX2(), 5);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,9,5,-1)).getY2(), 1);
// Testa com (0,6,9,3)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,6,9,3)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,6,9,3)).getY1(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,6,9,3)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,6,9,3)).getY2(), 3);
// Testa com (5,9,7,-2)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(5,9,7,-2)).getX1(), 5);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(5,9,7,-2)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(5,9,7,-2)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(5,9,7,-2)).getY2(), 1);
// Testa com (0,7,9,3)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,9,3)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,9,3)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,9,3)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,9,3)).getY2(), 3);
// Testa com (1,8,7,0)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,8,7,0)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,8,7,0)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,8,7,0)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,8,7,0)).getY2(), 1);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(92, 'Faça a classe ContaRestaurante com os seguintes métodos:<BR>
void acrescentaPedido(double valor) // acrescenta um novo pedido à mesma conta<BR>
double calculaValorTotal() // retorna o valor a pagar, já embutindo o valor dos 10% do garçom<BR>
double calculaValorPorPessoa(int numPessoas) // retorna o valor que cada pessoa deve pagar<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(92,'    ContaRestaurante conta = new ContaRestaurante();

   assertEquals(conta.calculaValorTotal(), 0.0);
   assertEquals(conta.calculaValorPorPessoa(3), 0.0);

   conta.acrescentaPedido(15.00);
   assertEquals(conta.calculaValorTotal(), 16.50);
   assertEquals(conta.calculaValorPorPessoa(2), 8.25);

   conta.acrescentaPedido(28.00);
   assertEquals(conta.calculaValorTotal(), 47.30);
   assertEquals(conta.calculaValorPorPessoa(5), 9.46);

   conta.acrescentaPedido(32.00);
   assertEquals(conta.calculaValorTotal(), 82.50);
   assertEquals(conta.calculaValorPorPessoa(6), 13.75);

   conta.acrescentaPedido(44.00);
   assertEquals(conta.calculaValorTotal(), 130.90);
   assertEquals(conta.calculaValorPorPessoa(11), 11.90);

   conta.acrescentaPedido(35.00);
   assertEquals(conta.calculaValorTotal(), 169.40);
   assertEquals(conta.calculaValorPorPessoa(4), 42.35);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(93, 'Faça uma classe em Java de nome Jogo com os seguintes métodos:
- void comeca() - sorteia um número inteiro de 1 a 100 (o zero não está incluso) e guarda em um atributo. 
- String adivinha(int num) - compara o número passado como parâmetro com o número sorteado. Se for igual, retorne &quot;Você ganhou&quot;. Se for menor, &quot;Seu número é menor&quot; e se for maior &quot;Seu número é maior&quot;. Caso seja a quinta tentativa e o usuário não ganhou, retorne a mensagem &quot;Você perdeu! O número era xxx&quot;, onde xxx é o valor do número sorteado. Após a quinta tentativa, retorne sempre a mensagem anterior.
- int numeroSorteado() - retorna o numero que foi sorteado<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(93,' Jogo jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 1&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 1)&quot;);
// Estora as tentativas
assertEquals(jogo.adivinha(jogo.numeroSorteado()-2), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 2)&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()+2), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 2)&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()-3), &quot;Você perdeu! O número era &quot; + jogo.numeroSorteado(), &quot;Após 5 tentativas era para informar: &#39;Você perdeu! O número era xxx&#39;, onde xxx é o valor do número sorteado&quot;);


// -- Novamente ---
jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 1&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 1&quot;);
// Ganha
assertEquals(jogo.adivinha(jogo.numeroSorteado()), &quot;Você ganhou&quot;, &quot;Testa o número sorteado&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(94, 'Faça uma classe em Java de nome Tabuada com os seguintes métodos:<BR>
- String comeca() - sorteia dois números, x e y, entre 0 a 10 e retorna uma string com a pergunta &quot;Quanto é x * y&#63;&#39;&quot;. Por exemplo, se forem sorteados 3 e 5, deve retornar &quot;Quanto é 3 * 5&#63;&quot;<BR>
- int getX() - retorna o valor de x<BR>
- int getY() - retorna o valor de y<BR>
- String adivinha(int num) - compara o número passado como parâmetro com a resposta. Se for igual, retorne &quot;Você acertou&quot;. Se for menor, &quot;Seu número é menor&quot; e se for maior &quot;Seu número é maior&quot;.<BR>

', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(94,' Tabuada tabuada = new Tabuada();
boolean[] valoresX = new boolean[11];
boolean[] valoresY = new boolean[11];

for (int i = 0; i < 11; i++) valoresX[i] = false;
for (int i = 0; i < 11; i++) valoresY[i] = false;

for (int i = 0; i < 100; i++) {
	String pergunta = tabuada.comeca();
	assertEquals(tabuada.getX() >=0 && tabuada.getX() <= 10, true, &quot;O número sorteado (X) deve estar entre 0 e 10&quot;);
	assertEquals(tabuada.getY() >=0 && tabuada.getY() <= 10, true, &quot;O número sorteado (Y) deve estar entre 0 e 10&quot;);
	valoresX[tabuada.getX()] = true;
	valoresY[tabuada.getY()] = true;
	assertEquals(pergunta, &quot;Quanto é &quot;+tabuada.getX()+&quot; * &quot;+tabuada.getY()+&quot;&#63;&quot;, &quot;Pergunta no formato incorreto&quot;);
	assertEquals(tabuada.adivinha(tabuada.getX()*tabuada.getY()), &quot;Você acertou&quot;, pergunta + &quot; com adivinha &quot;+(tabuada.getX()*tabuada.getY()));
	assertEquals(tabuada.adivinha(tabuada.getX()*tabuada.getY()-1), &quot;Seu número é menor&quot;, pergunta + &quot; com adivinha &quot;+(tabuada.getX()*tabuada.getY()-1));
	assertEquals(tabuada.adivinha(tabuada.getX()*tabuada.getY()+1), &quot;Seu número é maior&quot;, pergunta + &quot; com adivinha &quot;+(tabuada.getX()*tabuada.getY()+1));
}

for (int i = 0; i <= 10; i++) {
	assertEquals(valoresX[i], true, &quot;O valor &quot;+i+&quot; nunca saiu para x.&quot;);
	assertEquals(valoresY[i], true, &quot;O valor &quot;+i+&quot; nunca saiu para y.&quot;);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(95, 'Escreva uma classe FormataData, com o método: <BR>
- String formata(int num) - que recebe um número de 8 algarismos contendo a data (ddmmaaaa) e retorne uma String com dd/mm/aaaa.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(95,' FormataData formataData = new FormataData();
assertEquals(formataData.formata(11021999),&quot;11/02/1999&quot;);
assertEquals(formataData.formata(31122005),&quot;31/12/2005&quot;);
assertEquals(formataData.formata(11012001),&quot;11/01/2001&quot;);
assertEquals(formataData.formata(12032000),&quot;12/03/2000&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(96, 'Faça uma classe Calcula, com o método seno, que recebe o valor do ângulo em graus (double) e retorne uma String: Seno de xx = yyyy, onde yyyy é arredondado para duas casas decimais. Por exemplo, calcula.seno(30.0) retorna &quot;Seno de 30.0 = 0.5&quot;', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(96,' Calcula calcula = new Calcula();
assertEquals(calcula.seno(30.0),&quot;Seno de 30.0 = 0.5&quot;);
for (double i = 0.0; i < 360; i++) {
  double angulo = i * Math.PI / 180;
  double seno = Math.sin(angulo);
  seno = Math.round(seno*100)/100.0;
  String mensagem = &quot;Seno de &quot;+i+&quot; = &quot;+seno;
  assertEquals(calcula.seno(i),mensagem);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(97, 'Escreva o código da classe Lâmpada. Esta classe deve ter os seguintes métodos. 
- click() ? ao chamar este método, a lâmpada é colocada no estado &quot;apagada&quot; caso esteja no estado &quot;acesa&quot; ou &quot;acesa&quot; caso esteja &quot;apagada&quot;.
- qtdeAcendimentos() ? retorna a quantidade de vezes que a lâmpada foi colocada no estado &quot;acesa&quot;.
- estado() ? retorna uma string contendo o estado atual da lâmpada (&quot;acesa&quot; ou &quot;apagada&quot;).
OBS: O estado inicial da lâmpada é &quot;apagada&quot;.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(97,' // Teste
Lâmpada lamp = new Lâmpada();

assertEquals(lamp.estado(),&quot;apagada&quot;);
lamp.click();
assertEquals(lamp.estado(),&quot;acesa&quot;);
lamp.click();
lamp.click();
lamp.click();
assertEquals(lamp.qtdeAcendimentos(),2);
lamp.click();
assertEquals(lamp.estado(),&quot;acesa&quot;);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(98, 'Escreva a classe Complexo que represente um número complexo, utilizando dois atributos de nomes parteReal e parteImag do tipo double, que representam respectivamente a parte real e a parte imaginária do número complexo. A classe deverá ter os seguintes métodos: 
- inicializaNúmero, que recebe dois valores como argumentos para inicializar os campos da classe (parte real e imaginária); 
- soma, que recebe outro objeto da classe Complexo e soma este número complexo com o representado pelo objeto em questão usando a fórmula (a+bi)+(c+di) = (a+c)+(b+d)i;
- multiplica, que recebe outro objeto da classe Complexo e multiplica este número complexo com o representado pelo objeto em questão usando a fórmula (a+bi)*(c+di) = (ac&#8722;bd)+(ad+bc)i;
- paraString, que deve retornar uma String contendo o número complexo seguindo a notação a+bi onde a é a parte real e b a imaginária; ', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(98,' Complexo comp1 = new Complexo();
Complexo comp2 = new Complexo();

comp1.inicializaNúmero(2.0,5.0);
assertEquals(comp1.parteReal, 2.0);
assertEquals(comp1.parteImag, 5.0);
comp2.inicializaNúmero(3.0,7.0);
assertEquals(comp2.parteReal, 3.0);
assertEquals(comp2.parteImag, 7.0);
comp1.soma(comp2);
assertEquals(comp1.parteReal, 5.0);
assertEquals(comp1.parteImag, 12.0);
comp1.multiplica(comp2);
assertEquals(comp1.parteReal, 15.0);
assertEquals(comp1.parteImag, 84.0);
String str = comp1.paraString();', 'java');
insert into Questao (id, enunciado, disciplina_id) values(99, 'Faça uma classe de nome Jogo com os seguintes métodos
- void comeca() ? sorteia um número inteiro de 1 a 100 (o zero não está incluído) e guarda em um atributo. 
- String adivinha(int num) ? compara o número passado como parâmetro com o número sorteado. Se for igual, retorne &quot;Você ganhou&quot;. Se for menor, &quot;Seu número é menor&quot; e se for maior &quot;Seu número é maior&quot;. Caso seja a quinta tentativa e o usuário não ganhou, retorne a mensagem &quot;Você perdeu! O número era xxx&quot;, onde xxx é o valor do número sorteado. 
- String dica() ? Retorna se o número é par ou é ímpar.
int numeroSorteado() - retorna o numero que foi sorteado 
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(99,' Jogo jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 1&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 1)&quot;);
// Estora as tentativas
assertEquals(jogo.adivinha(jogo.numeroSorteado()-2), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 2)&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()+2), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 2)&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()-3), &quot;Você perdeu! O número era &quot; + jogo.numeroSorteado(), &quot;Após 5 tentativas era para informar: &#39;Você perdeu! O número era xxx&#39;, onde xxx é o valor do número sorteado&quot;);


// -- Novamente ---
jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 1&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 1&quot;);
// Ganha
assertEquals(jogo.adivinha(jogo.numeroSorteado()), &quot;Você ganhou&quot;, &quot;Testa o número sorteado&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(100, 'Escreva a classe Ponto que recebe as coordenadas x e y de um ponto nos eixos cartesianos através do construtor. 
- Crie o método éPróximo que recebe uma outra instância da classe Ponto e um limiar (valor do tipo double) como argumentos e retorne o valor booleano true se a distância for menor do que o limiar passado como argumento ou false caso contrário. Por exemplo, se o ponto tem as coordenadas (3,3) e o outro objeto passado como argumento tem (4,1) e o limiar for 3.0, o método deve retornar true já que a distância entre os dois pontos (2.24) é menor do que o limiar. Se o limiar fosse 2.0, o método deveria retornar false.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(100,' Ponto pto1 = new Ponto(2,5);
Ponto pto2 = new Ponto(4,7);

assertEquals(pto1.éProximo(pto2,3.0),true);
assertEquals(pto1.éProximo(pto2,2.5),false);
Ponto pto2 = new Ponto(2,5);
assertEquals(pto1.éProximo(pto2,1),true);

Ponto pto2 = new Ponto(2,6);
assertEquals(pto1.éProximo(pto2,1),false);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(101, 'Dada a classe Pessoa: 
class Pessoa {
String nome;
String sexo;
double idade;
boolean vegetariana;

String getNome() {return nome;}
void setNome(String nome) {this.nome = nome;}
String getSexo() {return sexo;}
void setSexo(String sexo) {this.sexo = sexo;}
double getIdade() {return idade;}
void setIdade(double idade) {this.idade = idade;}
boolean isVegetariana() {return vegetariana;}
void setVegetariana(boolean vegetariana) { this.vegetariana = vegetariana;}
}
Faça uma classe Churrasco, com as seguintes operações:
void defineConsumo(String sexo, double qtdeCarne) ? define o consumo médio de pessoas do sexo masculino ou feminino.
void adiciona(Pessoa p) ? atualiza a quantidade carne a comprar. Pessoas de 0 a 3 anos não consomem carne. Pessoas vegetarianas também não. Pessoas de 4 a 12 anos consumem 50% do valor normal de consumo. Pessoas de 13 anos em diante, consumo normal.
double qtdeCarne() ? retorna a quantidade de carne a ser consumida no churrasco
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(101,' Pessoa p1 = new Pessoa();
Pessoa p2 = new Pessoa();
Pessoa p3 = new Pessoa();
Pessoa p4 = new Pessoa();
Churrasco c = new Churrasco();

p1.setSexo(&quot;MASCULINO&quot;);
p2.setSexo(&quot;MASCULINO&quot;);
p3.setSexo(&quot;FEMININO&quot;);
p4.setSexo(&quot;FEMININO&quot;);

p1.setIdade(2);
p2.setIdade(18);
p3.setIdade(10);
p4.setIdade(20);

p1.setVegetariana(false);
p2.setVegetariana(false);
p3.setVegetariana(true);
p4.setVegetariana(false);

c.defineConsumo(&quot;MASCULINO&quot;, 1);
c.defineConsumo(&quot;FEMININO&quot;, 0.4);
assertEquals(c1.qtdeCarne(),0);
c1.adiciona(p1);
assertEquals(c1.qtdeCarne(),0);
c1.adiciona(p2);
assertEquals(c1.qtdeCarne(),1);
c1.adiciona(p3);
assertEquals(c1.qtdeCarne(),1);
c1.adiciona(p4);
assertEquals(c1.qtdeCarne(),1.4);
p1.setIdade(11);
c.adiciona(p1);
assertEquals(c1.qtdeCarne(),1.9);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(102, 'Escreva o código da classe Lampada. Esta classe deve ter os seguintes métodos.<BR> 
- click() - ao chamar este método, a lâmpada é colocada no estado &quot;apagada&quot; caso esteja no estado &quot;acesa&quot; ou &quot;acesa&quot; caso esteja &quot;apagada&quot;.<BR>
- qtdeAcendimentos() - retorna a quantidade de vezes que a lâmpada foi colocada no estado &quot;acesa&quot;.<BR>
- estado() - retorna uma string contendo o estado atual da lâmpada (&quot;acesa&quot; ou &quot;apagada&quot;).<BR>
OBS: O estado inicial da lâmpada é &quot;apagada&quot;.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(102,' // Teste
Lampada lamp = new Lampada();

assertEquals(lamp.estado(),&quot;apagada&quot;);
lamp.click();
assertEquals(lamp.estado(),&quot;acesa&quot;);
lamp.click();
lamp.click();
lamp.click();
assertEquals(lamp.qtdeAcendimentos(),2);
lamp.click();
assertEquals(lamp.estado(),&quot;acesa&quot;);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(103, 'Escreva a classe Complexo que represente um número complexo, utilizando dois atributos do tipo double, que representam respectivamente a parte real e a parte imaginária do número complexo. A classe deverá ter os seguintes métodos: <BR>
- inicializaNúmero, que recebe dois valores como argumentos para inicializar os campos da classe (parte real e imaginária);<BR>
- parteReal, que devolve a parte real do número;  <BR>
- parteImag, que devolve a parte Imaginária do número;<BR>
- soma, que recebe outro objeto da classe Complexo e soma este número complexo com o representado pelo objeto em questão usando a fórmula (a+bi)+(c+di) = (a+c)+(b+d)i;<BR>
- multiplica, que recebe outro objeto da classe Complexo e multiplica este número complexo com o representado pelo objeto em questão usando a fórmula (a+bi)*(c+di) = (ac&#8722;bd)+(ad+bc)i;<BR>
- paraString, que deve retornar uma String contendo o número complexo seguindo a notação a+bi onde a é a parte real e b a imaginária; <BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(103,' Complexo comp1 = new Complexo();
Complexo comp2 = new Complexo();

comp1.inicializaNumero(2.0,5.0);
assertEquals(comp1.parteReal(), 2.0);
assertEquals(comp1.parteImag(), 5.0);
comp2.inicializaNumero(3.0,7.0);
assertEquals(comp2.parteReal(), 3.0);
assertEquals(comp2.parteImag(), 7.0);
comp1.soma(comp2);
assertEquals(comp1.parteReal(), 5.0);
assertEquals(comp1.parteImag(), 12.0);
comp1.multiplica(comp2);
assertEquals(comp1.parteReal(), -69.0);
assertEquals(comp1.parteImag(), 71.0);
String str = comp1.paraString();', 'java');
insert into Questao (id, enunciado, disciplina_id) values(104, 'Faça uma classe de nome Jogo com os seguintes métodos:<BR>
- void comeca() - sorteia um número inteiro de 1 a 100 (o zero não está incluído) e guarda em um atributo. <BR>
- String adivinha(int num) - compara o número passado como parâmetro com o número sorteado. Se for igual, retorne &quot;Você ganhou&quot;. Se for menor, &quot;Seu número é menor&quot; e se for maior &quot;Seu número é maior&quot;. Caso seja a quinta tentativa e o usuário não ganhou, retorne a mensagem &quot;Você perdeu! O número era xxx&quot;, onde xxx é o valor do número sorteado. <BR>
- String dica() - Retorna se o número é par ou é ímpar.<BR>
int numeroSorteado() - retorna o numero que foi sorteado.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(104,' Jogo jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 1&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 1)&quot;);
// Estora as tentativas
assertEquals(jogo.adivinha(jogo.numeroSorteado()-2), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 2)&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()+2), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 2)&quot;);
assertEquals(jogo.adivinha(jogo.numeroSorteado()-3), &quot;Você perdeu! O número era &quot; + jogo.numeroSorteado(), &quot;Após 5 tentativas era para informar: &#39;Você perdeu! O número era xxx&#39;, onde xxx é o valor do número sorteado&quot;);


// -- Novamente ---
jogo = new Jogo();
jogo.comeca();
// Menor
assertEquals(jogo.adivinha(jogo.numeroSorteado()-1), &quot;Seu número é menor&quot;, &quot;Testa o número sorteado menos 1&quot;);
// Maior
assertEquals(jogo.adivinha(jogo.numeroSorteado()+1), &quot;Seu número é maior&quot;, &quot;Testa o número sorteado mais 1&quot;);
// Ganha
assertEquals(jogo.adivinha(jogo.numeroSorteado()), &quot;Você ganhou&quot;, &quot;Testa o número sorteado&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(105, 'Escreva a classe Ponto que recebe as coordenadas x e y de um ponto nos eixos cartesianos através do construtor. <BR>
- Crie o método ehProximo que recebe uma outra instância da classe Ponto e um limiar (valor do tipo double) como argumentos e retorne o valor booleano true se a distância for menor do que o limiar passado como argumento ou false caso contrário. Por exemplo, se o ponto tem as coordenadas (3,3) e o outro objeto passado como argumento tem (4,1) e o limiar for 3.0, o método deve retornar true já que a distância entre os dois pontos (2.24) é menor do que o limiar. Se o limiar fosse 2.0, o método deveria retornar false.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(105,' Ponto pto1 = new Ponto(2,5);
Ponto pto2 = new Ponto(4,7);

assertEquals(pto1.ehProximo(pto2,3.0),true);
assertEquals(pto1.ehProximo(pto2,2.5),false);
pto2 = new Ponto(2,5);
assertEquals(pto1.ehProximo(pto2,1),true);

pto2 = new Ponto(2,6);
assertEquals(pto1.ehProximo(pto2,1),false);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(106, 'Dada a classe Pessoa: <BR>
<PRE>
class Pessoa {
   String nome;
   String sexo;
   double idade;
   boolean vegetariana;

   String getNome() {return nome;}
   void setNome(String nome) {this.nome = nome;}
   String getSexo() {return sexo;}
   void setSexo(String sexo) {this.sexo = sexo;}
   double getIdade() {return idade;}
   void setIdade(double idade) {this.idade = idade;}
   boolean isVegetariana() {return vegetariana;}
   void setVegetariana(boolean vegetariana) { this.vegetariana = vegetariana;}
}
</PRE>
<BR>Faça uma classe Churrasco, com as seguintes operações:<BR>
- void defineConsumo(String sexo, double qtdeCarne) - define o consumo médio de pessoas do sexo &quot;masculino&quot; ou &quot;feminino&quot; (essas são as Strings passadas como parâmetro para o método).
- void adiciona(Pessoa p) - atualiza a quantidade carne a comprar. Pessoas de 0 a 3 anos não consomem carne. Pessoas vegetarianas também não. Pessoas de 4 a 12 anos consumem 50% do valor normal de consumo. Pessoas de 13 anos em diante, consumo normal. <BR>
- double qtdeCarne() - retorna a quantidade de carne a ser consumida no churrasco
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(106,' Pessoa p1 = new Pessoa();
Pessoa p2 = new Pessoa();
Pessoa p3 = new Pessoa();
Pessoa p4 = new Pessoa();
Churrasco c = new Churrasco();

p1.setSexo(&quot;masculino&quot;);
p2.setSexo(&quot;masculino&quot;);
p3.setSexo(&quot;feminino&quot;);
p4.setSexo(&quot;feminino&quot;);

p1.setIdade(2);
p2.setIdade(18);
p3.setIdade(10);
p4.setIdade(20);

p1.setVegetariana(false);
p2.setVegetariana(false);
p3.setVegetariana(true);
p4.setVegetariana(false);

c.defineConsumo(&quot;masculino&quot;, 1);
c.defineConsumo(&quot;feminino&quot;, 0.4);
assertEquals(c.qtdeCarne(),0);
c.adiciona(p1);
assertEquals(c.qtdeCarne(),0);
c.adiciona(p2);
assertEquals(c.qtdeCarne(),1);
c.adiciona(p3);
assertEquals(c.qtdeCarne(),1);
c.adiciona(p4);
assertEquals(c.qtdeCarne(),1.4);
p1.setIdade(11);
c.adiciona(p1);
assertEquals(c.qtdeCarne(),1.9);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(107, 'Escreva uma classe Primos, que contem o metodo int somaPrimosAteN(int n), com n>1, que devolve a soma dos numeros primos entre 1 e n.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(107,' Primos p = new Primos();

assertEquals(p.somaPrimosAteN(2),2);
assertEquals(p.somaPrimosAteN(7),17);
assertEquals(p.somaPrimosAteN(50),328);
assertEquals(p.somaPrimosAteN(100),1060);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(108, 'Crie uma classe MudaBase, com os seguintes metodos: int baseDezParaDois ( int num ): Converte um numero n >0 da base decimal para
a base binaria. int mudaDeBase ( int numero ): Faz chamada ao método anterior e devolve o resultado.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(108,' MudaBase m = new MudaBase();

assertEquals(m.mudaDeBase(10),1010);
assertEquals(m.mudaDeBase(20),10100);
assertEquals(m.mudaDeBase(547),1000100011);
assertEquals(m.baseDezParaDois(225),11100001);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(109, 'Escreva uma classe SomaDosDigitos com um método int calculaSoma(int num, int dig), que recebe um numero inteiro num>0 e a quantidade de
digitos do numero dig>0 e devolve a soma dos seus algarismos. Obs: Note que a qtde de digitos poderia ser dispensada.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(109,' SomaDosDigitos s = new SomaDosDigitos();

assertEquals(s.calculaSoma(0,1),0);
assertEquals(s.calculaSoma(547,3),16);
assertEquals(s.calculaSoma(1000,4),1);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(110, 'Crie uma classe MMC com um metodo int determinaMMC( int n1 ,int n2 ) que recebe dos numeros não negativos e devolve o minimo multiplo comum entre eles.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(110,' MMC valor = new MMC();

assertEquals(valor.determinaMMC(7,5),35);
assertEquals(valor.determinaMMC(5,7),35);
assertEquals(valor.determinaMMC(1,20),20);
assertEquals(valor.determinaMMC(100,20),100);
assertEquals(valor.determinaMMC(3,7),21);
assertEquals(valor.determinaMMC(29,37),1073);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(111, '(Conjectura 3n + 1) Aplicando-se uma função específica sobre um número natural qualquer, depois de n passos o seu valor sempre será 1. A
função é:
f(x) = 3x + 1 , se x e ímpar;
f(x) = x/2 , se x e par.
Escreva uma classe Conjectura com o metodo int numeroDePassos( int n ) que devolve o numero de vezes em que a função teve que ser aplicada para
se obter o resultado esperado.
Exemplo:
3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1.
Número de Passos = 7.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(111,' Conjectura c = new Conjectura();

assertEquals(c.numeroDePassos(1),0);
assertEquals(c.numeroDePassos(3),7);
assertEquals(c.numeroDePassos(1024),10);
assertEquals(c.numeroDePassos(120),20);
assertEquals(c.numeroDePassos(37),21);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(112, 'Um número é considerado triângular quando é produto de três naturais consecutivos. Exemplo: 60 = 3 x 4 x 5.
Escreva uma classe Numero com o método boolean ehTriangular( int num ) com num > 0, que recebe um número e devolve true se ele for triangular ou false caso contrário.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(112,' Numeros nm = new Numeros();

assertEquals(nm.ehTriangular(120),true);
assertEquals(nm.ehTriangular(121),false);
assertEquals(nm.ehTriangular(1),false);
assertEquals(nm.ehTriangular(7),false);
assertEquals(nm.ehTriangular(6),true);
assertEquals(nm.ehTriangular(60),true);
assertEquals(nm.ehTriangular(61),false);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(113, 'Escreva uma classe SubNumero com o método boolean ehSubNumero( int num, int sub ) que verifica se sub é um subnúmero de num.
Exemplos: se sub=23 e num=57238, então sub é um subnúmero de num.
Se sub=23 e num=258347, então sub não é um subnúmero de num.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(113,' SubNumero s = new SubNumero();

assertEquals(s.ehSubNumero(52378,23),true);
assertEquals(s.ehSubNumero(52178,23),false);
assertEquals(s.ehSubNumero(53278,23),false);
assertEquals(s.ehSubNumero(100,10),true);
assertEquals(s.ehSubNumero(327,3),true);
assertEquals(s.ehSubNumero(12342123,42),true);
assertEquals(s.ehSubNumero(12342123,17),false);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(114, 'Faça a classe Data com os métodos:<BR>
- void init(int d, int m, int a) - que recebe o dia, o mês e o ano<BR>
- String porExtenso() - que retorna a data por extenso. Ex: &quot;10 de abril de 2008&quot;. Use um array para armazenar os nomes dos meses por extenso.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(114,' Data d = new Data();
d.init(10,04,2008);
assertEquals(d.porExtenso(), &quot;10 de abril de 2008&quot;, &quot;init(10,04,2008)&quot;);
d.init(16,02,2003);
assertEquals(d.porExtenso(), &quot;16 de fevereiro de 2003&quot;, &quot;init(16,02,2003)&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(115, 'Faça uma classe Estatistica com os seguintes métodos:<BR>
- void carregaValor(double n) - armazena um valor<BR>
- double media() - retorna a media aritmética dos valores armazenados<BR>
- double max() - retorna o maior valor entre os armazenados<BR>
- double min() - retorna o menor valor entre os armazenados<BR>
- double amplitude() - retorna a distância entre o menor e o maior valor<BR>
- double mediaGeometrica() - retorna a média geométrica (raiz do produtório dos itens)<BR>
- double mediaHarmonica() - retorna a média harmônica dos valores (inverso da média aritmética dos inversos dos valores)<BR>
- double desvioMedio() - retorna o desvio médio dos valores<BR>
- double desvioPadrao() - retorna o desvio padrão dos valores
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(115,' // Testa
Estatistica e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(3);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.media(), 6.833333333, &quot;media() para (10,5,3,1,10,12)&quot;);
assertEquals(e.max(), 12, &quot;max() para (10,5,3,1,10,12)&quot;);
assertEquals(e.min(), 1, &quot;min() para (10,5,3,1,10,12)&quot;);
assertEquals(e.amplitude(), 11, &quot;amplitude() para (10,5,3,1,10,12)&quot;);
assertEquals(e.mediaGeometrica(), 5.119317722, &quot;mediaGeometrica() para (10,5,3,1,10,12)&quot;);
assertEquals(e.mediaHarmonica(), 3.302752294, &quot;mediaHarmonica() para (10,5,3,1,10,12)&quot;);
assertEquals(e.desvioMedio(), 3.833333333, &quot;desvioMedio() para (10,5,3,1,10,12)&quot;);
assertEquals(e.desvioPadrao(), 4.44597196, &quot;desvioPadrao() para (10,5,3,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.media(), 10.83333333, &quot;media() para (14,14,14,1,10,12)&quot;);
assertEquals(e.max(), 14, &quot;max() para (14,14,14,1,10,12)&quot;);
assertEquals(e.min(), 1, &quot;min() para (14,14,14,1,10,12)&quot;);
assertEquals(e.amplitude(), 13, &quot;amplitude() para (14,14,14,1,10,12)&quot;);
assertEquals(e.mediaGeometrica(), 8.30986992, &quot;mediaGeometrica() para (14,14,14,1,10,12)&quot;);
assertEquals(e.mediaHarmonica(), 4.293015332, &quot;mediaHarmonica() para (14,14,14,1,10,12)&quot;);
assertEquals(e.desvioMedio(), 3.555555556, &quot;desvioMedio() para (14,14,14,1,10,12)&quot;);
assertEquals(e.desvioPadrao(), 5.076087732, &quot;desvioPadrao() para (14,14,14,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
assertEquals(e.media(), 14, &quot;media() para (14,14,14)&quot;);
assertEquals(e.max(), 14, &quot;max() para (14,14,14)&quot;);
assertEquals(e.min(), 14, &quot;min() para (14,14,14)&quot;);
assertEquals(e.amplitude(), 0, &quot;amplitude() para (14,14,14)&quot;);
assertEquals(e.mediaGeometrica(), 14, &quot;mediaGeometrica() para (14,14,14)&quot;);
assertEquals(e.mediaHarmonica(), 14, &quot;mediaHarmonica() para (14,14,14)&quot;);
assertEquals(e.desvioMedio(), 0, &quot;desvioMedio() para (14,14,14)&quot;);
assertEquals(e.desvioPadrao(), 0, &quot;desvioPadrao() para (14,14,14)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(50);
assertEquals(e.media(), 23, &quot;media() para (14,14,14,50)&quot;);
assertEquals(e.max(), 50, &quot;max() para (14,14,14,50)&quot;);
assertEquals(e.min(), 14, &quot;min() para (14,14,14,50)&quot;);
assertEquals(e.amplitude(), 36, &quot;amplitude() para (14,14,14,50)&quot;);
assertEquals(e.mediaGeometrica(), 19.24591342, &quot;mediaGeometrica() para (14,14,14,50)&quot;);
assertEquals(e.mediaHarmonica(), 17.07317073, &quot;mediaHarmonica() para (14,14,14,50)&quot;);
assertEquals(e.desvioMedio(), 13.5, &quot;desvioMedio() para (14,14,14,50)&quot;);
assertEquals(e.desvioPadrao(), 18, &quot;desvioPadrao() para (14,14,14,50)&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(116, 'Acrescente na classe Estatistica os métodos abaixo.<BR>
- double moda() - retorna a moda (o valor que mais apareceu). Se dois ou mais números apareceram a mesma quantidade de vezes, informe o menor deles.<BR>
- double valoresDistintos() - retorna quantos valores diferentes foram armazenados<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(116,' Estatistica e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(3);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.moda(), 10, &quot;moda() para (10,5,3,1,10,12)&quot;);
assertEquals(e.valoresDistintos(), 5, &quot;valoresDistintos() para (10,5,3,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.moda(), 10, &quot;moda() para (10,5,10,1,10,12)&quot;);
assertEquals(e.valoresDistintos(), 4, &quot;valoresDistintos() para (10,5,10,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(5);
assertEquals(e.moda(), 5, &quot;moda() para (10,5,10,5,10,5)&quot;);
assertEquals(e.valoresDistintos(), 2, &quot;valoresDistintos() para (10,5,10,5,10,5)&quot;);

e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(10);
assertEquals(e.moda(), 10, &quot;moda() para (10,5,10,5,10,5,10)&quot;);
assertEquals(e.valoresDistintos(), 2, &quot;valoresDistintos() para (10,5,10,5,10,5,10)&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(117, 'Faça um programa Verificacao com o método boolean verificaCPF(String cpf) que recebe um CPF e diz se ele é válido. A string passada como parâmetro segue o seguinte formato xxx.xxx.xxx-xx onde x são os algarismos do CPF.<BR>
Para validar um número de CPF é preciso fazer uma série de operações matemáticas com os algarismos que compõe o número e comparar com os dígitos verificadores (aqueles que vêm após o traço). Para exemplificar o processo, tomemos o CPF 123.456.789-09. Para fazer a verificação pegamos cada algarismo do número principal e os colocamos numa tabela:<BR>
1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9<BR>
Depois pegamos o primeiro elemento da tabela e multiplicamos por 10, o segundo por 9, o terceiro por 8 e assim por diante, até multiplicar o nono elemento por 2. No nosso exemplo dá:<BR>
10 || 18 || 24 || 28 || 30 || 30 || 28 || 24 || 18<BR>
O próximo passo é somar todas as respostas: 10+18+24+28+30+30+24+18=210<BR>
Em seguida, pega-se o resultado da soma e divide-se por 11, pegando o resto da divisão. No caso, 1. Depois pega-se 11 e subtrai deste número. No exemplo, dá 10. Se o resultado desta subtração for 10 ou 11, o primeiro dígito verificador é 0, caso contrário é o resultado. No exemplo, o dígito é zero. Agora temos que calcular o segundo dígito verificador. Fazemos uma nova tabela, agora incluindo o primeiro digito verificador encontrado:<BR>
1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 0<BR>
Em seguida, multiplicamos a primeira coluna por 11, a segunda por 10, a terceira por 9, e assim por diante, até a décima coluna por 2. No nosso exemplo daria: <BR>
11 || 20 || 27 || 32 || 35 || 36 || 35 || 32 || 27 || 0<BR>
Depois soma-se todos os valores: 11+20+27+32+35+36+35+32+27+0=255. Divide-se esta soma por 11 e pega-se o resto. Neste caso, o resto dá 2. Novamente, subtrai-se 11 deste valor e pega-se o resultado, neste caso 9. Se o resultado for 10 ou 11, o dígito é 0, caso contrário é o próprio resultado, ou seja, 9. Então os dígitos verificadores são 0 e 9, que coincidem com os fornecidos. Então o CPF é válido. O CPF é inválido se os dígitos calculados forem diferentes dos fornecidos. Outros exemplos de CPFs válidos que você pode usar para testar seu programa são 111.222.333-96 e 234.123.678-26, além do seu próprio CPF. Invente uns inválidos para ver se o programa acusa.<BR>
<BR>
<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(117,' Verificacao verificacao = new Verificacao();
assertEquals(verificacao.verificaCPF(&quot;123.456.789-09&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;111.222.333-96&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;234.123.678-26&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;705.939.732-91&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;755.974.032-49&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;553.482.700-91&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;358.494.873-87&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;282.209.271-00&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;600.317.263-05&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;657.442.920-04&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;811.755.404-63&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;554.908.671-91&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;057.923.187-94&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;089.619.107-95&quot;), true);
assertEquals(verificacao.verificaCPF(&quot;719.266.582-72&quot;), true);

assertEquals(verificacao.verificaCPF(&quot;600.317.263-15&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;657.442.920-02&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;811.755.404-33&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;554.908.671-94&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;057.923.187-44&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;089.619.107-55&quot;), false);
assertEquals(verificacao.verificaCPF(&quot;719.266.582-82&quot;), false);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(118, 'Faça um método receber dois array de inteiros e retornar um novo array contendo somente os elementos que aparecem em ambos arrays.<BR>
Classe Conjuntos<BR>
int[] interseção (int[] a, int[] b)
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(118,' 
class Busca {
	boolean buscaNum(int[] a, int v) {
		for (int i = 0; i < a.length; i++) {
			if (a[i] == v) {
				return true;
			}
		}
		return false;
	}
}

Conjuntos conjuntos = new Conjuntos();
Busca busca = new Busca();

int[] a = {2,4,5};
int[] b = {8,4,3};
assertEquals(busca.buscaNum(conjuntos.interseção(a,b), 2), false, &quot;busca 2 em {2,4,5},{8,4,3}&quot;);
assertEquals(busca.buscaNum(conjuntos.interseção(a,b), 4), true, &quot;busca 4 em {2,4,5},{8,4,3}&quot;);
assertEquals(busca.buscaNum(conjuntos.interseção(a,b), 5), false, &quot;busca 5 em {2,4,5},{8,4,3}&quot;);
assertEquals(busca.buscaNum(conjuntos.interseção(a,b), 8), false, &quot;busca 8 em {2,4,5},{8,4,3}&quot;);
assertEquals(busca.buscaNum(conjuntos.interseção(a,b), 3), false, &quot;busca 3 em {2,4,5},{8,4,3}&quot;);

int[] c = {2,4,5};
int[] d = {8,4,3,2};
assertEquals(busca.buscaNum(conjuntos.interseção(c,d), 2), true, &quot;busca 2 em {2,4,5},{8,4,3,2}&quot;);
assertEquals(busca.buscaNum(conjuntos.interseção(c,d), 4), true, &quot;busca 4 em {2,4,5},{8,4,3,2}&quot;);
assertEquals(busca.buscaNum(conjuntos.interseção(c,d), 5), false, &quot;busca 5 em {2,4,5},{8,4,3,2}&quot;);
assertEquals(busca.buscaNum(conjuntos.interseção(c,d), 8), false, &quot;busca 8 em {2,4,5},{8,4,3,2}&quot;);
assertEquals(busca.buscaNum(conjuntos.interseção(c,d), 3), false, &quot;busca 3 em {2,4,5},{8,4,3,2}&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(119, 'Para a classe MetodosDeArray faça o método int[] primos() - retorna um array contendo os 30 primeiros números primos.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(119,' 
class FazTeste {
	String leArray(int[] a) {
		String s = &quot;{&quot;;
		for (int i = 0; i < a.length; i++) {
			s = s + i + &quot;,&quot;;
		}
		s = s + &quot;}&quot;;
		return s;
	}
}
FazTeste teste = new FazTeste();

MetodosDeArray metodoDeArray = new MetodosDeArray();

int[] a = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113};
assertEquals(teste.leArray(metodoDeArray.primos()), teste.leArray(a), &quot;para primos()&quot;);


', 'java');
insert into Questao (id, enunciado, disciplina_id) values(120, 'Para a classe MetodosDeArray faça o método int[] soma(int[] a, int[] b) - retorna um array onde cada elemento é a soma dos elementos correspondentes nos arrays a e b.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(120,' 

class FazTeste {
	String leArray(int[] a) {
		String s = &quot;{&quot;;
		for (int i = 0; i < a.length; i++) {
			s = s + i + &quot;,&quot;;
		}
		s = s + &quot;}&quot;;
		return s;
	}
}
FazTeste teste = new FazTeste();

MetodosDeArray metodoDeArray = new MetodosDeArray();

int[]  a1 = {2,4,5,6,7,8};
int[]  b1 = {2,4,5,2,1,4};
int[]  c1 = {4,8,10,8,8,12};
assertEquals(teste.leArray(metodoDeArray.soma(a1,b1)), teste.leArray(c1), &quot;{2,4,5,6,7,8} + {2,4,5,2,1,4}&quot;);

int[]  a2 = {2};
int[]  b2 = {3};
int[]  c2 = {5};
assertEquals(teste.leArray(metodoDeArray.soma(a2,b2)), teste.leArray(c2), &quot;{2} + {3}&quot;);

int[]  a3 = {0,1};
int[]  b3 = {0,1};
int[]  c3 = {0,2};
assertEquals(teste.leArray(metodoDeArray.soma(a3,b3)), teste.leArray(c3), &quot;{0,1} + {0,1}&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(121, 'Para a classe MetodosDeArray faça o método int menor(int[] a) - retorna o menor valor contido no array a.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(121,' MetodosDeArray metodoDeArray = new MetodosDeArray();

int[] a = {2,4,5,6,7,8};
assertEquals(metodoDeArray.menor(a), 2, &quot;{2,4,5,6,7,8}&quot;);

int[] b = {2,4,5,1,7,8};
assertEquals(metodoDeArray.menor(b), 1, &quot;{2,4,5,1,7,8}&quot;);

int[] c = {2,4,5,1,7,-8};
assertEquals(metodoDeArray.menor(c), -8, &quot;{2,4,5,1,7,-8}&quot;);

int[] d = {2,4,5,1,7,-80};
assertEquals(metodoDeArray.menor(d), -80, &quot;{2,4,5,1,7,-80}&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(122, 'Para a classe MetodosDeArray faça o método boolean temInterseção (int[] a, int[] b) - retorna true caso algum elemento do array a também faça parte do array b.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(122,' MetodosDeArray metodoDeArray = new MetodosDeArray();

int[] a = {2,4,5,6,7,8};
int[] b = {3,9};
assertEquals(metodoDeArray.temInterseção(a,b), false, &quot;{2,4,5,6,7,8}, {3,9}&quot;);

int[] c = {2,4,5,6,7,8};
int[] d = {3,9,9,9,9,9,9,9,9,9,9,9,9,9};
assertEquals(metodoDeArray.temInterseção(c,d), false, &quot;{2,4,5,6,7,8}, {3,9,9,9,9,9,9,9,9,9,9,9,9,9}&quot;);

int[] e = {2,4,5,6,7,8};
int[] f = {3,9,9,9,9,9,9,9,9,9,9,9,9,9,2};
assertEquals(metodoDeArray.temInterseção(e,f), true, &quot;{2,4,5,6,7,8}, {3,9,9,9,9,9,9,9,9,9,9,9,9,9,2}&quot;);

int[] g = {2,4,5,6,7,8};
int[] h = {3,9,4,9,9,9,9,9,9,9,9,9,9,9};
assertEquals(metodoDeArray.temInterseção(g,h), true, &quot;{2,4,5,6,7,8}, {3,9,4,9,9,9,9,9,9,9,9,9,9,9}&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(123, 'Considere um bilhete de loteria instantânea (raspadinha), que contenha seis valores. Se três desses valores forem iguais, o jogador receberá o valor que apareceu repetido, caso contrário receberá zero. Há no máximo um único prêmio por bilhete.  Escreva uma classe Raspadinha em Java que simule os valores da raspadinha com um array de inteiros, e calcule o prêmio para o vencedor. Por exemplo, se o array for (1,5,10,500,5,5), o vencedor deverá receber cinco reais, e se o array for (10,5,10,100,1,5) o vencedor não deverá receber nada. Faça a classe Raspadinha com o método determinaPremio (int[] valores)', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(123,' Raspadinha raspadinha = new Raspadinha();
int[] a = {1,5,10,500,5,5};
assertEquals(raspadinha.determinaPremio(a), 5, &quot;{1,5,10,500,5,5}&quot;);

int[] b = {10,5,10,100,1,5};
raspadinha = new Raspadinha();
assertEquals(raspadinha.determinaPremio(b), 0, &quot;{10,5,10,100,1,5}&quot;);

int[] c = {100,5,10,100,100,5};
raspadinha = new Raspadinha();
assertEquals(raspadinha.determinaPremio(c), 100, &quot;{100,5,10,100,100,5}&quot;);

int[] d = {10,5000,10,5000,100,5000};
raspadinha = new Raspadinha();
assertEquals(raspadinha.determinaPremio(d), 5000, &quot;{10,5000,10,5000,100,5000}&quot;);

int[] e = {10,500,10,5000,100,5000};
raspadinha = new Raspadinha();
assertEquals(raspadinha.determinaPremio(e), 0, &quot;{10,500,10,5000,100,5000}&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(124, 'Faça a classe ContaRestaurante com os seguintes métodos:<BR>
void acrescentaPedido(double valor) // acrescenta um novo pedido à mesma conta<BR>
double calculaValorTotal() // retorna o valor a pagar, já embutindo o valor dos 10% do garçom<BR>
double calculaValorPorPessoa(int numPessoas) // retorna o valor que cada pessoa deve pagar<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(124,'    ContaRestaurante conta = new ContaRestaurante();

   assertEquals(conta.calculaValorTotal(), 0.0);
   assertEquals(conta.calculaValorPorPessoa(3), 0.0);

   conta.acrescentaPedido(15.00);
   assertEquals(conta.calculaValorTotal(), 16.50);
   assertEquals(conta.calculaValorPorPessoa(2), 8.25);

   conta.acrescentaPedido(28.00);
   assertEquals(conta.calculaValorTotal(), 47.30);
   assertEquals(conta.calculaValorPorPessoa(5), 9.46);

   conta.acrescentaPedido(32.00);
   assertEquals(conta.calculaValorTotal(), 82.50);
   assertEquals(conta.calculaValorPorPessoa(6), 13.75);

   conta.acrescentaPedido(44.00);
   assertEquals(conta.calculaValorTotal(), 130.90);
   assertEquals(conta.calculaValorPorPessoa(11), 11.90);

   conta.acrescentaPedido(35.00);
   assertEquals(conta.calculaValorTotal(), 169.40);
   assertEquals(conta.calculaValorPorPessoa(4), 42.35);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(125, 'Ponto pontoMedio(Ponto p) - retorna o ponto médio entre o ponto e o ponto p passado como parâmetro', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(125,' // Teste
class TestaPonto {
   Ponto novo (double x, double y) {
      Ponto n = new Ponto();
      n.init(x,y);
      return n;
   }
}
TestaPonto tp = new TestaPonto();


assertEquals((tp.novo(0,0)).pontoMedio(tp.novo(4,4)).getX(), 2);
assertEquals((tp.novo(0,0)).pontoMedio(tp.novo(4,4)).getY(), 2);

assertEquals((tp.novo(-1,-3)).pontoMedio(tp.novo(1,3)).getX(), 0);
assertEquals((tp.novo(-1,-3)).pontoMedio(tp.novo(1,3)).getY(), 0);

assertEquals((tp.novo(4,7)).pontoMedio(tp.novo(4,3)).getX(), 4);
assertEquals((tp.novo(4,7)).pontoMedio(tp.novo(4,3)).getY(), 5);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(126, 'int quadrante() - retorna em qual quadrante o ponto se localiza', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(126,' // Teste
class TestaPonto {
   Ponto novo (double x, double y) {
      Ponto n = new Ponto();
      n.init(x,y);
      return n;
   }
}
TestaPonto tp = new TestaPonto();



assertEquals((tp.novo(-2,3)).quadrante(), 2);
assertEquals((tp.novo(2,3)).quadrante(), 1);
assertEquals((tp.novo(-2,3)).quadrante(), 2);
assertEquals((tp.novo(-2,-3)).quadrante(), 3);
assertEquals((tp.novo(2,-3)).quadrante(), 4);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(127, 'Um retângulo cujos lados sejam paralelos ao eixo X e ao eixo Y pode ser representado por dois vértices opostos. Assuma que (x1, y1) é o vértice superior esquerdo e (x2, y2) é o vértice inferior direito. Faça uma classe de nome Retangulo com os seguintes métodos:<BR>
void init(Ponto p1, Ponto p2) - que recebe os vértices e inicializa o objeto.<BR>
getX1(), getY1(), getX2(), getY2() - que retornam os valores das coordenadas dos 2 vértices que definem o retângulo<BR>
int calculaPerimetro() - retorna o perímetro do retângulo<BR>
int calculaArea() - retorna a área do retângulo<BR>
Retangulo intercessao(Retangulo r2) - retorna um novo objeto da classe Retangulo que é a intercessão entre o retângulo e o retângulo passado como parâmetro (r2). Retorne null caso não haja intercessão ou a área de intercessão seja igual a zero. <BR>
int calculaAreaIntecessao(Retangulo r2) - retorna a área da interseção entre os dois retângulos.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(127,' // Teste
class TestaRetangulo {
Retangulo novo (int x1, int y1, int x2, int y2) {
	Retangulo r = new Retangulo();
        Ponto p1 = new Ponto();
        p1.init(x1,y1);
        Ponto p2 = new Ponto();
        p2.init(x2,y2);
	r.init(p1, p2);
	return r;
}
}
TestaRetangulo testaRetangulo = new TestaRetangulo ();
assertEquals(testaRetangulo.novo(2,7,6,1).calculaArea(), 24);
assertEquals(testaRetangulo.novo(2,5,6,-1).calculaArea(), 24);
assertEquals(testaRetangulo.novo(-3,5,1,-1).calculaArea(), 24);
assertEquals(testaRetangulo.novo(0,10,10,0).calculaArea(), 100);
assertEquals(testaRetangulo.novo(-3,4,0,3).calculaArea(), 3);
assertEquals(testaRetangulo.novo(2,7,6,1).calculaPerimetro(), 20);
assertEquals(testaRetangulo.novo(2,5,6,-1).calculaPerimetro(), 20);
assertEquals(testaRetangulo.novo(-3,5,1,-1).calculaPerimetro(), 20);
assertEquals(testaRetangulo.novo(0,10,10,0).calculaPerimetro(), 40);
assertEquals(testaRetangulo.novo(-3,4,0,3).calculaPerimetro(), 8);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,1,1,0)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(3,1,5,-1)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,17,6,10)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(6,5,8,1)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(6,1,9,-4)), null);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,10,5,7)), null);
// Testa com ele mesmo
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,6,1)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,6,1)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,6,1)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,6,1)).getY2(), 1);
// Testa com 4,5,10,-1
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,5,10,-1)).getX1(), 4);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,5,10,-1)).getY1(), 5);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,5,10,-1)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,5,10,-1)).getY2(), 1);
// Testa com 0,7,10,5
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,10,5)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,10,5)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,10,5)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,10,5)).getY2(), 5);
// Testa com 4,6,5,3
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,6,5,3)).getX1(), 4);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,6,5,3)).getY1(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,6,5,3)).getX2(), 5);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,6,5,3)).getY2(), 3);
assertEquals(testaRetangulo.novo(2,7,6,1).calculaAreaIntecessao(testaRetangulo.novo(4,6,5,3)), 3);
// Testa com (2,7,3,6)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,3,6)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,3,6)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,3,6)).getX2(), 3);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(2,7,3,6)).getY2(), 6);
// Testa com (4,9,5,-1)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,9,5,-1)).getX1(), 4);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,9,5,-1)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,9,5,-1)).getX2(), 5);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(4,9,5,-1)).getY2(), 1);
// Testa com (0,6,9,3)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,6,9,3)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,6,9,3)).getY1(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,6,9,3)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,6,9,3)).getY2(), 3);
// Testa com (5,9,7,-2)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(5,9,7,-2)).getX1(), 5);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(5,9,7,-2)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(5,9,7,-2)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(5,9,7,-2)).getY2(), 1);
// Testa com (0,7,9,3)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,9,3)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,9,3)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,9,3)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(0,7,9,3)).getY2(), 3);
// Testa com (1,8,7,0)
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,8,7,0)).getX1(), 2);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,8,7,0)).getY1(), 7);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,8,7,0)).getX2(), 6);
assertEquals(testaRetangulo.novo(2,7,6,1).intercessao(testaRetangulo.novo(1,8,7,0)).getY2(), 1);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(128, 'Dada a classe Movimentacao:
<PRE>
class Movimentacao {
	double valor;
	int tipo; // 0 para retiradas e 1 para depósito
	void init (int v, int t) {
		valor = v; tipo = t;
	}
	double getValor() { 
		return valor;
	}
	int getTipo() {
		return tipo;
	}
}
</PRE>
Faça uma classe ContaCorrente, como as seguintes operações:
<LI>void aplicaJuros(double taxa) - caso o saldo esteja negativo, debita o valor do juros. A taxa é dada em porcentagem. Por exemplo, se o juros for de 1%, a taxa é 0.01
<LI>void movimenta(Movimentacao m) - recebe uma movimentação e atualiza o saldo
<LI>double getSaldo() - retorna o valor do saldo da conta<BR>
OBS: Para a sua resposta compilar no programa de teste, coloque também o código da classe dada como parte da resposta.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(128,' class Conta {
	ContaCorrente cc = new ContaCorrente();
	Conta movimenta (int x, int y) {
		Movimentacao mov = new Movimentacao();
		mov.init(x,y);
		cc.movimenta(mov);
		return this;
	}
	Conta aplicaJuros(double taxa) {
		cc.aplicaJuros(taxa);
		return this;
	}
	double getSaldo() {
		return cc.getSaldo();
	}
}
			
assertEquals((new Conta()).movimenta(200,0).getSaldo(),-200, &quot;Saque de 200 reais&quot;);
assertEquals((new Conta()).movimenta(200,0).movimenta(300,1).getSaldo(),100, &quot;Saque de 200 reais; Depósito de 300 reais&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.01).getSaldo(),-202, &quot;Saque de 200 reais; Aplicação de 1% de juros&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.1).getSaldo(),-220, &quot;Saque de 200 reais; Aplicação de 10% de juros&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.1).movimenta(200,1).getSaldo(),-20, &quot;Saque de 200 reais; Aplicação de 10% de juros; Depósito de 200 reais&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(129, 'Acrescente na classe Retangulo um método:<BR>
<LI>Ponto centro() - retorna o ponto correspondente ao centro do retângulo<BR>
(lembre-se de colocar o código da classe Ponto dado anteriormente na resposta para o programa funcionar)', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(129,' class Retang {
	Retangulo ret;
	Retang(double x1, double y1, double x2, double y2) {
		ret = new Retangulo();
		Ponto a = new Ponto();
		a.init(x1,y1);
		Ponto b = new Ponto();
		b.init(x2,y2);
		ret.init(a,b);
	}
	Ponto centro() {
		return ret.centro();
	}
	double calculaArea() {
		return ret.calculaArea();
	}
}

assertEquals((new Retang(0,2,2,0)).centro().getX(),1,   &quot;Coordenada X do centro do retângulo (0,2),(2,0)&quot;); 
assertEquals((new Retang(0,2,2,0)).centro().getY(),1,   &quot;Coordenada Y do centro do retângulo (0,2),(2,0)&quot;); 
assertEquals((new Retang(-1,2,1,-2)).centro().getX(),0, &quot;Coordenada X do centro do retângulo (-1,2),(1,-2)&quot;); 
assertEquals((new Retang(-1,2,1,-2)).centro().getY(),0, &quot;Coordenada Y do centro do retângulo (-1,2),(1,-2)&quot;); 
assertEquals((new Retang(1,3,2,2)).centro().getX(),1.5, &quot;Coordenada X do centro do retângulo (1,3),(2,2)&quot;); 
assertEquals((new Retang(1,3,2,2)).centro().getY(),2.5, &quot;Coordenada Y do centro do retângulo (1,3),(2,2)&quot;); 
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(130, 'Escreva uma classe Primos, com o método      boolean ehPrimo (int n) que retorna true se e somente se n é primo.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(130,' // Teste
Primos p = new Primos();
assertEquals(p.ehPrimo(2), true);
assertEquals(p.ehPrimo(3), true);
assertEquals(p.ehPrimo(4), false);
assertEquals(p.ehPrimo(5), true);
assertEquals(p.ehPrimo(131), true);
assertEquals(p.ehPrimo(132), false);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(131, 'Escreva uma classe Produtoria, com o método<BR>
      int produtoria (int a, int b)<BR>
   que devolve a produtória de i, com i variando entre a e b, ou seja, a * (a+1) * (a+2) * ... * b. Você pode considerar 0 < a < b<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(131,' // Teste
Produtoria p = new Produtoria();
assertEquals(p.produtoria(4, 7), 840);
assertEquals(p.produtoria(13, 14), 182);
assertEquals(p.produtoria(17, 19), 5814);
assertEquals(p.produtoria(1, 7), 5040);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(132, ' O matemático John Wallis desenvolveu uma série infinita em 1655 para calcular o valor de PI. <BR>
PI = 2 * ( 2/1 * 2/3 * 4/3 * 4/5 * 6/5 * 6/7 * 8/7 * 8/9 * 10/9 * 10/11 * 12/11 * 12/13 * 14/13 * 14/15 * (...))<BR>
<BR>
Faça uma classe Calcula com o método calculaPI  para calcular o valor de PI usando esta série. Utilize 1000 iterações para obter o valor.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(132,' Calcula calcula = new Calcula();
assertEquals(calcula.calculaPI(), 3.1400238186006);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(133, 'Fazer um jogo da forca. Faça uma classe Forca com os métodos:<BR>
- void comeca(String palavra) - começa o jogo com a palavra fornecida como parâmetro<BR>
- void configuraNumeroMaximoDeErros(int n) - define quantos erros o usuário pode ter antes de acertar a palavra<BR>
- String fazTentativa(char letra) - recebe uma letra como parâmetro. Caso a letra não pertença à palavra e esgotou a quantidade de erros máxima, retorne &quot;Você perdeu. A palavra era xxxx.&quot;, onde xxxx é a palavra secreta. Caso ainda tenha chances, retorne &quot;Letra não faz parte, tente novamente.&quot;. Caso tenho acertado todas as letras, retorne &quot;Você ganhou&quot;. Caso ainda faltem letras a serem adivinhadas, retorne a palavra substituindo as letras não adivinhadas por *. Por exemplo:<BR>
Forca forca = new Forca();<BR>
forca.comeca(&quot;Macaco&quot;);<BR>
forca.configuraNumeroMaximoDeErros(2);<BR>
forca.fazTentativa(&#39;a&#39;); // retorna &quot;*a*a**&quot;<BR>
forca.fazTentativa(&#39;e&#39;); // retorna &quot;Letra não faz parte, tente novamente.&quot;<BR>
forca.fazTentativa(&#39;c&#39;); // retorna &quot;*acac*&quot;<BR>
forca.fazTentativa(&#39;d&#39;); // retorna &quot;Letra não faz parte, tente novamente.&quot;<BR>
forca.fazTentativa(&#39;i&#39;); // retorna &quot;Você perdeu. A palavra era macaco.&quot;<BR>
<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(133,' Forca forca = new Forca();
String str = &quot;sequência &quot;;
str += &quot;comeca(&quot;macaco&quot;)&quot;;
forca.comeca(&quot;macaco&quot;);

str += &quot;;configuraNumeroMaximoDeErros(2)&quot;;
forca.configuraNumeroMaximoDeErros(2);

str += &quot;;fazTentativa(&#39;a&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;a&#39;), &quot;*a*a**&quot;, str); 
str += &quot;;fazTentativa(&#39;e&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;e&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;c&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;c&#39;), &quot;*acac*&quot;, str); 
str += &quot;;fazTentativa(&#39;d&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;d&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;i&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;i&#39;), &quot;Você perdeu. A palavra era macaco.&quot;, str); 

forca = new Forca();
str = &quot;sequência &quot;;
str += &quot;comeca(&quot;paralelo&quot;)&quot;;
forca.comeca(&quot;paralelo&quot;);

str += &quot;;configuraNumeroMaximoDeErros(3)&quot;;
forca.configuraNumeroMaximoDeErros(3);

str += &quot;;fazTentativa(&#39;x&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;x&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;l&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;l&#39;), &quot;****l*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;d&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;d&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;r&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;r&#39;), &quot;**r*l*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;a&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;a&#39;), &quot;*aral*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;e&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;e&#39;), &quot;*aralel*&quot;, str); 
str += &quot;;fazTentativa(&#39;o&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;o&#39;), &quot;*aralelo&quot;, str); 
str += &quot;;fazTentativa(&#39;p&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;p&#39;), &quot;Você ganhou&quot;, str); 
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(134, 'Faça uma classe Desenho com um método String quadrado(int n, char c) que retorne uma string contendo n linhas com n caracteres c. Por exemplo,<BR>
desenho.quadrado(4, &#39;*&#39;); retorna uma String contendo:<BR>
****<BR>
****<BR>
****<BR>
****<BR>
OBS: Para saltar linha dentro de uma String, basta concatenar com &quot;
&quot;. Por exemplo, &quot;Teste 1&quot;+&quot;
&quot;+&quot;Teste 2&quot; vai ser uma String desta forma:<BR>
Teste 1<BR>
Teste 2<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(134,' Desenho d = new Desenho();
assertEquals(d.quadrado(4, &#39;*&#39;),&quot;****&quot;+&quot; &quot;+&quot;****&quot;+&quot; &quot;+&quot;****&quot;+&quot; &quot;+&quot;****&quot;);
assertEquals(d.quadrado(2, &#39;*&#39;), &quot;**&quot;+&quot; &quot;+&quot;**&quot;);
assertEquals(d.quadrado(5, &#39;*&#39;), &quot;*****&quot;+&quot; &quot;+
&quot;*****&quot;+&quot; &quot;+&quot;*****&quot;+&quot; &quot;+&quot;*****&quot;+&quot; &quot;+&quot;*****&quot;);
assertEquals(d.quadrado(2, &#39;$&#39;), &quot;$$&quot;+&quot; &quot;+&quot;$$&quot;);
assertEquals(d.quadrado(3, &#39;1&#39;), &quot;111&quot;+&quot; &quot;+&quot;111&quot;+&quot; &quot;+&quot;111&quot;);
assertEquals(d.quadrado(0, &#39;%&#39;), &quot;&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(135, 'Escreva a classe Palavra com os seguintes métodos:<BR>
- int contaVogais(String palavra) - retorna a quantidade de vogais da palavra<BR>
- String inverte(String palavra) - retorna a palavra digitada de trás para frente
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(135,' Palavra palavra = new Palavra();
assertEquals(palavra.contaVogais(&quot;macaco&quot;), 3);
assertEquals(palavra.contaVogais(&quot;chove&quot;), 2);
assertEquals(palavra.contaVogais(&quot;remar&quot;), 2);
assertEquals(palavra.contaVogais(&quot;rosbife&quot;), 3);
assertEquals(palavra.inverte(&quot;remar&quot;), &quot;ramer&quot;);
assertEquals(palavra.inverte(&quot;jose&quot;), &quot;esoj&quot;);
assertEquals(palavra.inverte(&quot;ovo&quot;), &quot;ovo&quot;);
assertEquals(palavra.inverte(&quot;pedro&quot;), &quot;ordep&quot;);

', 'java');
insert into Questao (id, enunciado, disciplina_id) values(136, 'Faça uma classe MatrizDeMultiplos com os atributos: <BR>
int[][] matriz;<BR>
int multiplo;<BR>
<BR>
E com os métodos:<BR><BR>
void inicializaMatriz( int m, int k ): Inicializa o atributo matriz com dimensão m>1 e o atributo multiplo ;<BR>
void preencherMatriz( int m, int k ):  Faz chamada ao método anterior posteriormente insere na matriz quadrada de dimensão m números múltiplos de k ( a partir de 1 ) de forma que $a11 < a12 < a13 ... < a21 < a22 ... < amm$.<BR>
int getElemento( int lin, int col ): devolve o elemento na posição matriz[lin][col];<br>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(136,' MatrizDeMultiplos mm = new MatrizDeMultiplos();

mm.preencherMatriz(5,7);
assertEquals(mm.getElemento(0,0),7);
assertEquals(mm.getElemento(4,3),168);
mm.preencherMatriz(3,0);
assertEquals(mm.getElemento(2,1),0);
mm.preencherMatriz(10,2);
assertEquals(mm.getElemento(7,5),152);
mm.inicializaMatriz(2,2);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(137, 'Escreva uma classe OperandoMatrizes com o atributo:<BR>
int[][] matriz;<BR><BR>
e os seguintes métodos:<BR><BR>
void inicializaMatriz( int m, int n ): inicializa o atributo matriz com as dimensões mxn;<BR>
void somaMatrizes(int[][] matrizA, int[][] matrizB): Soma as matrizes A e B com coeficientes inteiros, armazenando o resultado no atributo matriz;<BR>
int valorMax(): devolve o maior valor da matriz;<BR>
int valorMin(): devolve o menor valor da matriz.<BR>
int getElemento( int lin, int col ): devolve o elemento na posição matriz[lin][col];<BR>', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(137,' OperandoMatrizes op = new OperandoMatrizes();
op.inicializaMatriz(7,5);

int i = 0;
int j = 0;
int[][] mt0 = { { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0 } };

int[][] mt1 = { { 51, 195, 74, 146, 66 }, { 11, 29, 20, 8, 68 }, { 121, 84, 74, 146, 145 }, { 86, 145, 84, 180, 154 }, { 74, 187, 50, 52, 104 }, { 10, 37, 35, 40, 52 }, { 181, 152, 86, 132, 157 } };

int[][] mt2 = { { 3, 152, 157, 140, 160 }, { 85, 94, 139, 97, 115 }, { 163, 32, 108, 58, 35 }, { 184, 7, 178, 74, 53 }, { 113, 38, 102, 145, 186 }, { 2, 86, 56, 135, 38 }, { 40, 178, 187, 141, 20 } };

int[][] mResul = { { 54, 347, 231, 286, 226 }, { 96, 123, 159, 105, 183 }, { 284, 116, 182, 204, 180 }, { 270, 152, 262, 254, 207 }, { 187, 225, 152, 197, 290 }, { 12, 123, 91, 175, 90 }, { 221, 330, 273, 273, 177 } };

op.somaMatrizes(mt0,mt1);
assertEquals(op.valorMax(),195);
assertEquals(op.valorMin(),8);

op.somaMatrizes(mt2,mt1);
for(i=0;i<op.matriz.length;i++){
for(j=0;j<op.matriz[0].length;j++){
assertEquals(op.getElemento(i,j),mResul[i][j]);
}
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(138, 'Crie uma classe MultMatrizes com o atributo:<br>
int matriz[][];<br><br>
e com os métodos abaixo:<br><br>
boolean verificaDimensoes( int[][] matrizA, int[][] matrizB ): Recebe duas matrizes A e B com coeficientes inteiros e verifica se
a dimensão das colunas de A é igual a dimensão das linhas de B, retornando true nesse caso e false caso contrário;<br>
void multiplicaAporB( int[][] matrizA, int[][] matrizB ): Multiplica as matrizes A e B com coeficientes inteiros, armazenando os resultados no atributo matriz;<BR>
int getElemento( int lin, int col ): devolve o elemento na posição matriz[lin][col];<BR>', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(138,' MultMatrizes mult = new MultMatrizes();

int i = 0;
int j = 0;

int[][] mt1 = { { 17, 190, 82 }, { 45, 81, 45 }, { 197, 39, 11 } };

int[][] mti = { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } };

int[][] mt2 = { { 166, 94, 77, 21 }, { 175, 108, 177, 150 }, { 51, 75, 108, 47 }, { 133, 121, 94, 161 }, { 11, 21, 31, 189 } };

int[][] mt3 = { { 6, 35 }, { 64, 183 }, { 45, 93 }, { 172, 31 } };

int[][] mResul = { { 14089, 30824 }, { 41727, 47000 }, { 18050, 27011 }, { 40464, 40531 }, { 35313, 12970 } };

mult.multiplicaAporB(mt1,mti);
for(i=0;i<mult.matriz.length;i++){
for(j=0;j<mult.matriz[0].length;j++){
assertEquals(mult.getElemento(i,j),mt1[i][j]);
}
}
mult.multiplicaAporB(mti,mt1);
for(i=0;i<mult.matriz.length;i++){
for(j=0;j<mult.matriz[0].length;j++){
assertEquals(mult.getElemento(i,j),mt1[i][j]);
}
}
mult.multiplicaAporB(mt2,mt3);
for(i=0;i<mult.matriz.length;i++){
for(j=0;j<mult.matriz[0].length;j++){
assertEquals(mult.getElemento(i,j),mResul[i][j]);
}
}

assertEquals(mult.verificaDimensoes(mt2,mt3),true);
assertEquals(mult.verificaDimensoes(mt3,mt2),false);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(139, 'Um dos critérios para decidir se uma matriz quadrada é invertível é observar o seu determinante. Elabore uma classe DeterminanteMatriz com os métodos:<br><br>
int determinante(int [][] matriz): Realiza o cálculo de uma matriz quadrada. Considere que a matriz terá NO MÁXIMO dimensão 3 ( ou seja, no máximo 3x3);<br>
boolean ehInvertivel(int [][] matriz): Faz chamada ao método anterior para verifica se a matriz recebida como parâmetro é invertível, baseado no valor do seu determinante.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(139,' DeterminanteMatriz dt = new DeterminanteMatriz();

int[][] mt1 = {{ 0 }};
int[][] mt2 = {{ 1 }};
int[][] mt3 = {{1,2},{3,4}};
int[][] mt4 = {{1,2},{2,4}};
int[][] mt5 = {{1,0,0},{0,1,0},{0,0,1}};
int[][] mt6 = {{1,1,1},{1,1,1},{1,2,1}};

assertEquals(dt.ehInvertivel(mt1),false);
assertEquals(dt.ehInvertivel(mt2),true);
assertEquals(dt.ehInvertivel(mt3),true);
assertEquals(dt.ehInvertivel(mt4),false);
assertEquals(dt.ehInvertivel(mt5),true);
assertEquals(dt.ehInvertivel(mt6),false);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(140, 'Crie uma classe Conversor, com o seguinte método:<br><br>
double celsiusParaFahrenheit( double[][] matrizTemp ): Recebe uma matriz contendo temperaturas em graus Celsius e converte os 
valores para a escala Fahrenheit. Esse método deve retornar a temperatura média dentre as temperaturas, em graus Fahrenheit.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(140,' Conversor cv = new Conversor();

double[][] md1 = {{0.0}};
assertEquals(cv.celsiusParaFahrenheit(md1),32.0);

md1[0][0] = 100.0;
assertEquals(cv.celsiusParaFahrenheit(md1),212.0);

double[][] md2 = { { 12.0, 37.0, 25.0, 42.0 }, { 79.0, 140.0, 37.0, 21.0 }, { 212.0, 0.0, 43.0, 117.0 }, { 182.0, 200.0, 100.0, 123.0 } };
assertEquals(cv.celsiusParaFahrenheit(md2),186.125);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(141, '(Ex. 11.44) Uma matriz é triângular superior se os elementos nas posições (l,c) forem iguais a zero para l > c, onde l é o índice da linha da matriz e c o índice da coluna da matriz. Escreva uma classe MatrizTS com o método:<br><br>
boolean ehTriangularSuperior(int [][] matriz): verifica se uma matriz é triangular superior, retornando true nesse caso e false caso contrário.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(141,' MatrizTS mts = new MatrizTS();

int[][] mt1 = {{1,1},{0,1}};
assertEquals(mts.ehTriangularSuperior(mt1),true);

int[][] mt2 = {{1,0,0},{0,1,0},{0,0,1}};
assertEquals(mts.ehTriangularSuperior(mt2),true);

int[][] mt3 = {{1,0,0},{1,1,0},{1,1,1}};
assertEquals(mts.ehTriangularSuperior(mt3),false);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(142, '(Ex. 11.66) Um quadrado mágico é uma matriz quadrada de valores inteiros onde a soma dos valores em cada linha, coluna ou
diagonal principal é a mesma. Por exemplo, a matriz:<br/>
2 7 6 <br/>
9 5 1 <br/>
4 3 8 <br/>
representa um quadrado mágico (onde não existe repetição de valores e todos estão em seqüência). Escreva uma classe QuadradoMagico que tenha o método: <br><br>
boolean ehQuadradoMagico( int[][] matriz) que retorne true caso a matriz, passada como argumento para o método, represente um quadrado mágico e false caso contrário.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(142,' QuadradoMagico qm = new QuadradoMagico();

int[][] mt1 = {{2,7,6},{9,5,1},{4,3,8}};
int[][] mt2 = {{4,9,2},{3,5,7},{8,1,6}};
int[][] mt3 = {{1,2,3},{4,5,6},{7,8,9}};
int[][] mt4 = {{15,10,3,6},{4,5,16,9},{14,11,2,7},{1,8,13,12}};
int[][] mt5 = {{16,3,2,13},{5,10,11,8},{9,6,7,12},{4,15,14,1}};
int[][] mt6 = {{16,15,14,13},{12,11,10,9},{8,7,6,5},{4,3,2,1}};

assertEquals(qm.ehQuadradoMagico(mt1),true);
assertEquals(qm.ehQuadradoMagico(mt2),true);
assertEquals(qm.ehQuadradoMagico(mt3),false);
assertEquals(qm.ehQuadradoMagico(mt4),true);
assertEquals(qm.ehQuadradoMagico(mt5),true);
assertEquals(qm.ehQuadradoMagico(mt6),false);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(143, '(Ex. 12.56) Escreva uma classe Palavra com um atributo char[][] matriz e os métodos: <br/><br/>
void inicializaMatriz( char[][] matriz): carrega o atributo matriz com o conteúdo da variável matriz recebida como parâmetro; <br/>
int existe( String palavra ) que recebe uma string como argumento e que retorne um valor inteiro.
Uma string existe no array se é possível criar essa string navegando-se na matriz, um caracter de cada vez, sendo que de um caracter só se pode ir para o próximo se este for vizinho do caracter anterior ( um caracter terá no máximo 8 vizinhos ). Se a string for encontrada, o valor retornado será o comprimento da string. Se a string não for encontrada, o valor retornado deverá ser menos
duas vezes o comprimento da string. Por exemplo, se a matriz for a mostrada abaixo, as palavras &quot;TIRO&quot;, &quot;DELTA&quot;, &quot;TALENTO&quot; e &quot;MAJORITARIAMENTE&quot; poderão ser achadas no array, e deverão retornar os valores 4, 5, 7 e 16, respectivamente, mas a palavra &quot;DESPROPORCIONADAMENTE&quot; deverá retornar o valor -42. Você pode considerar que todos os caracteres estarão em maiúsculos.<br/><br/>
Matriz do Exemplo:<br/>
IRO<br/>
TAJ<br/>
LMD<br/>
SEO<br/>
RNI<br/>
OTE<br/>', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(143,' Palavra pl = new Palavra();

char[][] mt1 = {{&#39;D&#39;,&#39;I&#39;,&#39;A&#39;},{&#39;R&#39;,&#39;T&#39;,&#39;B&#39;},{&#39;D&#39;,&#39;A&#39;,&#39;G&#39;},{&#39;U&#39;,&#39;X&#39;,&#39;O&#39;},{&#39;R&#39;,&#39;A&#39;,&#39;N&#39;}};

pl.inicializaMatriz(mt1);

String str = &quot;DRAGON&quot;;
assertEquals(pl.existe(str),6);

str = &quot;DIA&quot;;
assertEquals(pl.existe(str),3);

str = &quot;DITADO&quot;;
assertEquals(pl.existe(str),-12);

str = &quot;DIARISTA&quot;;
assertEquals(pl.existe(str),-16);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(144, 'Comparação', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(144,' int[][] mt1 ={{1,2},{3,4}};
int[][] mt2 ={{1,2},{7,4}};

for(int i=0; i<2; i++){
for(int j=0; j<2; j++){
assertEquals(mt1[i][j],mt2[i][j]);
}
}', 'java');
insert into Questao (id, enunciado, disciplina_id) values(145, 'Os elementos aij de uma matriz inteira Anxn representam os custos de transporte da cidade i para a cidade j. Dado um caminho com n cidades, faça uma classe Transporte com o método int custoTotal (int[][] custos, int[] caminho), para calcular o custo total de um caminho fornecido.Exemplo: <br>
4 1 2 3 <br>
5 2 1 400 <br>
2 1 3 8 <br>
7 1 2 5 <br>
<br>
O custo do caminho 0 3 1 3 2 1 0 é
a03 + a31 + a13 + a32 + a21 + a10 = 3 + 1 + 400 + 2 + 1 + 5 = 412
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(145,' Transporte t = new Transporte();
int[][] custos = {{4,1,2,3},{5,2,1,400},{2,1,3,8},{7,1,2,5}};
int[] caminho1 = {0,3,1,3,2,1,0};
int[] caminho2 = {0,1,2,3,1,3,2};
int[] caminho3 = {0,2,3,1,3,2,0};
int[] caminho4 = {3,1,2,3,0,1,2};

assertEquals(t.custoTotal(custos,caminho1),412);
assertEquals(t.custoTotal(custos,caminho2),413);
assertEquals(t.custoTotal(custos,caminho3),415);
assertEquals(t.custoTotal(custos,caminho4),19);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(146, 'Escreva uma classe Matematica contendo o método double cos (double x, double precisao) que calcula o cosseno de x através da <a href=http://en.wikipedia.org/wiki/Trigonometric_function#Series_definitions target=_blank>Cosseno por Soma em Série de Taylor</a>, até o elemento da sequência ser menor do que a precisão informada.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(146,' Matematica mat = new Matematica();

double pi = 3.141592653589793;
double precisao = 1.0e-8;

assertEquals(mat.cos(0,precisao),1.0);
assertEquals(mat.cos(pi/6,precisao),(Math.sqrt(3)/2));
assertEquals(mat.cos(pi/2,precisao),0.0);
assertEquals(mat.cos(pi,precisao),-1.0);
assertEquals(mat.cos(1.5*pi,precisao),0.0);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(147, 'Dada a classe Retangulo:<br>
class Retangulo {<br>
	int largura, altura;<br>
    	int getLargura() {return largura;}<br>
	int getAltura() {return altura;}<br>
        void setLargura(int larg) {largura = larg;}<br>
	void setAltura(int alt) {altura = alt;}<br>
}<br>
Considere que os retângulos estão espalhados em um plano, cujas posições são identificadas por coordenadas x e y inteiras e maiores do que zero. A posição de um retângulo é defina pelas coordenadas de seu centro. Mais de um retângulo podem estar na mesma posição. Portanto, a matriz Retangulo[][][] rs representa todos os retângulos do plano, onde as linhas da matriz representam as coordenadas x, as colunas, as coordenas y e a terceira dimensão, os retângulos que estão naquela coordenada. Caso não tenha um retângulo na célula da matriz, ela é preenchida por null. 
Faça um método nessa classe int mediaAreas(Retangulo[][][] rs, int x1, int y1, int x2, int y2) que retorna a média das áreas dos retângulos contidos em uma região retangular do plano definida pelas coordenadas x1, y1 que representa o canto superior esquerdo e x2, y2 que representa o canto inferior direito. Para o retângulo ser considerado neste cálculo, seu centro deve estar dentro desta área. ', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(147,' Retangulo rets = new Retangulo();
Retangulo[][][] rs = new Retangulo[3][3][3];

for(int i = 0; i < rs.length; i++){ 
for(int j = 0; j < rs[0].length; j++){
for(int k = 0; k < rs[0][0].length; k++){
rs[i][j][k] = new Retangulo();
}
}
}

rs[0][0][0].setLargura(9);
rs[0][0][0].setAltura(8);
rs[0][0][1].setLargura(4);
rs[0][0][1].setAltura(9);
rs[0][0][2].setLargura(3);
rs[0][0][2].setAltura(6);
rs[0][1][0].setLargura(8);
rs[0][1][0].setAltura(5);
rs[0][1][1].setLargura(5);
rs[0][1][1].setAltura(9);
rs[0][2][0].setLargura(8);
rs[0][2][0].setAltura(3);
rs[0][2][1].setLargura(8);
rs[0][2][1].setAltura(2);
rs[1][0][0].setLargura(2);
rs[1][0][0].setAltura(4);
rs[1][0][1].setLargura(1);
rs[1][0][1].setAltura(5);
rs[1][1][0].setLargura(1);
rs[1][1][0].setAltura(2);
rs[1][1][1].setLargura(6);
rs[1][1][1].setAltura(2);
rs[1][1][2].setLargura(4);
rs[1][1][2].setAltura(6);
rs[1][2][0].setLargura(5);
rs[1][2][0].setAltura(1);
rs[1][2][1].setLargura(7);
rs[1][2][1].setAltura(8);
rs[1][2][2].setLargura(5);
rs[1][2][2].setAltura(6);
rs[2][0][0].setLargura(2);
rs[2][0][0].setAltura(9);
rs[2][0][1].setLargura(1);
rs[2][0][1].setAltura(3);
rs[2][0][2].setLargura(9);
rs[2][0][2].setAltura(9);
rs[2][1][0].setLargura(9);
rs[2][1][0].setAltura(6);
rs[2][1][1].setLargura(2);
rs[2][1][1].setAltura(5);
rs[2][1][2].setLargura(5);
rs[2][1][2].setAltura(3);
rs[2][2][0].setLargura(9);
rs[2][2][0].setAltura(9);
rs[2][2][1].setLargura(3);
rs[2][2][1].setAltura(4);
rs[2][2][2].setLargura(8);
rs[2][2][2].setAltura(2);


assertEquals(rets.mediaAreas(rs,0,3,3,0),25);
assertEquals(rets.mediaAreas(rs,0,2,2,0),25);
assertEquals(rets.mediaAreas(rs,1,2,2,1),26);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(148, 'Escreva uma classe de nome Circulo com os seguintes métodos (considere o valor de PI igual a 3,14159):<BR>
double calculaArea(double raio) <BR>
double calculaPerimetro(double raio) <BR>
double calculaDiametro(double raio) ', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(148,' Circulo circulo = new Circulo();
assertEquals(circulo.calculaArea(0.0),0.0);
assertEquals(circulo.calculaArea(1.0),1.0*1*3.14159);
assertEquals(circulo.calculaArea(1.5),1.5*1.5*3.14159);
assertEquals(circulo.calculaArea(10.0),10*10*3.14159);
assertEquals(circulo.calculaArea(3.0),3*3*3.14159);
assertEquals(circulo.calculaPerimetro(1.5),2*3.14159*1.5);
assertEquals(circulo.calculaPerimetro(2.5),2*3.14159*2.5);
assertEquals(circulo.calculaPerimetro(4.0),2*3.14159*4);
assertEquals(circulo.calculaPerimetro(0.0),2*3.14159*0);
assertEquals(circulo.calculaDiametro(2.0),2.0*2);
assertEquals(circulo.calculaDiametro(0.0),0*2.0);
assertEquals(circulo.calculaDiametro(10.0),10.0*2);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(149, 'Escreva uma classe de nome Quadrado com os seguintes métodos: <BR>
double calculaArea(double lado) <BR>
double calculaPerimetro(double lado)', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(149,' Quadrado quadrado = new Quadrado();
assertEquals(quadrado.calculaArea(0.0),0);
assertEquals(quadrado.calculaArea(1.0),1);
assertEquals(quadrado.calculaArea(1.5),1.5*1.5);
assertEquals(quadrado.calculaArea(10.0),10*10);
assertEquals(quadrado.calculaArea(3.0),3*3);
assertEquals(quadrado.calculaPerimetro(1.5),4*1.5);
assertEquals(quadrado.calculaPerimetro(2.5),4*2.5);
assertEquals(quadrado.calculaPerimetro(4.0),4*4);
assertEquals(quadrado.calculaPerimetro(0.0),4*0);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(150, 'Faça uma classe Calculo (sem acento) com um método chamado raizDaEquacao1Grau que receba dois parâmetros double: a, b e retorne a raiz da equação y = ax + b. (0/60)', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(150,' 	Calculo calculo = new Calculo();

         assertEquals(calculo.raizDaEquacao1Grau(1.0, 0.0), 0.0);		
         assertEquals(calculo.raizDaEquacao1Grau(1.0, -2.0), 2.0);	
         assertEquals(calculo.raizDaEquacao1Grau(5.0, 45.0), -9.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-0.5, 12.0), 24.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-3.5, -14.0), -4.0);	', 'java');
insert into Questao (id, enunciado, disciplina_id) values(151, 'Acrescente na classe anterior um método de nome calculaVolumeLata que receba os valores do raio e da altura em milímetros (mm) e retorne o volume de uma lata de óleo em centímetros cúbicos.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(151,' 	Calculo calculo = new Calculo();

         assertEquals(calculo.raizDaEquacao1Grau(1.0, 0.0), 0.0);		
         assertEquals(calculo.raizDaEquacao1Grau(1.0, -2.0), 2.0);	
         assertEquals(calculo.raizDaEquacao1Grau(5.0, 45.0), -9.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-0.5, 12.0), 24.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-3.5, -14.0), -4.0);	


        assertEquals(calculo.calculaVolumeLata(0.0, 1.0), 0.0);	
        assertEquals(calculo.calculaVolumeLata(5.0, 0.0), 0.0);
        assertEquals(calculo.calculaVolumeLata(0.0, 0.0), 0.0);
        assertEquals(calculo.calculaVolumeLata(50.0, 120.0), Math.PI * 300.0);
        assertEquals(calculo.calculaVolumeLata(100.0, 40.0), Math.PI * 400.0);
        assertEquals(calculo.calculaVolumeLata(60.0, 200.0), Math.PI * 720.0);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(152, 'Acrescente na classe anterior um método arredonda(double valor, int casasDecimais) que retorna o número com o número de casas decimais informado no segundo parâmetro. Ao arredondar números maior ou igual a 5 arredonda para cima, e menor ou igual a 5 para baixo.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(152,' Calculo calculo = new Calculo();

         assertEquals(calculo.raizDaEquacao1Grau(1.0, 0.0), 0.0);		
         assertEquals(calculo.raizDaEquacao1Grau(1.0, -2.0), 2.0);	
         assertEquals(calculo.raizDaEquacao1Grau(5.0, 45.0), -9.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-0.5, 12.0), 24.0);	
         assertEquals(calculo.raizDaEquacao1Grau(-3.5, -14.0), -4.0);	


        assertEquals(calculo.calculaVolumeLata(0.0, 1.0), 0.0);	
        assertEquals(calculo.calculaVolumeLata(5.0, 0.0), 0.0);
        assertEquals(calculo.calculaVolumeLata(0.0, 0.0), 0.0);
        assertEquals(calculo.calculaVolumeLata(50.0, 120.0), Math.PI * 300.0);
        assertEquals(calculo.calculaVolumeLata(100.0, 40.0), Math.PI * 400.0);
        assertEquals(calculo.calculaVolumeLata(60.0, 200.0), Math.PI * 720.0);

        assertEquals(calculo.arredonda(1.123456, 0), 1.0);	
        assertEquals(calculo.arredonda(1.123456, 1), 1.1);	
        assertEquals(calculo.arredonda(1.123456, 2), 1.12);	
        assertEquals(calculo.arredonda(1.123456, 3), 1.123);	
        assertEquals(calculo.arredonda(1.123456, 4), 1.1235);	
        assertEquals(calculo.arredonda(1.123456, 5), 1.12346);	
        assertEquals(calculo.arredonda(1.123456, 6), 1.123456);	
        assertEquals(calculo.arredonda(1.123456, 7), 1.123456);	
        assertEquals(calculo.arredonda(1.123456, 8), 1.123456);	
        assertEquals(calculo.arredonda(1.123456, 9), 1.123456);	
        assertEquals(calculo.arredonda(1.123456, 10), 1.123456);	
        assertEquals(calculo.arredonda(Math.PI, 3), 3.142);	
        assertEquals(calculo.arredonda(Math.PI, 3), 3.1416);	
        assertEquals(calculo.arredonda(Math.PI, 4), 3.14159);	
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(153, 'Acrescente à classe Calculo um método chamado calculaHipotenusa(double cateto1, double cateto2)', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(153,' Calculo calculo = new Calculo();

assertEquals(calculo.calculaHipotenusa (1.0,1.0), Math.sqrt(2));
assertEquals(calculo.calculaHipotenusa (3.0,4.0), 5.0);
assertEquals(calculo.calculaHipotenusa (6.0,8.0), 10.0);
assertEquals(calculo.calculaHipotenusa (6.0,7.0), 9.2195444572928873100022742817628);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(154, 'Acrescente na classe Calculo um método chamado raizCubica que receba um número double e retorne a raiz cúbica desse número.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(154,' Calculo calculo = new Calculo();

assertEquals(calculo.raizCubica (0.0), 0.0);
assertEquals(calculo.raizCubica (1.0), 1.0);
assertEquals(calculo.raizCubica (2.5), 1.3572088082974532857590);
assertEquals(calculo.raizCubica (1000.0), 10.0);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(155, 'Inclua na classe anterior, um método chamado digitoDezena que recebe um número inteiro de 3 dígitos e retorne o dígito das dezenas.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(155,' Calculo calculo = new Calculo();

assertEquals(calculo.digitoDezena  (454), 5);
assertEquals(calculo.digitoDezena  (123), 2);
assertEquals(calculo.digitoDezena  (445), 4);
assertEquals(calculo.digitoDezena  (764), 6);
assertEquals(calculo.digitoDezena  (783), 8);
assertEquals(calculo.digitoDezena  (125), 2);
assertEquals(calculo.digitoDezena  (985), 8);
assertEquals(calculo.digitoDezena  (345), 4);
assertEquals(calculo.digitoDezena  (234), 3);
assertEquals(calculo.digitoDezena  (638), 3);
assertEquals(calculo.digitoDezena  (937), 3);
assertEquals(calculo.digitoDezena  (133), 3);
assertEquals(calculo.digitoDezena  (872), 7);
assertEquals(calculo.digitoDezena  (383), 8);
assertEquals(calculo.digitoDezena  (719), 1);
assertEquals(calculo.digitoDezena  (901), 0);
assertEquals(calculo.digitoDezena  (290), 9);
assertEquals(calculo.digitoDezena  (184), 8);
assertEquals(calculo.digitoDezena  (973), 7);
assertEquals(calculo.digitoDezena  (263), 6);
assertEquals(calculo.digitoDezena  (200), 0);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(156, '(5.1) Escreva uma classe Aluno com um método void carregaNotas(double p1, double p2, double p3, double p4), que carrega as notas de um aluno em quatro provas. Crie um método double media() que devolve a média aritmética das quatro provas, e um método int veredito() que devolve 1 se o aluno tiver sido aprovado (média maior ou igual a 5 ),  0 se o aluno estiver de recuperação (média maior ou igual a 3 e menor que 5) e -1 se o aluno tiver sido reprovado (média menor que 3).', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(156,' Aluno aluno = new Aluno();
aluno.carregaNotas(9.5, 7, 7.5, 8.2);
assertEquals(aluno.media(), 8.05, &quot;Média das notas (9.5, 7, 7.5, 8.2)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (9.5, 7, 7.5, 8.2)&quot;);

aluno.carregaNotas(7.5, 8, 6.7, 8);
assertEquals(aluno.media(), 7.55, &quot;Média das notas (7.5, 8, 6.7, 8)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (7.5, 8, 6.7, 8)&quot;);

aluno.carregaNotas(4.5, 3.5, 2.7, 3.7);
assertEquals(aluno.media(), 3.60, &quot;Média das notas (4.5, 3.5, 2.7, 3.7)&quot;);
assertEquals(aluno.veredito(), 0, &quot;Veredito das notas (4.5, 3.5, 2.7, 3.7)&quot;);

aluno.carregaNotas(3.7, 2.7, 1.8, 3.6);
assertEquals(aluno.media(), 2.95, &quot;Média das notas (3.7, 2.7, 1.8, 3.6)&quot;);
assertEquals(aluno.veredito(), -1, &quot;Veredito das notas (3.7, 2.7, 1.8, 3.6)&quot;);

aluno.carregaNotas(10, 4.5, 3.7, 5.2);
assertEquals(aluno.media(), 5.85, &quot;Média das notas (10, 4.5, 3.7, 5.2)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (10, 4.5, 3.7, 5.2)&quot;);

aluno.carregaNotas(4.8, 5.9, 7.2, 8.5);
assertEquals(aluno.media(), 6.6, &quot;Média das notas (4.8, 5.9, 7.2, 8.5)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (4.8, 5.9, 7.2, 8.5)&quot;);

aluno.carregaNotas(8.5, 8.5, 3, 9);
assertEquals(aluno.media(), 7.25, &quot;Média das notas (8.5, 8.5, 3, 9)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (8.5, 8.5, 3, 9)&quot;);

aluno.carregaNotas(5.9, 10, 6.25, 7.25);
assertEquals(aluno.media(), 7.35, &quot;Média das notas (5.9, 10, 6.25, 7.25)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (5.9, 10, 6.25, 7.25)&quot;);

aluno.carregaNotas(1.25, 2.25, 1.5, 4);
assertEquals(aluno.media(), 2.25, &quot;Média das notas (1.25, 2.25, 1.5, 4)&quot;);
assertEquals(aluno.veredito(), -1, &quot;Veredito das notas (1.25, 2.25, 1.5, 4)&quot;);

aluno.carregaNotas(5, 1, 0, 4.5);
assertEquals(aluno.media(), 2.625, &quot;Média das notas (5, 1, 0, 4.5)&quot;);
assertEquals(aluno.veredito(),-1, &quot;Veredito das notas (5, 1, 0, 4.5)&quot;);

aluno.carregaNotas(9, 2.25, 3.5, 4.65);
assertEquals(aluno.media(), 4.85, &quot;Média das notas (9, 2.25, 3.5, 4.65)&quot;);
assertEquals(aluno.veredito(), 0, &quot;Veredito das notas (9, 2.25, 3.5, 4.65)&quot;);

aluno.carregaNotas(5.6, 7.6, 6.6, 6);
assertEquals(aluno.media(), 6.45, &quot;Média das notas (5.6, 7.6, 6.6, 6)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (5.6, 7.6, 6.6, 6)&quot;);

aluno.carregaNotas(9.9, 8.6, 7.4, 0);
assertEquals(aluno.media(), 6.475, &quot;Média das notas (9.9, 8.6, 7.4, 0)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (9.9, 8.6, 7.4, 0)&quot;);

aluno.carregaNotas(0, 7.5, 8.75, 9.75);
assertEquals(aluno.media(), 6.5, &quot;Média das notas (0, 7.5, 8.75, 9.75)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (0, 7.5, 8.75, 9.75)&quot;);

aluno.carregaNotas(6.2, 1.5, 2.6, 1.6);
assertEquals(aluno.media(), 2.975, &quot;Média das notas (6.2, 1.5, 2.6, 1.6)&quot;);
assertEquals(aluno.veredito(), -1, &quot;Veredito das notas (6.2, 1.5, 2.6, 1.6)&quot;);

aluno.carregaNotas(3.1, 2.7, 4.9, 5.3);
assertEquals(aluno.media(), 4.0, &quot;Média das notas (3.1, 2.7, 4.9, 5.3)&quot;);
assertEquals(aluno.veredito(), 0, &quot;Veredito das notas (3.1, 2.7, 4.9, 5.3)&quot;);

aluno.carregaNotas(3.25, 7.95, 6.5, 8.1);
assertEquals(aluno.media(), 6.45, &quot;Média das notas (3.25, 7.95, 6.5, 8.1)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (3.25, 7.95, 6.5, 8.1)&quot;);

aluno.carregaNotas(8.8, 6.9, 7.8, 9.1);
assertEquals(aluno.media(), 8.15, &quot;Média das notas (8.8, 6.9, 7.8, 9.1)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (8.8, 6.9, 7.8, 9.1)&quot;);

aluno.carregaNotas(1.8, 9.2, 6.8, 4.8);
assertEquals(aluno.media(), 5.65, &quot;Média das notas (1.8, 9.2, 6.8, 4.8)&quot;);
assertEquals(aluno.veredito(), 1, &quot;Veredito das notas (1.8, 9.2, 6.8, 4.8)&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(157, '(5.3 + 5.4) Construa a classe Inteiro que representa um número inteiro (através de um atributo). Inclua os seguintes métodos:<BR>
 - void carregaValor(int v) - altera o valor representado pelo objeto<BR>
 - int devolveValor() - devolve o valor representado pelo objeto<BR>
 - int devolveValorAbsoluto() - devolve o valor absoluto representado pelo objeto<BR>
 - int soma(int v) - soma o valor v ao valor deste objeto, substituindo o valor atual e devolvendo o novo valor.<BR>
 - int subtrai(int v) - subtrai v do valor deste objeto, substituindo o valor atual e devolvendo o novo valor.<BR>
 - int multiplicaPor(int v) - multiplica por v o valor deste objeto, substituindo o valor atual e devolvendo o novo valor.<BR>
 - int dividePor(int v) - se v for zero, não faz nada e devolve o inteiro representado pelo objeto; senão, divide por v o valor deste objeto (divisão inteira!), substituindo o valor atual e devolvendo o novo valor.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(157,' Inteiro inteiro = new Inteiro();
String str = &quot;Sequência de passos: &quot;;
str += &quot;carregaValor(-50);&quot;;
inteiro.carregaValor(-50);
str += &quot;devolveValor();&quot;;
assertEquals(inteiro.devolveValor(), -50, str);
str += &quot;devolveValorAbsoluto();&quot;;
assertEquals(inteiro.devolveValorAbsoluto(), 50, str);
str += &quot;soma(20);&quot;;
assertEquals(inteiro.soma(20), -30, str);
str += &quot;subtrai(-16);&quot;;
assertEquals(inteiro.subtrai(-16), -14, str);
str += &quot;multiplicaPor(-12);&quot;;
assertEquals(inteiro.multiplicaPor(-12), 168, str);
str += &quot;soma(170);&quot;;
assertEquals(inteiro.soma(170), 338, str);
str += &quot;dividePor(13);&quot;;
assertEquals(inteiro.dividePor(13), 26, str);
str += &quot;subtrai(360);&quot;;
assertEquals(inteiro.subtrai(360), -334, str);
str += &quot;devolveValor();&quot;;
assertEquals(inteiro.devolveValor(), -334, str);
str += &quot;devolveValorAbsoluto();&quot;;
assertEquals(inteiro.devolveValorAbsoluto(), 334, str);

str = &quot;Sequência de passos: &quot;;
str += &quot;carregaValor(37);&quot;;
inteiro.carregaValor(37);
str += &quot;devolveValor();&quot;;
assertEquals(inteiro.devolveValor(), 37, str);
str += &quot;devolveValorAbsoluto();&quot;;
assertEquals(inteiro.devolveValorAbsoluto(), 37, str);
str += &quot;soma(-37);&quot;;
assertEquals(inteiro.soma(-37), 0, str);
str += &quot;multiplicaPor(-1);&quot;;
assertEquals(inteiro.multiplicaPor(-1), 0, str);
str += &quot;soma(35);&quot;;
assertEquals(inteiro.soma(35), 35, str);
str += &quot;dividePor(0);&quot;;
assertEquals(inteiro.dividePor(0), 35, str);
str += &quot;dividePor(8);&quot;;
assertEquals(inteiro.dividePor(8), 4, str);
str += &quot;multiplicaPor(-7);&quot;;
assertEquals(inteiro.multiplicaPor(-7), -28, str);
str += &quot;multiplicaPor(-4);&quot;;
assertEquals(inteiro.multiplicaPor(-4), 112, str);
str += &quot;devolveValor();&quot;;
assertEquals(inteiro.devolveValor(), 112, str);
str += &quot;devolveValorAbsoluto();&quot;;
assertEquals(inteiro.devolveValorAbsoluto(), 112, str);


', 'java');
insert into Questao (id, enunciado, disciplina_id) values(158, '(6.2) Escreva uma classe Bhaskara que possui 3 atributos double correspondentes aos coeficientes reais de uma equação do segundo grau (ax² + bx + c = 0).  Escreva um método void inicializa(double a, double b, double c) para carregar valores nesses atributos, e os dois métodos seguintes:<BR>
 - double delta() - calcula o discriminante (Delta) da fórmula de Bhaskara;<BR>
 - int numeroDeRaizesReais() - devolve o número de raízes reais distintas que a equação possui.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(158,' class TestaEquacao {

 double a, b, c, delta;
 int numRaizesReais;

 TestaEquacao novaEquacao(double a, double b, double c)
 {
  this.a = a;
  this.b = b;
  this.c = c;

  delta = b*b - 4*a*c;
  if (delta > 0) 
    numRaizesReais = 2;
  else if (delta < 0) 
     numRaizesReais = 0;
  else
    numRaizesReais = 1;
  

  return this;
 }

 void testa() throws Exception
 {
  Bhaskara equacao = new Bhaskara();
  equacao.inicializa(a, b, c);

  String descr = &quot;equacao.inicializa(&quot; + a + &quot;, &quot; + b + &quot;, &quot; + c + &quot;)&quot;;

  assertEquals(equacao.delta(), delta, descr + &quot;.delta()&quot;);
  assertEquals(equacao.numeroDeRaizesReais(), numRaizesReais, descr + &quot;.numeroDeRaizesReais()&quot;);
 }

}

TestaEquacao t = new TestaEquacao();
t.novaEquacao(1, 4, 4).testa();
t.novaEquacao(1, 0, -4).testa();
t.novaEquacao(1, 0, 4).testa();
t.novaEquacao(1, -5, 6).testa();
t.novaEquacao(1, 5, 6).testa();
t.novaEquacao(2, 10, 12).testa();
t.novaEquacao(-100, -600, -900).testa();
t.novaEquacao(-10, 20, 350).testa();', 'java');
insert into Questao (id, enunciado, disciplina_id) values(159, '(6.3) Crie uma classe Ponto com um método void inicializa(double x, double y) que carrega as coordenadas de um ponto no plano, e um método int quadrante() que devolve em qual quadrante o ponto está localizado.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(159,' class TestaPonto {
  Ponto novo(double x, double y) {
    Ponto p = new Ponto();
    p.inicializa(x, y);
    return p;
  }
}

TestaPonto testaPonto = new TestaPonto();
double xt, yt;
int quadrante;
for (int i = 0; i < 100; i++) {
  xt = Math.random() * 100.0 - 50.0;
  yt = Math.random() * 100.0 - 50.0;
  quadrante = (xt >= 0) &#63; ((yt >= 0) &#63; 1 : 4) : ((yt >= 0) &#63; 2 : 3);
  assertEquals(testaPonto.novo(xt, yt).quadrante(), quadrante, &quot;quadrante do ponto (&quot;+xt+&quot;,&quot;+yt+&quot;)&quot;);
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(160, 'Faça uma classe Funcionario com o seguinte método:<BR>
double calculaSalario(double valorPorHora, int qtdeHorasTrabalhadas, int diasUteisDoMes) - que calcula o salário do empregado. O valor que o empregado receber por hora trabalhada, a quantidade de horas trabalhadas e a quantidade de dias úteis do mês são passadas como parâmetros. O empregado deve trabalhar em média 8 horas por dia. Caso o número de horas trabalhadas seja maior do que o esperado, o empregado deve receber um adicional de 50% por cada hora extra. Caso trabalhe menos, não deve receber por estas horas não-trabalhadas.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(160,' // Teste
Funcionario f = new Funcionario();
assertEquals(f.calculaSalario(10.0, 200, 22), 2120);
assertEquals(f.calculaSalario(15.0, 100, 20), 1500);
assertEquals(f.calculaSalario(10.0, 176, 22), 1760);
assertEquals(f.calculaSalario(10.0, 176, 20), 1840);
assertEquals(f.calculaSalario(10.0, 0, 20), 0);
assertEquals(f.calculaSalario(10.0, 1, 20), 10);
assertEquals(f.calculaSalario(10.0, 300, 20), 3700);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(161, 'Escreva uma classe de nome Retangulo com os seguintes métodos: <BR>
double calculaArea(double largura, double altura) <BR>
double calculaPerimetro(double largura, double altura) <BR>', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(161,' Retangulo retangulo = new Retangulo();
assertEquals(retangulo.calculaArea(1.0,2.0),1*2.0);
assertEquals(retangulo.calculaArea(2.0,5.0),10.0);
assertEquals(retangulo.calculaArea(3.0,4.5),3.0*4.5);
assertEquals(retangulo.calculaPerimetro(1.0,2.0),1.0*2.0+2.0*2.0);    
assertEquals(retangulo.calculaPerimetro(2.0,5.0),2.0*2.0+5.0*2.0);     
assertEquals(retangulo.calculaPerimetro(3.0,4.5),3.0*2.0+4.5*2.0);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(162, 'Faça a classe ContaRestaurante com os seguintes métodos:<BR>
void acrescentaPedido(double valor) // acrescenta um novo pedido à mesma conta<BR>
double calculaValorTotal() // retorna o valor a pagar, já embutindo o valor dos 10% do garçom<BR>
double calculaValorPorPessoa(int numPessoas) // retorna o valor que cada pessoa deve pagar<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(162,'    ContaRestaurante conta = new ContaRestaurante();

   assertEquals(conta.calculaValorTotal(), 0.0);
   assertEquals(conta.calculaValorPorPessoa(3), 0.0);

   conta.acrescentaPedido(15.00);
   assertEquals(conta.calculaValorTotal(), 16.50);
   assertEquals(conta.calculaValorPorPessoa(2), 8.25);

   conta.acrescentaPedido(28.00);
   assertEquals(conta.calculaValorTotal(), 47.30);
   assertEquals(conta.calculaValorPorPessoa(5), 9.46);

   conta.acrescentaPedido(32.00);
   assertEquals(conta.calculaValorTotal(), 82.50);
   assertEquals(conta.calculaValorPorPessoa(6), 13.75);

   conta.acrescentaPedido(44.00);
   assertEquals(conta.calculaValorTotal(), 130.90);
   assertEquals(conta.calculaValorPorPessoa(11), 11.90);

   conta.acrescentaPedido(35.00);
   assertEquals(conta.calculaValorTotal(), 169.40);
   assertEquals(conta.calculaValorPorPessoa(4), 42.35);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(163, 'Dada a classe Movimentacao:
<PRE>
class Movimentacao {
	double valor;
	int tipo; // 0 para retiradas e 1 para depósito
	void init (int v, int t) {
		valor = v; tipo = t;
	}
	double getValor() { 
		return valor;
	}
	int getTipo() {
		return tipo;
	}
}
</PRE>
Faça uma classe ContaCorrente, como as seguintes operações:
<LI>void aplicaJuros(double taxa) - caso o saldo esteja negativo, debita o valor do juros. A taxa é dada em porcentagem. Por exemplo, se o juros for de 1%, a taxa é 0.01
<LI>void movimenta(Movimentacao m) - recebe uma movimentação e atualiza o saldo
<LI>double getSaldo() - retorna o valor do saldo da conta<BR>
OBS: Para a sua resposta compilar no programa de teste, coloque também o código da classe dada como parte da resposta.<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(163,' class Conta {
	ContaCorrente cc = new ContaCorrente();
	Conta movimenta (int x, int y) {
		Movimentacao mov = new Movimentacao();
		mov.init(x,y);
		cc.movimenta(mov);
		return this;
	}
	Conta aplicaJuros(double taxa) {
		cc.aplicaJuros(taxa);
		return this;
	}
	double getSaldo() {
		return cc.getSaldo();
	}
}
			
assertEquals((new Conta()).movimenta(200,0).getSaldo(),-200, &quot;Saque de 200 reais&quot;);
assertEquals((new Conta()).movimenta(200,0).movimenta(300,1).getSaldo(),100, &quot;Saque de 200 reais; Depósito de 300 reais&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.01).getSaldo(),-202, &quot;Saque de 200 reais; Aplicação de 1% de juros&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.1).getSaldo(),-220, &quot;Saque de 200 reais; Aplicação de 10% de juros&quot;);
assertEquals((new Conta()).movimenta(200,0).aplicaJuros(0.1).movimenta(200,1).getSaldo(),-20, &quot;Saque de 200 reais; Aplicação de 10% de juros; Depósito de 200 reais&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(164, '(8.1) Crie uma classe Fatorial com um método int calculaFatorial(int x) que calcula o fatorial de x se este for um número inteiro não-negativo, ou -1 se x for negativo.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(164,' Fatorial f = new Fatorial();
assertEquals(f.calculaFatorial(-2), -1);
assertEquals(f.calculaFatorial(-1), -1);
assertEquals(f.calculaFatorial(0), 1);
assertEquals(f.calculaFatorial(1), 1);
assertEquals(f.calculaFatorial(2), 2);
assertEquals(f.calculaFatorial(3), 6);
assertEquals(f.calculaFatorial(4), 24);
assertEquals(f.calculaFatorial(5), 120);
assertEquals(f.calculaFatorial(6), 720);
assertEquals(f.calculaFatorial(7), 5040);
assertEquals(f.calculaFatorial(8), 40320);
assertEquals(f.calculaFatorial(9), 362880);
assertEquals(f.calculaFatorial(10), 3628800);
assertEquals(f.calculaFatorial(11), 39916800);
assertEquals(f.calculaFatorial(12), 479001600);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(165, '(8.4) Escreva uma classe Fibonacci, com um método int imprimeNumeroDeFibonacci(int n), que devolve o n-ésimo número da seqüência de Fibonacci, que é definida da seguinte forma:<BR>
F<sub>1</sub> = 1, F<sub>2</sub> = 1, F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub> (se n > 2)
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(165,' class Fi {
  int imprimeNumeroDeFibonacci (int n) {
	if (n == 1 || n == 2)
		return 1;
	return imprimeNumeroDeFibonacci (n - 1) + imprimeNumeroDeFibonacci (n - 2);
  }
}


Fibonacci f = new Fibonacci();
Fi fib = new Fi(); 

for (int i = 1; i < 20; i++) {
  assertEquals(f.imprimeNumeroDeFibonacci(i), fib.imprimeNumeroDeFibonacci(i), &quot;f.imprimeNumeroDeFibonacci(&quot;+i+&quot;)&quot;);
}', 'java');
insert into Questao (id, enunciado, disciplina_id) values(166, '(8.7) Escreva uma classe Euclides, com um método int mdc(int a1, int a2), que recebe dois inteiros estritamente positivos, com a1 >= a2, e devolve o máximo divisor comum entre eles, usando o algoritmo de Euclides.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(166,' Euclides euc = new Euclides();
assertEquals(euc.mdc(6, 2), 2);
assertEquals(euc.mdc(6, 3), 3);
assertEquals(euc.mdc(15, 12), 3);
assertEquals(euc.mdc(24, 12), 12);
assertEquals(euc.mdc(27, 18), 9);
assertEquals(euc.mdc(47, 13), 1);
assertEquals(euc.mdc(47, 46), 1);
assertEquals(euc.mdc(456, 57), 57);
assertEquals(euc.mdc(1029, 357), 21);
assertEquals(euc.mdc(4712, 1767), 589);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(167, 'Escreva uma classe Primos, que contem o metodo int somaPrimosAteN(int n), com n>1, que devolve a soma dos numeros primos entre 1 e n.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(167,' Primos p = new Primos();

assertEquals(p.somaPrimosAteN(2),2);
assertEquals(p.somaPrimosAteN(7),17);
assertEquals(p.somaPrimosAteN(50),328);
assertEquals(p.somaPrimosAteN(100),1060);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(168, 'Crie uma classe MudaBase, com os seguintes metodos: int baseDezParaDois ( int num ): Converte um numero n >0 da base decimal para
a base binaria. int mudaDeBase ( int numero ): Faz chamada ao método anterior e devolve o resultado.', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(168,' MudaBase m = new MudaBase();

assertEquals(m.mudaDeBase(10),1010);
assertEquals(m.mudaDeBase(20),10100);
assertEquals(m.mudaDeBase(547),1000100011);
assertEquals(m.baseDezParaDois(225),11100001);', 'java');
insert into Questao (id, enunciado, disciplina_id) values(169, 'Escreva uma classe FormataData, com o método: <BR>
- String formata(int num) - que recebe um número de 8 algarismos contendo a data (ddmmaaaa) e retorne uma String com dd/mm/aaaa.
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(169,' FormataData formataData = new FormataData();
assertEquals(formataData.formata(11021999),&quot;11/02/1999&quot;);
assertEquals(formataData.formata(31122005),&quot;31/12/2005&quot;);
assertEquals(formataData.formata(11012001),&quot;11/01/2001&quot;);
assertEquals(formataData.formata(12032000),&quot;12/03/2000&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(170, 'Fazer um jogo da forca. Faça uma classe Forca com os métodos:<BR>
- void comeca(String palavra) - começa o jogo com a palavra fornecida como parâmetro<BR>
- void configuraNumeroMaximoDeErros(int n) - define quantos erros o usuário pode ter antes de acertar a palavra<BR>
- String fazTentativa(char letra) - recebe uma letra como parâmetro. Caso a letra não pertença à palavra e esgotou a quantidade de erros máxima, retorne &quot;Você perdeu. A palavra era xxxx.&quot;, onde xxxx é a palavra secreta. Caso ainda tenha chances, retorne &quot;Letra não faz parte, tente novamente.&quot;. Caso tenho acertado todas as letras, retorne &quot;Você ganhou&quot;. Caso ainda faltem letras a serem adivinhadas, retorne a palavra substituindo as letras não adivinhadas por *. Por exemplo:<BR>
Forca forca = new Forca();<BR>
forca.comeca(&quot;Macaco&quot;);<BR>
forca.configuraNumeroMaximoDeErros(2);<BR>
forca.fazTentativa(&#39;a&#39;); // retorna &quot;*a*a**&quot;<BR>
forca.fazTentativa(&#39;e&#39;); // retorna &quot;Letra não faz parte, tente novamente.&quot;<BR>
forca.fazTentativa(&#39;c&#39;); // retorna &quot;*acac*&quot;<BR>
forca.fazTentativa(&#39;d&#39;); // retorna &quot;Letra não faz parte, tente novamente.&quot;<BR>
forca.fazTentativa(&#39;i&#39;); // retorna &quot;Você perdeu. A palavra era macaco.&quot;<BR>
<BR>
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(170,' Forca forca = new Forca();
String str = &quot;sequência &quot;;
str += &quot;comeca(&quot;macaco&quot;)&quot;;
forca.comeca(&quot;macaco&quot;);

str += &quot;;configuraNumeroMaximoDeErros(2)&quot;;
forca.configuraNumeroMaximoDeErros(2);

str += &quot;;fazTentativa(&#39;a&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;a&#39;), &quot;*a*a**&quot;, str); 
str += &quot;;fazTentativa(&#39;e&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;e&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;c&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;c&#39;), &quot;*acac*&quot;, str); 
str += &quot;;fazTentativa(&#39;d&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;d&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;i&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;i&#39;), &quot;Você perdeu. A palavra era macaco.&quot;, str); 

forca = new Forca();
str = &quot;sequência &quot;;
str += &quot;comeca(&quot;paralelo&quot;)&quot;;
forca.comeca(&quot;paralelo&quot;);

str += &quot;;configuraNumeroMaximoDeErros(3)&quot;;
forca.configuraNumeroMaximoDeErros(3);

str += &quot;;fazTentativa(&#39;x&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;x&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;l&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;l&#39;), &quot;****l*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;d&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;d&#39;), &quot;Letra não faz parte, tente novamente.&quot;, str); 
str += &quot;;fazTentativa(&#39;r&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;r&#39;), &quot;**r*l*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;a&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;a&#39;), &quot;*aral*l*&quot;, str); 
str += &quot;;fazTentativa(&#39;e&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;e&#39;), &quot;*aralel*&quot;, str); 
str += &quot;;fazTentativa(&#39;o&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;o&#39;), &quot;*aralelo&quot;, str); 
str += &quot;;fazTentativa(&#39;p&#39;)&quot;;
assertEquals(forca.fazTentativa(&#39;p&#39;), &quot;Você ganhou&quot;, str); 
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(171, 'Escreva a classe Palavra com os seguintes métodos:<BR>
- int contaVogais(String palavra) - retorna a quantidade de vogais da palavra<BR>
- String inverte(String palavra) - retorna a palavra digitada de trás para frente
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(171,' Palavra palavra = new Palavra();
assertEquals(palavra.contaVogais(&quot;macaco&quot;), 3);
assertEquals(palavra.contaVogais(&quot;chove&quot;), 2);
assertEquals(palavra.contaVogais(&quot;remar&quot;), 2);
assertEquals(palavra.contaVogais(&quot;rosbife&quot;), 3);
assertEquals(palavra.inverte(&quot;remar&quot;), &quot;ramer&quot;);
assertEquals(palavra.inverte(&quot;jose&quot;), &quot;esoj&quot;);
assertEquals(palavra.inverte(&quot;ovo&quot;), &quot;ovo&quot;);
assertEquals(palavra.inverte(&quot;pedro&quot;), &quot;ordep&quot;);
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(172, '(14.3) Crie uma classe <code>Sequencias</code> com um método <code>boolean ehSubsequencia(int[] a, int[] b)</code> que, dados os dois vetores <var>a</var> e <var>b</var>, verifica se o vetor de menor tamanho é uma subsequência do vetor de tamanho maior. Ex: O vetor [9, 5] é uma subsequência de [3, 9, 5, 4, &minus;1].', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(172,' // Código:

class TestaSubsequencias
{
   int[] aleatoria(int[] a)
   {
      double r;
      int i = 0;
      int[] v = new int[a.length], w;

      while (i == 0) { // evita seqüências vazias
         int ini = (int) (Math.random() * (a.length-1));
         for (int j = ini; j < a.length; j++) {
            v[i++] = a[j];
            if (Math.random() > 0.8) {
               break;
	    }
         }
      }
      w = new int[i];
      for (int j = 0; j < i; j++)
         w[j] = v[j];
      return w;
   }

   String imprimeArray(int[] a)
   {
      StringBuilder buf = new StringBuilder();
      buf.append(&quot;[&quot;);
      for (int j = 0; j < a.length; j++)
         if (j > 0)
            buf.append(&quot;, &quot; + a[j]);
         else
            buf.append(&quot;&quot; + a[j]);
      buf.append(&quot;]&quot;);
      return buf.toString();
   }

   int[] criaSequencia(int n, int a, int b)
   {
      int[] v = new int[n];
      for (int j = 0; j < n; j++)
         v[j] = a + (int)((b-a + 1) * Math.random());
      return v;
   }

}

TestaSubsequencias t = new TestaSubsequencias();
Sequencias c = new Sequencias();

int[] a1 = {2};
int[] a2 = {3,2,7,8};
assertEquals(c.ehSubsequencia(a1, a2), true, &quot;sequências &quot; +
            t.imprimeArray(a2) + &quot; e &quot; + t.imprimeArray(a1));


for (int i = 0; i < 15; i++) {
   int[] seq = t.criaSequencia(7 + (int)(6 * Math.random()), -15, 15);

   for (int j = 0; j < 5; j++) {
      // verifica subsequências
      int[] subseq = t.aleatoria(seq);
      assertEquals(c.ehSubsequencia(subseq, seq), true, &quot;sequências &quot; +
            t.imprimeArray(seq) + &quot; e &quot; + t.imprimeArray(subseq));

      assertEquals(c.ehSubsequencia(seq, subseq), true, &quot;sequências &quot; +
            t.imprimeArray(subseq) + &quot; e &quot; + t.imprimeArray(seq));

      // altera elementos aleatórios das subsequências de modo que eles
      // não estejam na sequência original
      for (int k = 0; k < 3; k++) {
         int r = (int)(subseq.length * Math.random());
         subseq[r] = 16 + (int)(10 * Math.random());
         assertEquals(c.ehSubsequencia(seq, subseq), false, &quot;sequências &quot; +
               t.imprimeArray(subseq) + &quot; e &quot; + t.imprimeArray(seq));
      }
   }
}
', 'java');
insert into Questao (id, enunciado, disciplina_id) values(173, 'Faça uma classe Estatistica com os seguintes métodos:<BR>
- void carregaValor(double n) - armazena um valor<BR>
- double media() - retorna a media aritmética dos valores armazenados<BR>
- double max() - retorna o maior valor entre os armazenados<BR>
- double min() - retorna o menor valor entre os armazenados<BR>
- double amplitude() - retorna a distância entre o menor e o maior valor<BR>
- double mediaGeometrica() - retorna a média geométrica (raiz n-ésima do produtório dos n itens)<BR>
- double mediaHarmonica() - retorna a média harmônica dos valores (inverso da média aritmética dos inversos dos valores)<BR>
- double desvioMedio() - retorna o desvio médio dos valores<BR>
- double desvioPadrao() - retorna o desvio padrão dos valores
', 100);
insert into QuestaoDeCodigo (id, codigoDeTeste, linguagem) values(173,' // Testa
Estatistica e = new Estatistica();
e.carregaValor(10);
e.carregaValor(5);
e.carregaValor(3);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.media(), 6.833333333, &quot;media() para (10,5,3,1,10,12)&quot;);
assertEquals(e.max(), 12, &quot;max() para (10,5,3,1,10,12)&quot;);
assertEquals(e.min(), 1, &quot;min() para (10,5,3,1,10,12)&quot;);
assertEquals(e.amplitude(), 11, &quot;amplitude() para (10,5,3,1,10,12)&quot;);
assertEquals(e.mediaGeometrica(), 5.119317722, &quot;mediaGeometrica() para (10,5,3,1,10,12)&quot;);
assertEquals(e.mediaHarmonica(), 3.302752294, &quot;mediaHarmonica() para (10,5,3,1,10,12)&quot;);
assertEquals(e.desvioMedio(), 3.833333333, &quot;desvioMedio() para (10,5,3,1,10,12)&quot;);
assertEquals(e.desvioPadrao(), 4.058598553961973, &quot;desvioPadrao() para (10,5,3,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(1);
e.carregaValor(10);
e.carregaValor(12);
assertEquals(e.media(), 10.83333333, &quot;media() para (14,14,14,1,10,12)&quot;);
assertEquals(e.max(), 14, &quot;max() para (14,14,14,1,10,12)&quot;);
assertEquals(e.min(), 1, &quot;min() para (14,14,14,1,10,12)&quot;);
assertEquals(e.amplitude(), 13, &quot;amplitude() para (14,14,14,1,10,12)&quot;);
assertEquals(e.mediaGeometrica(), 8.30986992, &quot;mediaGeometrica() para (14,14,14,1,10,12)&quot;);
assertEquals(e.mediaHarmonica(), 4.293015332, &quot;mediaHarmonica() para (14,14,14,1,10,12)&quot;);
assertEquals(e.desvioMedio(), 3.555555556, &quot;desvioMedio() para (14,14,14,1,10,12)&quot;);
assertEquals(e.desvioPadrao(), 4.6338129248192805, &quot;desvioPadrao() para (14,14,14,1,10,12)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
assertEquals(e.media(), 14, &quot;media() para (14,14,14)&quot;);
assertEquals(e.max(), 14, &quot;max() para (14,14,14)&quot;);
assertEquals(e.min(), 14, &quot;min() para (14,14,14)&quot;);
assertEquals(e.amplitude(), 0, &quot;amplitude() para (14,14,14)&quot;);
assertEquals(e.mediaGeometrica(), 14, &quot;mediaGeometrica() para (14,14,14)&quot;);
assertEquals(e.mediaHarmonica(), 14, &quot;mediaHarmonica() para (14,14,14)&quot;);
assertEquals(e.desvioMedio(), 0, &quot;desvioMedio() para (14,14,14)&quot;);
assertEquals(e.desvioPadrao(), 0, &quot;desvioPadrao() para (14,14,14)&quot;);

e = new Estatistica();
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(14);
e.carregaValor(50);
assertEquals(e.media(), 23, &quot;media() para (14,14,14,50)&quot;);
assertEquals(e.max(), 50, &quot;max() para (14,14,14,50)&quot;);
assertEquals(e.min(), 14, &quot;min() para (14,14,14,50)&quot;);
assertEquals(e.amplitude(), 36, &quot;amplitude() para (14,14,14,50)&quot;);
assertEquals(e.mediaGeometrica(), 19.24591342, &quot;mediaGeometrica() para (14,14,14,50)&quot;);
assertEquals(e.mediaHarmonica(), 17.07317073, &quot;mediaHarmonica() para (14,14,14,50)&quot;);
assertEquals(e.desvioMedio(), 13.5, &quot;desvioMedio() para (14,14,14,50)&quot;);
assertEquals(e.desvioPadrao(), 15.588457268119896, &quot;desvioPadrao() para (14,14,14,50)&quot;);
', 'java');
